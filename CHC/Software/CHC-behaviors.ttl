# @base <http://localhost:8090/rdf4j/repositories/behaviors#> .

@prefix agents: <http://localhost:8090/rdf4j/repositories/agents#> .
@prefix : <http://localhost:8090/rdf4j/repositories/behaviors#> .
@prefix domain: <http://localhost:8090/rdf4j/repositories/domain#> .
@prefix localServices: <http://localhost:8090/rdf4j/repositories/localServices#> .
@prefix localAgents: <http://localhost:8090/rdf4j/repositories/localAgents#> .
@prefix services: <http://localhost:8090/rdf4j/repositories/services#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ajan: <http://www.ajan.de/ajan-ns#> .
@prefix bt: <http://www.ajan.de/behavior/bt-ns#> .
@prefix actn: <http://www.ajan.de/actn#> .
@prefix http-headers: <http://www.w3.org/2008/http-headers#> .
@prefix http-methods: <http://www.w3.org/2008/http-methods#> .
@prefix http-core: <http://www.w3.org/2006/http#> .
@prefix ssc: <http://welcome/ajan/servicecomputing#> .
@prefix welcomePlugin: <http://welcome/ajan/plugin#> .

# ----------------------------------------------
# ------------- WelcomeBehaviorTree ------------
# ----------------------------------------------

# ----------- Endpoint ------------

# localhost:8080/welcome/integration/coordination/ajan/agents/<agentName>?capability=receiveSpeechAct | POST | text/turtle
# Body: "<http://test/Subject> <http://test/predicate> "Hallo! I come from the KMS" ."
# localhost:8080/welcome/integration/coordination/ajan/agents/<agentName>?capability=populateRepo | POST | text/turtle
# Body: "<http://test/Subject> <http://test/predicate> "Hallo! I come from the WPM" ."

# -------------------------------------------
# ---------------- Behaviors ----------------
# -------------------------------------------



# ----------- MAJAN BTs -----------

# ---------- Clustering Coordination Protocol BTs ------------
:SendClusteringCoordRequestTempBt
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Send Clustering Coord. Request Templ BT" ;
	bt:hasChild [
			a bt:UntilFail ;
			bt:hasChild [
				a bt:Priority ;
				bt:hasChildren (
					[
						a bt:Sequence ;
						bt:hasChildren (
							:HandleStartClusteringCoordRequestEvent
# !!! Important !!!
# Coordination request (MACProblemInstance) will be kept in the Execution Knowledge of specific Coordination BTs. This MACProblemInstance will be updated with executed Conversations and their statuses accordingly and then the MACProblemInstance will be written to Agent Knowledge with WRITE node since this node replace the triples in Agent Knowledge if they already exist. By doing so, there will be no need to identify the correct MACProblemInstance in Agent Knowledge to be able to update it. 
#   							
							:MakeMacProblemUnique   
							:SetMacProblemRunning
							:SaveMacProblem 	# same instances of mac is used thgroughaout the whole coordination bts. And whenever this node is called, it overrides the data in akb. so it is enough to update mac problem in ekb and then save the current version to akb. 
							:WriteThisAgentIdToEKB
							:LOGStartedCoordination
							:WriteParticipantAddressesToEKB
							:GenerateNewConvInstance
							:InsertAgentProfileInfoCapability
							:InsertMacProblemInfoToConversation
							:MessageToParticipants # request profile info from participants
							:LOGSentProfileInfoRequestToParticipants
							[
								a bt:UntilSuccess ;
								bt:hasChild [
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:GetResponses
												[
													a bt:Priority ;
													bt:hasChildren (
														[
															a bt:Invert ;
															bt:hasChild 
																:NotificationNecessary
														]
														:AgreementsReached
													)
												]
												:QuorumReached
												:SetQuorumReached
											)	
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
												:TimeoutReached
												:SetTimeoutReached
											)
										]
									)
								]
							]
							:AddConversationToMacProblem  # add the executed conversation (with status) to the mac problem in execution knowledge
							# Following condition can be used if users want to add custom behavior based on Quorum or Timeout reached
							[
								a bt:Priority ;
								bt:hasChildren (
									[
										a bt:Sequence ;
										bt:hasChildren (
											:IsQuorumReached
											:LOGQuorumReached # conversation, quorum reached
										)
									]
									[
										a bt:Sequence ;
										bt:hasChildren (
											:LOGTimeoutReached #conversation, timeout reached
											:JustFail  # if timeout reached, then don't continue, BREAK 
										)
									]
								)
							]							
							:SaveMacProblem  # save the mac problem with an added conversation to agent knowledge
							:ProduceCollectClusteringDistancesEvent # must send required triples
							:ClearEKB
						)
					]
					[
						a bt:Sequence ;
						bt:hasChildren (
							:ClearEKB
							:JustFail
						)
					]
				)
			]
	] .


:CollectClusteringDistancesTemplBt
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Collect Clustering Distances Templ. BT" ;
	bt:hasChild [
			a bt:UntilFail ;
			bt:hasChild [
				a bt:Priority ;
				bt:hasChildren (
					[
						a bt:Sequence ;
						bt:hasChildren (
							:HandleCollectClusteringDistancesEvent 
							:WriteThisAgentIdToEKB
							:LOGStartedCollectClustering
							:WriteAgentProfileInfo
							:CreateThisAgentProfileInstance
							:WriteAgentProfilesToEKB # attach profile info of paticipants to message  
							[
								a bt:Priority ;
								bt:hasChildren (
									[
										a bt:Invert ;
										bt:hasChild 
											:UnnecessaryAgentProfileExists	# since Update node fails when there is no result, it must be checked if there is any data to be updated beforehand. 
									]
									:RemoveUnnecessaryAgentProfiles # removes agent profiles which are unrelated to this mac problem instance
								)
							]
#							:ConditionId
#							:ConditionParticipants
#							:ConditionNumberOfAgents
#							:ConditionCoalitions
							#:WriteEverythingToAKB
							:ComputeCannotLinks  	#a write node is used instead of update since update node fails if the query returns no triple. But it is possible that sometimes Where clause returns nothing because simply there is no cannot link. But write node doesn't faild when the query returns empty. 
							:WriteParticipantAddressesToEKB
							:SaveMacProblem
							:GenerateNewConvInstance
							:InsertClusteringDistancesCapability # insert participant capability to request distance values  
							:AddProfileInfoToMessage 	# insert profile info of all participants to message content 
							:MessageToParticipants # request clusterig distances from participants
							:LOGSentClusteringDistancesRequestToParticipants
							[
								a bt:UntilSuccess ;
								bt:hasChild [
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:GetResponses
												[
													a bt:Priority ;
													bt:hasChildren (
														[
															a bt:Invert ;
															bt:hasChild 
																:NotificationNecessary
														]
														:AgreementsReached
													)
												]
												:QuorumReached
												:SetQuorumReached
											)	
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
												:TimeoutReached
												:SetTimeoutReached
											)
										]
									)
								]
							]
							# Following node can be used if users want to add custom behavior based on Quorum or Timeout reached
							:AddConversationToMacProblem
							[
								a bt:Priority ;
								bt:hasChildren (
									[
										a bt:Sequence ;
										bt:hasChildren (
											:IsQuorumReached
											:LOGQuorumReached # conversation, quorum reached
										)
									]
									[
										a bt:Sequence ;
										bt:hasChildren (
											:LOGTimeoutReached #conversation, timeout reached
											:JustFail  # if timeout reached, then don't continue, BREAK 
										)
									]
								)
							]
							:SaveMacProblem
							:GetAgentPreferences # write preferences to EKB 
							:ComputeClusteringDistances # compute distance values of this agent and add to mac instance
							:SaveMacProblem
							#:WriteEverythingToLSR							
							#:WriteEverythingToAKB
							#:ConditionId
							#:ConditionParticipants
							#:ConditionNumberOfAgents
							:ProduceSolveClusteringEvent # send current mac info, 
							#:ProduceFinalizeCoordinatonEvent
							:ClearEKB
						)
					]						
					[
						a bt:Sequence ;
						bt:hasChildren (
							:ClearEKB
							:JustFail
						)
					]
				)
			]
	] .

:HandleClusteringDistancesRequestTemplBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Handle Clustering Distances Request Templ. BT" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren (
						:HandleClusteringDistancesRequestEvent  
						:WriteThisAgentIdToEKB
						:LOGReceivedClusteringDistancesRequest # conversation, 
						:InsertAgreedToRequest  # agree or refuse can be decided based on some use case dependent conditions if necessary 
						:InsertDefaultResponseCapability # insert default capability of initiator to receive response from participants
						:WriteParticipantAddressesToEKB
						[
							a bt:Invert ;
							bt:hasChild 
								:TimeoutReached
						]
						[
							a bt:Priority ;
							bt:hasChildren (
								[
									a bt:Invert ;
									bt:hasChild 
										:NotificationNecessary
								]
								[
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:AgreedToPerformRequest
												:AgreedMessageToInitiator
												:LOGAgreedToRequest
											)
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
												:RefusedMessageToInitiator
												:LOGRefusedRequest
											)
										]
									)
								]
							)
						]
						:GetAgentPreferences # write preferences to Ex Knowledge. FYI: profile info of other agents are send by Dedicated agent and already exists in EKB. 
						#:WriteEverythingToAKB
						#:ClearLSR
						#:WriteEverythingToLSR
						:ComputeClusteringDistances # compute distances values of this agent
						:RemoveConversationContent
						#:InsertUtilities  # THIS IS AN UPDATE NODE WHICH DOESN'T WORK FOR SOME REASON. EXPLANATION BELOW:
						#:WriteUtilities # INSTEAD OF USING AN UPDATE NODE, I MUST USE A WRITE NODE. FOR SOME REASON, UPDATE NODE DOESN'T WORK. IN ORDER TO FIND OUT WHY, I WROTE EVERYTHING FROM EKB TO AKB AND TRIED TO RUN THE UPDATE NODE MANUALLY IN RDF4J REPOSITORY->QUERY. UNFORTUNATELY, THE QUERY WORKED THERE. THUS, I COULDN'T FIND THE PROBLEM. TO OVERCOME THIS ISSUE, I USED A WRITE TO TO WRITE FROM EKB TO EKB. THIS NODE/QUERY WORKS CORRECTLY.  
						:AddDistancesToResultMessage #
						:InsertInitiatorAsReceiver
						#:WriteEverythingToLSR

						[
							a bt:Priority ;
							bt:hasChildren (
								:TimeoutReached
								[
									a bt:Sequence ;
									bt:hasChildren (
										:SendResultMessage
										:LOGClusteringDistancesResult
									)
								]						
							)
						]
						:ClearEKB
					)
				]
				[
					a bt:Sequence ;
					bt:hasChildren (
						:ClearEKB
						:JustFail
					)
				]
			)
		]
	].


:SolveClusteringTemplBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Solve Clustering Templ. BT" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
					a bt:Priority ;
					bt:hasChildren (
						[
							a bt:Sequence ;
							bt:hasChildren (
								:HandleSolveClusteringEvent # mac problem instance with id, cannot must links, current mac,
								:InsertHdbscanAsSolverToMacProblem
								:WriteThisAgentIdToEKB
								:LOGSolveClustering 
								[
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:WriteRunningMacDistancesToEKB 
												:ComputeReciprocalDistances # in ekb for current mac
												:CurrentMacExists
												#:ClearLSR
												#:WriteEverythingToLSR												
												:SolveClusteringWithHdbscan # also send cannot links
												:SetMacProblemCompleted
												:LOGClusteringSolved
												:ProduceFinalizeCoordinatonEvent
												:ClearEKB
											)
										]
										:SetMacProblemFailed
										:ProduceFinalizeCoordinatonEvent
										:ClearEKB	
									)
								]
							)
						]
						[
							a bt:Sequence ;
							bt:hasChildren (
								:ClearEKB
								:JustFail
							)
						]
					)
					]
				] .



:FinalizeCoordinationToGroupsBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Finalize Coordination to Groups BT" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
				a bt:Priority ;
				bt:hasChildren (
						[
							a bt:Sequence ;
							bt:hasChildren (
								:HandleFinalizeCoordinationEvent  
								[
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:WriteThisAgentIdToEKB	
												:LOGFinalizeCoordination		 
						#						:ClearLSR
						#						:WriteEverythingToLSR
												:ComputeCoordinationRuntime 	# computes the runtime of coord process  
												:SaveMacProblem
												:InsertDefaultResponseCapability  	
												:WriteParticipantAddressesToEKB
												:InsertParticipantsAsReceivers
												#:WriteEverythingToLSR
												:InsertCoordinationResult # attach mac problem
												#:RemoveUnnecessaryDataFromConversationContent 	#coalitions, currentmac
												#:WriteEverythingToLSR
											#	:ClearLSR
											#	:WriteEverythingToLSR
												[
													a bt:Priority ;
													bt:hasChildren (
														:SendResultMessage 	# It is optional here to inform participants about the result of coordination. I.e. if something happens and not all participants are not informed, then coordination doesn't fail. But by removing this Priority branch, it can be made mandatory to broadcast the result to participants. 
														:SimpleSuccess
													)
												]
												:ClearEKB
											)
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
												:SetMacProblemFailed
												:SaveMacProblem
												:ClearEKB
											)
										]
									)
								]
						)
						]
						[
							a bt:Sequence ;
							bt:hasChildren (
								:ClearEKB
								:JustFail
							)
						]
				)
		]
	] .
# ---------- Clustering Coordination Protocol BTs ------------

# ---------- Clustering Coordination Protocol BT Nodes ------------
:HandleStartClusteringCoordRequestEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Start Clustering Coord. Request Event" ;
	bt:event agents:StartClusteringCoordRequestEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?macInstance 	rdf:type 	mac:MACProblemInstance ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notifNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasQuorum 	?quorum ;
										mac:hasMinPoints    ?minPoints ;
										mac:hasMinClusterSize   ?minClSize .
					}
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notifNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasQuorum 	?quorum .
						#OPTIONAL {
							?macInstance 	mac:hasMinPoints    ?minPoints ;
									        mac:hasMinClusterSize   ?minClSize .
						#}
					}"""^^xsd:string ;
				] .

:HandleCollectClusteringDistancesEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Collect Clustering Distances Event" ;
	bt:event agents:CollectClusteringDistancesEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?macInstance	rdf:type	mac:MACProblemInstance ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?id ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasQuorum 	?quorum ;
										?predicate 	?object .
							?macInstance 	mac:hasMinPoints    ?minPoints ;
									        mac:hasMinClusterSize   ?minClSize .
					}
					WHERE {
						?macInstance	rdf:type	mac:MACProblemInstance ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?id ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasQuorum 	?quorum .
						OPTIONAL {		
							?macInstance 	?predicate 	?object .
						}
						#OPTIONAL {
							?macInstance 	mac:hasMinPoints    ?minPoints ;
									        mac:hasMinClusterSize   ?minClSize .
						#}
					}"""^^xsd:string ;
				] .

:HandleClusteringDistancesRequestEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Clustering Distances Event" ;
	bt:event agents:HandleClusteringDistancesRequestEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s 	?p 	?o .
					}
					WHERE {
						?s 	?p 	?o .
					}"""^^xsd:string ;
				] .

:InsertClusteringDistancesCapability
	a bt:Update ;
	rdfs:label "Insert Request Clustering-distances capability" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?subject 	mac:hasReceiverCapability 	?existingCapability .
					}
					INSERT{
						?subject	mac:hasReceiverCapability	'clusteringDistanceScores' .
					}
					WHERE{
						?subject	rdf:type	mac:Conversation .

						OPTIONAL {
							?subject mac:hasReceiverCapability 	?existingCapability .
						}
					}
					"""^^xsd:string ;
		] .


:AddProfileInfoToMessage
	a bt:Update ;
	rdfs:label "Add Profile info of Participants to Request Message" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

					INSERT {
						?conversationSbj 	mac:hasContent 	?profileInfoIri, ?macInstance .
					}
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance ;
										mac:hasId 	?macId .

						?conversationSbj	rdf:type 	mac:Conversation ;
											mac:hasMacProblemId 	?macId .

						?resultSbj		rdf:type 	mac:RequestResult ;
										mac:hasMacProblemId 	?macId ;
										mac:hasContent	?profileInfoIri .
								
						?profileInfoIri	rdf:type 	mac:AgentProfileInfo ;
										mac:belongsTo 	?agentId ;
										domain:hasGender 	?gender ;
										domain:hasNationality 	?nation .
				} 
					"""^^xsd:string ;
		] .

:ComputeClusteringDistances
	a bt:Write ;
	rdfs:label "Compute Clustering Distances" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

				CONSTRUCT  {
					?macInstance 	mac:hasDistanceScore 	?distanceScoreIri .
					?distanceScoreIri 	rdf:type 	mac:DistanceScore ;
										mac:hasValue 	?minTotalDistance ;
										mac:isComputedBy	?thisAgentId ;
										mac:isComputedAgainst ?participantId ;
										mac:isComputedFor 	?macId .
				}
				WHERE {
					{
					SELECT ?macInstance ?thisAgentId ?participantId ?macId (MIN(?totalDistance) AS ?minTotalDistance)
					WHERE {
						{
							SELECT ?macInstance ?thisAgentId ?participantId  ?totalDistance ?macId
							WHERE {
								### retrieve this agent
								?thisAgentIRI 	rdf:type 	ajan:Agent, ajan:ThisAgent ;
												ajan:agentId 	?thisAgentId .

								### retrieve Preferences of this agent
								?thisAgentPrefs 	rdf:type	mac:AgentPreferences ;
													domain:hasGenderPreference 	?thisGenderPref ;
													domain:hasNationPreference 	?thisNationPref ;
													domain:hasGenderPrefWeight 	?thisGenPrefWeight ;
													domain:hasNationPrefWeight 	?thisNatPrefWeight .
				
								### retrieve participant agent id
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasId 	?macId ;
												mac:hasParticipants 	?participantId .	

								### rule out agent computing similarity with itself
								FILTER(?thisAgentId != ?participantId)

								### retrieve Personal Info of this agent
								?conversation 	rdf:type 	mac:Conversation .

								?conversation 	mac:hasContent 	?thisAgentProfile, ?partAgentProfile.

								?thisAgentProfile 	rdf:type 	mac:AgentProfileInfo ;
													mac:belongsTo 	?thisAgentId ;
													domain:hasGender 	?thisGender ;
													domain:hasNationality 	?thisNation .



								### retrieve Profile Info of the participant agent(s)
								?partAgentProfile 	rdf:type 	mac:AgentProfileInfo ;
													mac:belongsTo 	?participantId ;
													domain:hasGender 	?participantGender ;
													domain:hasNationality 	?participantNation .

								### set config values
								BIND(0 AS ?matchScore)
								BIND(2 AS ?unmatchScore)

								### compute distance value between this and participant agents
								### Gender preference
								BIND(IF(LCASE(?thisGenderPref) = "dont mind" || LCASE(?thisGenderPref) = "don't mind" || (LCASE(?thisGenderPref) = "same" && ?thisGender = ?participantGender) || (LCASE(?thisGenderPref) = "mixed" && ?thisGender != ?participantGender), ?matchScore, ?unmatchScore) AS ?genderDistance)

								### Nationality preference
								BIND(IF(LCASE(?thisNationPref) = "dont mind" || LCASE(?thisNationPref) = "don't mind" || (LCASE(?thisNationPref) = "same" && ?thisNation = ?participantNation) || (LCASE(?thisNationPref) = "mixed" && ?thisNation != ?participantNation), ?matchScore, ?unmatchScore) AS ?nationDistance)


								### total distance
								BIND((?genderDistance + ?nationDistance) AS ?totalDistance)

							} GROUP BY ?macInstance ?participantId  ?totalDistance ?thisAgentId ?macId
						}
					} GROUP BY ?macInstance ?participantId ?thisAgentId ?macId
				}
				BIND(BNODE() AS ?distanceScoreIri)
			}
			"""^^xsd:string ;
	] .



:ComputeClusteringReciprocalSimilarities
	a bt:Write ;
	rdfs:label "Write: Compute CHC Reciprocal Similarities" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
			CONSTRUCT  {
					?agent	rdf:type	ajan:Agent ;
							welcome:isRunningCHC ?chcId ;
							ajan:agentId	?dAgentId.

					?bnode	rdf:type	welcome:CHCUseCase;
							mac:hasId		?chcId;
							mac:hasNumberOfAgents	?numOfAgents;
							mac:hasParticipants		?pAgentId ;
							welcome:hasAgeWeight ?ageWeight;
							welcome:hasGenderWeight ?genWeight;
							welcome:hasFamilyWeight	?famWeight;
							welcome:hasNationalityWeight	?natWeight;
							welcome:hasReligionWeight	?relWeight;
							welcome:hasEthnicityWeight	?ethWeight;
							welcome:hasLocationWeight	?locWeight;
							welcome:hasAccessibilityWeight	?accWeight;
							welcome:hasRentPeriodWeight	?rentWeight;
							welcome:hasShareWithWeight	?shareWeight.

					?rrsBnode	rdf:type	welcome:CHCReciprocalScore ;
								mac:hasSubjectAgent ?pAgentId ;
								mac:hasObjectAgent ?pAgentId2 ;
								mac:isComputedForProblemId  ?chcId ;
								ajan:hasReciprocalScore	?bReciprocalScore .
					}
			WHERE {
					?agent	rdf:type	ajan:Agent ;
							welcome:isRunningCHC ?chcId ;
							ajan:agentId	?dAgentId.

					?bnode	rdf:type	welcome:CHCUseCase;
							mac:hasId		?chcId;
							mac:hasNumberOfAgents	?numOfAgents;
							mac:hasParticipants		?pAgentId, ?pAgentId2 ;
							welcome:hasAgeWeight ?ageWeight;
							welcome:hasGenderWeight ?genWeight;
							welcome:hasFamilyWeight	?famWeight;
							welcome:hasNationalityWeight	?natWeight;
							welcome:hasReligionWeight	?relWeight;
							welcome:hasEthnicityWeight	?ethWeight;
							welcome:hasLocationWeight	?locWeight;
							welcome:hasAccessibilityWeight	?accWeight;
							welcome:hasRentPeriodWeight	?rentWeight;
							welcome:hasShareWithWeight	?shareWeight.

					FILTER(?pAgentId!=?pAgentId2)

					?smlBnode	rdf:type	welcome:CHCSimilarityValue ;
								mac:hasSubjectAgent ?pAgentId ;
								mac:hasObjectAgent ?pAgentId2 ;
								mac:isComputedForProblemId  ?chcId ;
								mac:hasSimilarityScore ?smlValue .

					?smlBnode2	rdf:type	welcome:CHCSimilarityValue ;
								mac:hasSubjectAgent ?pAgentId2 ;
								mac:hasObjectAgent ?pAgentId ;
								mac:isComputedForProblemId  ?chcId ;
								mac:hasSimilarityScore ?smlValue2 .
					FILTER(?smlBnode != ?smlBnode2)

					BIND(0 AS ?reciprocalScore) .
                    BIND(IF(?smlValue > 0 && ?smlValue2 > 0, 2/((1/?smlValue)+(1/?smlValue2)), ?reciprocalScore) AS ?bReciprocalScore) .
					BIND(BNODE() AS ?rrsBnode) .

				} """^^xsd:string ;
	] .

:ProduceSolveClusteringEvent
	a bt:EventProducer ;
	rdfs:label "Produce Solve Clustering Event" ;
	ajan:event agents:SolveClusteringEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {	
						?macInstance 	rdf:type 	mac:MACProblemInstance ;
										mac:hasStatus 	?macStatus ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
										mac:hasParticipants 	?participantId ;
										mac:hasId 	?macId ;
										mac:hasUseCase 	?useCase ;
										mac:hasStartTime 	?startTime ;
										mac:hasCannotLinkConnections 	?cannotConnection ;
										mac:hasMustLinkConnections 	?mustConnection ;
										mac:hasConversation 	?conversation ;
										mac:hasMinPoints    ?minPoints ;
										mac:hasMinClusterSize   ?minClSize . 
						?conversation 	?pred 	?obj .

						?cannotConnection 	?clPred 	?clObj .
						?mustConnection 	?mlPred 	?mlObj .
					}
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance ;
										mac:hasStatus 	?macStatus ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
										mac:hasParticipants 	?participantId ;
										mac:hasId 	?macId ;
										mac:hasUseCase 	?useCase ;
										mac:hasStartTime 	?startTime ;
										mac:hasConversation 	?conversation .
						?conversation 	?pred 	?obj .

						OPTIONAL{
							?macInstance 	mac:hasCannotLinkConnections 	?cannotConnection .
							?cannotConnection 	?clPred 	?clObj .
						}
						OPTIONAL{
							?macInstance 	mac:hasMustLinkConnections 	?mustConnection .
							?mustConnection 	?mlPred 	?mlObj .
						}
						#OPTIONAL {
							?macInstance 	mac:hasMinPoints    ?minPoints ;
											mac:hasMinClusterSize   ?minClSize . 
						#}
					}"""^^xsd:string ;
				] .


:ProduceCollectClusteringDistancesEvent
	a bt:EventProducer ;
	rdfs:label "Produce Collect Clustering Similarities Event" ;
	ajan:event agents:CollectClusteringDistancesEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?macInstance	rdf:type	mac:MACProblemInstance ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?id ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasQuorum 	?quorum .

						?macInstance 	?predicate 	?object .
						?macInstance 	mac:hasMinPoints    ?minPoints ;
										mac:hasMinClusterSize   ?minClSize .
					}
					WHERE {
						?macInstance	rdf:type	mac:MACProblemInstance ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?id ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasQuorum 	?quorum .
						OPTIONAL {		
							?macInstance 	?predicate 	?object .
						}
						#OPTIONAL {
							?macInstance 	mac:hasMinPoints    ?minPoints ;
									        mac:hasMinClusterSize   ?minClSize .
						#}
					}"""^^xsd:string ;
				] .


# ---------- Clustering Coordination Protocol BT Nodes ------------

# -----------CSGP Coordination Protocol BTs ------------------
:SendCsgpCoordRequestTempBt
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Send CSGP Coord. Request Temp. BT" ;
	bt:hasChild [
			a bt:UntilFail ;
			bt:hasChild [
				a bt:Priority ;
				bt:hasChildren (
					[
						a bt:Sequence ;
						bt:hasChildren (
							:HandleStartCsgpCoordRequestEvent
							#:WriteEverythingToLSR
# !!! Important !!!
# Coordination request (MACProblemInstance) will be kept in the Execution Knowledge of specific Coordination BTs. This MACProblemInstance will be updated with executed Conversations and their statuses accordingly and then the MACProblemInstance will br written to Agent Knowledge with WRITE node since this node replace the triples in Agent Knowledge if they already exist. By doing so, there will be no need to identify the correct MACProblemInstane in Agent Knowledge to be able to update it. 
#   							
							:MakeMacProblemUnique   
							:SetMacProblemRunning
							:SaveMacProblem 	# same instance of mac is ued thgroughaout the whole coordination bts. And whenever this node is called, it overrides the data in akb. so  it is enough to update mac problem in ekb and then save the current version to akb. 
							:WriteThisAgentIdToEKB
							:LOGStartedCoordination
							:WriteParticipantAddressesToEKB
							:GenerateNewConvInstance
							:InsertAgentProfileInfoCapability
							:InsertMacProblemInfoToConversation
							:MessageToParticipants # request personal info
							:LOGSentProfileInfoRequestToParticipants
							#:LOGCurrentEkb
							[
								a bt:UntilSuccess ;
								bt:hasChild [
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:GetResponses
												[
													a bt:Priority ;
													bt:hasChildren (
														[
															a bt:Invert ;
															bt:hasChild 
																:NotificationNecessary
														]
														:AgreementsReached
													)
												]
												:QuorumReached
												:SetQuorumReached
											)	
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
												:TimeoutReached
												:SetTimeoutReached
											)
										]
									)
								]
							]
							#:LOGCurrentEkb
							:AddConversationToMacProblem  # add the executed conversation (with status) to the mac problem in execution knowledge
							# Following condition can be used if users want to add custom behavior based on Quorum or Timeout reached
							[
								a bt:Priority ;
								bt:hasChildren (
									[
										a bt:Sequence ;
										bt:hasChildren (
											:IsQuorumReached
											:LOGQuorumReached # conversation, quorum reached
										)
									]
									[
										a bt:Sequence ;
										bt:hasChildren (
											:LOGTimeoutReached #conversation, timeout reached
											:JustFail  # if timeout reached, then don't continue, BREAK 
										)
									]
								)
							]
							:SaveMacProblem  # save the mac problem with an added conversation to agent knowledge
							:ProduceComputeCoalitionsEvent # must send required triples
							:ClearEKB
						)
					]
					[
						a bt:Sequence ;
						bt:hasChildren (
							:ClearEKB
							:JustFail
						)
					]
				)
			]
	] .



:HandleAgentProfileInfoRequestTempBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Handle Agent Profile Info Request Temp. BT" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren (
						:HandleReceiveAgentProfileInfoRequestEvent  # handle event to return agent profile info
						:WriteThisAgentIdToEKB
						#:Wait3Sec 
						:LOGReceivedAgentProfileInfoRequest						
						:InsertAgreedToRequest  # agree or refuse can be decided based on some use case dependent conditions if necessary 
						:InsertDefaultResponseCapability # insert default capability of initiator to receive response from participants
						:WriteParticipantAddressesToEKB
						[
							a bt:Invert ;
							bt:hasChild 
								:TimeoutReached
						]
						[
							a bt:Priority ;
							bt:hasChildren (
								[
									a bt:Invert ;
									bt:hasChild 
										:NotificationNecessary
								]
								[
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:AgreedToPerformRequest
												:AgreedMessageToInitiator
												:LOGAgreedToRequest
											)
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
												:RefusedMessageToInitiator
												:LOGRefusedRequest
											)
										]
									)
								]
							)
						]
						#:Wait3Sec
						:WriteAgentProfileInfo
					#	:RemoveConversationContent
					#	:ClearLSR
						#:WriteEverythingToLSR
					#	:InsertAgentProfileInfo # insert required info as message content
						:AddAgentProfileInfoToConv
						:InsertInitiatorAsReceiver
						[
							a bt:Priority ;
							bt:hasChildren (
								:TimeoutReached
								[
									a bt:Sequence ;
									bt:hasChildren (
										:SendResultMessage
										:LOGResultOfRequest
									)
								]
							)
						]
						:ClearEKB
					)
				]
				[
					a bt:Sequence ;
					bt:hasChildren (
						:ClearEKB
						:JustFail
					)
				]
			)
		]
	].


:ComputeCsgpCoalitionsTemplBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Compute CSGP Coalitions Templ. BT" ;
	bt:hasChild [
			a bt:UntilFail ;
			bt:hasChild [
				a bt:Priority ;
				bt:hasChildren (
					[
						a bt:Sequence ;
						bt:hasChildren (
							:HandleComputeCsgpCoalitionsEvent 
							:WriteThisAgentIdToEKB
							:LOGStartedComputeCoalitions
							:WriteAgentProfileInfo
							:CreateThisAgentProfileInstance
							:WriteAgentProfilesToEKB # pay attention to conversation ID 
							#:WriteEverythingToLSR
							[
								a bt:Priority ;
								bt:hasChildren (
									[
										a bt:Invert ;
										bt:hasChild 
											:UnnecessaryAgentProfileExists	# since Update node fails when there is no result, it must be checked if there is any data to be updated beforehand. 
									]
									:RemoveUnnecessaryAgentProfiles # removes agent profiles which are unrelated to this mac problem instance
								)
							]
#							:ConditionId
#							:ConditionParticipants
#							:ConditionNumberOfAgents
#							:ConditionCoalitions
							#:WriteEverythingToAKB
							:ComputeCannotLinks  	#a write node is used instead of update since update node fails if the query returns no triple. But it is possible that sometimes Where clause returns nothing because simply there is no cannot link. But write node doesn't faild when the query returns empty. 
							:GenerateCoalitions
							:ComputeCoalitionInfo  # coalition info is computed such that it is easier to compute utility values
							:SetCoalitionAttributes
							#:WriteEverythingToAKB
							#:JustFail
							:WriteParticipantAddressesToEKB
							:SaveMacProblem
							:GenerateNewConvInstance
							:InsertCsgpUtilitiesCapability # insert participant capability to request utilities  
							#:WriteEverythingToAKB
							:AddProfileInfoAndCoalitions
							:MessageToParticipants # sending "Return Utilities" request and attaching Profile Info of Participants
							:LOGSentUtilitiesRequestToParticipants
							[
								a bt:UntilSuccess ;
								bt:hasChild [
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:GetResponses
												[
													a bt:Priority ;
													bt:hasChildren (
														[
															a bt:Invert ;
															bt:hasChild 
																:NotificationNecessary
														]
														:AgreementsReached
													)
												]
												:QuorumReached
												:SetQuorumReached
											)	
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
												:TimeoutReached
												:SetTimeoutReached
											)
										]
									)
								]
							]
							# Following node can be used if users want to add custom behavior based on Quorum or Timeout reached
							:AddConversationToMacProblem
							[
								a bt:Priority ;
								bt:hasChildren (
									[
										a bt:Sequence ;
										bt:hasChildren (
											:IsQuorumReached
											:LOGQuorumReached # conversation, quorum reached
										)
									]
									[
										a bt:Sequence ;
										bt:hasChildren (
											:LOGTimeoutReached #conversation, timeout reached
											:JustFail  # if timeout reached, then don't continue, BREAK 
										)
									]
								)
							]
							:SaveMacProblem
							:GetAgentPreferences # write preferences to EKB 
							:ComputeCsgpUtilityValues # compute utility values of this agent
							#:WriteEverythingToAKB
							:ComputeCoalitionValues # compute coalition values in AKB by using all utility values
							:ConditionId
							:ConditionParticipants
							:ConditionNumberOfAgents
							:ConditionCoalitions
							:ProduceSolveCsgpEvent
							:ClearEKB
						)
					]						
					[
						a bt:Sequence ;
						bt:hasChildren (
							:ClearEKB
							:JustFail
						)
					]
				)
			]
	] .

:HandleCsgpUtilitiesRequestTemplBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Handle Csgp Utilities Request Templ. BT" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren (
						:HandleCsgpUtilitiesRequestEvent  
						:WriteThisAgentIdToEKB
						:LOGReceivedUtilitiesRequest 						
						:SaveMacProblem
						#:WriteEverythingToLSR
						:InsertAgreedToRequest  # agree or refuse can be decided based on some use case dependent conditions if necessary 
						:InsertDefaultResponseCapability # insert default capability of initiator to receive response from participants
						:WriteParticipantAddressesToEKB
						[
							a bt:Invert ;
							bt:hasChild 
								:TimeoutReached
						]
						[
							a bt:Priority ;
							bt:hasChildren (
								[
									a bt:Invert ;
									bt:hasChild 
										:NotificationNecessary
								]
								[
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:AgreedToPerformRequest
												:AgreedMessageToInitiator
												:LOGAgreedToRequest
											)
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
												:RefusedMessageToInitiator
												:LOGRefusedRequest
											)
										]
									)
								]
							)
						]
						:GetAgentPreferences # write preferences to Ex Knowledge. FYI: profile info of other agents are send by Dedicated agent and already exists in EKB. 
						#:WriteSomethingToLSR
						#:ClearLSR
						#:WriteEverythingToLSR
						:ComputeCsgpUtilityValues # compute utility values of this agent
						#:WriteEverythingToAKB
						:RemoveConversationContent
						#:InsertUtilities  # THIS IS AN UPDATE NODE WHICH DOESN'T WORK FOR SOME REASON. EXPLANATION BELOW:
						:WriteUtilities # INSTEAD OF USING AN UPDATE NODE, I MUST USE A WRITE NODE. FOR SOME REASON, UPDATE NODE DOESN'T WORK. IN ORDER TO FIND OUT WHY, I WROTE EVERYTHING FROM EKB TO AKB AND TRIED TO RUN THE UPDATE NODE MANUALLY IN RDF4J REPOSITORY->QUERY. UNFORTUNATELY, THE QUERY WORKED THERE. THUS, I COULDN'T FIND THE PROBLEM. TO OVERCOME THIS ISSUE, I USED A WRITE TO TO WRITE FROM EKB TO EKB. THIS NODE/QUERY WORKS CORRECTLY.  
						:InsertInitiatorAsReceiver
						[
							a bt:Priority ;
							bt:hasChildren (
								:TimeoutReached
								[
									a bt:Sequence ;
									bt:hasChildren (
										:SendResultMessage
										:LOGResultOfRequest
									)
								]	
							)
						]
						:ClearEKB
					)
				]
				[
					a bt:Sequence ;
					bt:hasChildren (
						:ClearEKB
						:JustFail
					)
				]
			)
		]
	].



:SolveCsgpTemplBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Solve CSGP Template BT" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
					a bt:Priority ;
					bt:hasChildren (
						[
							a bt:Sequence ;
							bt:hasChildren (
								:HandleSolveCsgpEvent # mac problem instance with id 
								[
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:InsertBossAsSolverToMacProblem
												:WriteThisAgentIdToEKB
												:LOGSolveCsgp 
												:WriteRunningMacCoalitionValuesToEKB		# write the coalitions which have value and which belong to a mac that is running.  
												:CurrentMacExists 	# checks if there is a mac problem instance to be passed to boss node
												:SolveCsgpWithBoss 	# solve CSGP by using BOSS algorithm via BOSS node
												:NormalizeCsgpCsValues 	# in case CS values are negative, it is possible to normalize them since CS value represents social welfare and it should be positive
												:SetMacProblemCompleted
												:LOGCsgpSolved
												#:SaveMacProblem
												#:WriteEverythingToLSR
												#:ProduceFinalizeCsgpCoordinationEvent
												:ProduceFinalizeCoordinatonEvent
												:ClearEKB
											)
										]
										:SetMacProblemFailed
										:ProduceFinalizeCoordinatonEvent
										:ClearEKB	
									)
								]
							)
						]
						[
							a bt:Sequence ;
							bt:hasChildren (
								:ClearEKB
								:JustFail
							)
						]
					)
					]
				] .


:FinalizeCsgpCoordinationBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Finalize CSGP Coordination BT" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
				a bt:Priority ;
				bt:hasChildren (
						[
							a bt:Sequence ;
							bt:hasChildren (
								:HandleCsgpFinalizeEvent  
								[
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
						#						:ClearLSR
						#						:WriteEverythingToLSR
												:ComputeCoordinationRuntime 	# computes the runtime of coord process  
												:SaveMacProblem
												:InsertDefaultResponseCapability  	
												:WriteThisAgentIdToEKB			 
												:WriteParticipantAddressesToEKB
												:InsertParticipantsAsReceivers
												#:WriteEverythingToLSR
												:InsertCoordinationResult # attach mac problem
												#:RemoveUnnecessaryDataFromConversationContent 	#coalitions, currentmac
												#:WriteEverythingToLSR
											#	:ClearLSR
											#	:WriteEverythingToLSR
												[
													a bt:Priority ;
													bt:hasChildren (
														:SendResultMessage 	# It is optional here to inform participants about the result of coordination. I.e. if something happens and not all participants are not informed, then coordination doesn't fail. But by removing this Priority branch, it can be made mandatory to broadcast the result to participants. 
														:SimpleSuccess
													)
												]
												:ClearEKB
											)
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
												:SetMacProblemFailed
												:SaveMacProblem
												:ClearEKB
											)
										]
									)
								]
						)
						]
						[
							a bt:Sequence ;
							bt:hasChildren (
								:ClearEKB
								:JustFail
							)
						]
				)
		]
	] .

:ProduceComputeCoalitionsEvent
	a bt:EventProducer ;
	rdfs:label "Produce Compute Coalitions Event" ;
	ajan:event agents:ComputeCsgpCoalitionsEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?macInstance	rdf:type	mac:MACProblemInstance ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?id ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasQuorum 	?quorum .

						?macInstance 	?predicate 	?object .

					}
					WHERE {
						?macInstance	rdf:type	mac:MACProblemInstance ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?id ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasQuorum 	?quorum .
							OPTIONAL {		
								?macInstance 	?predicate 	?object .
							}
					}"""^^xsd:string ;
				] .

:ProduceFinalizeCsgpCoordinationEvent
	a bt:EventProducer ;
	rdfs:label "Produce Finalize CSGP Event" ;
	ajan:event agents:FinalizeCsgpCoordinationEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasStartTime 	?startTime ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?macId ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
									#	mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasConversation 	?conversation .

						?conversation 	rdf:type 	mac:Conversation ;
										mac:hasMacProblemId 	?macId ;
										mac:hasId	?convId ;
										?convPred 	?convObj .

						?macInstance 	mac:hasSolution 	?grouping .
						?grouping 	mac:hasMembers 	?group ;
									?solutionPred 	?solutionObj .

						?group 	mac:hasMembers 	?memberAgentId ;
								?groupPred 	?groupObj .

					}
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasStartTime 	?startTime ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?macId ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
									#	mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasConversation 	?conversation .

						?conversation 	rdf:type 	mac:Conversation ;
										mac:hasMacProblemId 	?macId ;
										mac:hasId	?convId ;
										?convPred 	?convObj .

						OPTIONAL{
							?macInstance 	mac:hasSolution 	?grouping .
							?grouping 	mac:hasMembers 	?group ;
										?solutionPred 	?solutionObj .
						}
						OPTIONAL {
							?group 	mac:hasMembers 	?memberAgentId ;
									?groupPred 	?groupObj .
						}
					}"""^^xsd:string ;
				] .

:ProduceSolveCsgpEvent
	a bt:EventProducer ;
	rdfs:label "Produce Solve CSGP Event" ;
	ajan:event agents:SolveCsgpEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?macInstance	rdf:type	mac:MACProblemInstance ;
										mac:hasConversation 	?conversation ;
										mac:hasFeasibleCoalitions 	?feasibleCoalition ;
										?predicate 	?object .
						?conversation 	?convPred 	?convObj .
						?feasibleCoalition 	?coalPred 	?coalObj .

					}
					WHERE {
						?macInstance	rdf:type	mac:MACProblemInstance ;
										mac:hasConversation 	?conversation ;
										mac:hasFeasibleCoalitions 	?feasibleCoalition ;
										?predicate 	?object .
						?conversation 	?convPred 	?convObj .
						?feasibleCoalition 	?coalPred 	?coalObj .

					}"""^^xsd:string ;
				] .

# -----------CSGP Coordination Protocol BTs ------------------


# ---------- templ bts without goals



:SendCoordRequestTempBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Send Coord. Request Temp. BT" ;
	bt:hasChild [
			a bt:UntilFail ;
			bt:hasChild [
				a bt:Priority ;
				bt:hasChildren (
					[
						a bt:Sequence ;
						bt:hasChildren (
							:HandleStartCoordRequestEvent
							:MakeMacProblemUnique   
							:SetMacProblemRunning
							:SaveMacProblem 	 
							:WriteThisAgentIdToEKB
							:LOGStartedCoordination # activity-mac problem: id, participants, notifnec, timeout, quorum, id
							:WriteParticipantAddressesToEKB
							:GenerateNewConvInstance
							:InsertHandleRequestCapability
							:InsertMacProblemInfoToConversation
							#:WriteEverythingToLSR
							:MessageToParticipants
							:LOGSentRequestToParticipants # content: conversation, participants, content
							[
								a bt:UntilSuccess ;
								bt:hasChild [
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:GetResponses
												[
													a bt:Priority ;
													bt:hasChildren (
														[
															a bt:Invert ;
															bt:hasChild 
																:NotificationNecessary
														]
														:AgreementsReached
													)
												]
												:QuorumReached
												:SetQuorumReached
											)	
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
												:TimeoutReached
												:SetTimeoutReached
											)
										]
									)
								]
							]
							:AddConversationToMacProblem  # add the executed conversation (with status) to the mac problem in execution knowledge
							# Following node can be used if users want to add custom behavior based on Quorum or Timeout reached
							[
								a bt:Priority ;
								bt:hasChildren (
									[
										a bt:Sequence ;
										bt:hasChildren (
											:IsQuorumReached
											:LOGQuorumReached # conversation, quorum reached
										)
									]
									[
										a bt:Sequence ;
										bt:hasChildren (
											:LOGTimeoutReached #conversation, timeout reached
											:JustFail  # if timeout reached, then don't continue, BREAK 
										)
									]
								)
							]
							:SetMacProblemCompleted
							:SaveMacProblem  # save the mac problem with an added conversation to agent knowledge
							:ClearEKB
						)
					]
					[
						a bt:Sequence ;
						bt:hasChildren (
							:ClearEKB
							:JustFail
						)
					]
				)
			]
	] .


:HandleCoordRequestTempBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Handle Coord. Request Templ. BT" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren (
						:HandleReceiveCoordRequestEvent
						:WriteThisAgentIdToEKB
						#:WriteEverythingToLSR
						:LOGReceivedCoordinationRequest # conversation, 
						:Wait3Sec
						:InsertAgreedToRequest
						:InsertDefaultResponseCapability
						:WriteParticipantAddressesToEKB
						[
							a bt:Invert ;
							bt:hasChild 
								:TimeoutReached
						]
						[
							a bt:Priority ;
							bt:hasChildren (
								[
									a bt:Invert ;
									bt:hasChild 
										:NotificationNecessary
								]
								[
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:AgreedToPerformRequest
												:AgreedMessageToInitiator
												:LOGAgreedToRequest
											)
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
												:RefusedMessageToInitiator
												:LOGRefusedRequest
											)
										]
									)
								]
							)
						]
						:Wait3Sec
						:InsertRequestResult
						:InsertInitiatorAsReceiver
						[
							a bt:Priority ;
							bt:hasChildren (
								:TimeoutReached
								[
									a bt:Sequence ;
									bt:hasChildren (
										:SendResultMessage
										:LOGResultOfRequest
									)
								]
							)
						]
						:ClearEKB
					)
				]
				[
					a bt:Sequence ;
					bt:hasChildren (
						:ClearEKB
						:JustFail
					)
				]
			)
		]
	].



:ReceiveCoordRequestResponseTempBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Receive Coord. Request Response Temp. BT" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren (
						:HandleReceiveCoordResponseEvent
						:SaveResponse
						:WriteThisAgentIdToEKB
						#:ClearLSR
						#:WriteEverythingToLSR
						:LOGSavedRequestResponse
						:ClearEKB
					)
				]
				[
					a bt:Sequence ;
					bt:hasChildren (
						:ClearEKB
						:JustFail
					)
				]
			)
		]
	].

:HandleStartCsgpCoordRequestEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Start CSGP Coord. Request Event" ;
	bt:event agents:StartCsgpCoordRequestEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:HandleComputeCsgpCoalitionsEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Compute Csgp Coalitions Event" ;
	bt:event agents:ComputeCsgpCoalitionsEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?macInstance	rdf:type	mac:MACProblemInstance ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?id ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasQuorum 	?quorum .
						?macInstance 	?predicate 	?object .
					}
					WHERE {
						?macInstance	rdf:type	mac:MACProblemInstance ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?id ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasQuorum 	?quorum .
						OPTIONAL {		
							?macInstance 	?predicate 	?object .
						}

					}"""^^xsd:string ;
				] .

:HandleCsgpUtilitiesRequestEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Csgp Utilities Request Event" ;
	bt:event agents:CsgpUtilitiesRequestEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:HandleSolveClusteringEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Solve Clustering Event" ;
	bt:event agents:SolveCsgpEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
										mac:hasParticipants 	?participantId ;
										mac:hasId 	?macId ;
										mac:hasStartTime 	?startTime ;
										mac:hasCannotLinkConnections 	?cannotConnection ;
										mac:hasMustLinkConnections 		?mustConnection ;
										mac:hasMinPoints    ?minPoints ;
										mac:hasMinClusterSize   ?minClSize ;
										mac:hasUseCase 	?useCase ;
										mac:hasStatus 	?macStatus ;
										mac:hasConversation 	?conversation .
						?conversation 	?pred 	?obj .
						?cannotConnection 	?clPred 	?clObj .
						?mustConnection 	?mlPred 	?mlObj .
					}
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance ;
										mac:hasUseCase 	?useCase ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
										mac:hasParticipants 	?participantId ;
										mac:hasId 	?macId ;
										mac:hasStartTime 	?startTime ;
										mac:hasStatus 	?macStatus ;
										mac:hasConversation 	?conversation .
						?conversation 	?pred 	?obj .

						OPTIONAL{
							?macInstance 	mac:hasCannotLinkConnections 	?cannotConnection .
							?cannotConnection 	?clPred 	?clObj .
						}
						OPTIONAL{
							?macInstance 	mac:hasMustLinkConnections 	?mustConnection .
							?mustConnection 	?mlPred 	?mlObj .
						}
						#OPTIONAL {
							?macInstance 	mac:hasMinPoints    ?minPoints ;
											mac:hasMinClusterSize   ?minClSize . 
						#}
					}"""^^xsd:string ;
				] .





:HandleFinalizeCoordinationEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Finalize Coordination Event" ;
	bt:event agents:FinalizeCoordinationEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasStartTime 	?startTime ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?macId ;
										mac:hasUseCase 	?useCase ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
										mac:hasParticipants 	?participantId ;
										mac:hasConversation 	?conversation ;
										mac:hasSolver 	?solver ;
										mac:hasSolution 	?grouping .

						?conversation 	rdf:type 	mac:Conversation ;
										mac:hasMacProblemId 	?macId ;
										mac:hasId	?convId ;
										?convPred 	?convObj .

						?grouping 	?solutionPred 	?solutionObj ;
									mac:hasMembers 	?group .
						?group 	?groupPred 	?groupObj .
					}
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasStartTime 	?startTime ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?macId ;
										mac:hasUseCase 	?useCase ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
										mac:hasParticipants 	?participantId ;
										mac:hasConversation 	?conversation .

						?conversation 	rdf:type 	mac:Conversation ;
										mac:hasMacProblemId 	?macId ;
										mac:hasId	?convId ;
										?convPred 	?convObj .
						OPTIONAL {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasId 	?macId ;
										mac:hasSolver ?solver .

						}
						OPTIONAL{
							?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
											mac:hasSolution 	?grouping .
							?grouping 	?solutionPred 	?solutionObj ;
										mac:hasMembers 	?group .
							?group 	?groupPred 	?groupObj .
						}
					}
					"""^^xsd:string ;
				] .

:ProduceFinalizeCoordinatonEvent
	a bt:EventProducer ;
	rdfs:label "Produce Finalize Coordination Event" ;
	ajan:event agents:FinalizeCoordinationEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasStartTime 	?startTime ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?macId ;
										mac:hasUseCase 	?useCase ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
										mac:hasParticipants 	?participantId ;
										mac:hasConversation 	?conversation ;
										mac:hasSolver 	?solver ;
										mac:hasSolution 	?grouping .

						?conversation 	rdf:type 	mac:Conversation ;
										mac:hasMacProblemId 	?macId ;
										mac:hasId	?convId ;
										?convPred 	?convObj .

						?grouping 	?solutionPred 	?solutionObj ;
									mac:hasMembers 	?group .
						?group 	?groupPred 	?groupObj .
					}
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasStartTime 	?startTime ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?macId ;
										mac:hasUseCase 	?useCase ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
										mac:hasParticipants 	?participantId ;
										mac:hasConversation 	?conversation .

						?conversation 	rdf:type 	mac:Conversation ;
										mac:hasMacProblemId 	?macId ;
										mac:hasId	?convId ;
										?convPred 	?convObj .
						OPTIONAL {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasId 	?macId ;
										mac:hasSolver ?solver .

						}
						OPTIONAL{
							?macInstance 	mac:hasSolution 	?grouping .
							?grouping 	?solutionPred 	?solutionObj ;
										mac:hasMembers 	?group .
							?group 	?groupPred 	?groupObj .
						}
					}"""^^xsd:string ;
				] .


:HandleSolveCsgpEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Solve Csgp Event" ;
	bt:event agents:SolveCsgpEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
										mac:hasParticipants 	?participantId ;
										mac:hasId 	?macId ;
										mac:hasUseCase 	?useCase ;
										mac:hasStartTime 	?startTime ;
										mac:hasFeasibleCoalitions 	?feasibleCoalition ;
										mac:hasConversation 	?conversation .
						?conversation 	?pred 	?obj .
						?feasibleCoalition 	?coalPred 	?coalObj .
					}
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance ;
										mac:hasUseCase 	?useCase ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
										mac:hasParticipants 	?participantId ;
										mac:hasId 	?macId ;
										mac:hasFeasibleCoalitions 	?feasibleCoalition ;
										mac:hasStartTime 	?startTime ;
										mac:hasConversation 	?conversation .
						?conversation 	?pred 	?obj .
						?feasibleCoalition 	?coalPred 	?coalObj .
						
					}"""^^xsd:string ;
				] .

:HandleCsgpFinalizeEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Finalize Csgp Event" ;
	bt:event agents:FinalizeCsgpCoordinationEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasStartTime 	?startTime ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?macId ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
									#	mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasConversation 	?conversation .

						?conversation 	rdf:type 	mac:Conversation ;
										mac:hasMacProblemId 	?macId ;
										mac:hasId	?convId ;
										?convPred 	?convObj .

						?macInstance 	mac:hasSolution 	?grouping .
						?grouping 	mac:hasMembers 	?group ;
									?solutionPred 	?solutionObj .

						?group 	mac:hasMembers 	?memberAgentId ;
								?groupPred 	?groupObj .

					}
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasStartTime 	?startTime ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?macId ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
									#	mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasConversation 	?conversation .

						?conversation 	rdf:type 	mac:Conversation ;
										mac:hasMacProblemId 	?macId ;
										mac:hasId	?convId ;
										?convPred 	?convObj .

						OPTIONAL{
							?macInstance 	mac:hasSolution 	?grouping .
							?grouping 	mac:hasMembers 	?group ;
										?solutionPred 	?solutionObj .
						}
						OPTIONAL {
							?group 	mac:hasMembers 	?memberAgentId ;
									?groupPred 	?groupObj .
						}
					}"""^^xsd:string ;
				] .

:HandleReceiveAgentProfileInfoRequestEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Receive Agent Profile Info Request Event" ;
	bt:event agents:AgentProfileInfoRequestEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .


:HandleStartCoordRequestEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Start Coord. Request Event" ;
	bt:event agents:SendCoordRequestEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:HandleReceiveCoordRequestEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Receive Coord. Request Event" ;
	bt:event agents:HandleCoordRequestEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:HandleReceiveCoordResponseEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Receive Coord. Request Response Event" ;
	bt:event agents:ReceiveCoordRequestResponseEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .


# ---------- templ bts without goals






:TempStartCsgpCoordinationBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Template BT 2 Start CSGP-solver Coordination" ;
	bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
				a bt:Sequence ;
				bt:hasChildren (
						:HandleStartCsgpCoordEvent
						:ProduceRequestPrsInfoGoal
						:ClearEKB
							)
				]
				[
					a bt:Sequence ;
					bt:hasChildren (
						:ClearEKB
						:JustFail
					)
				]
				)
				] .




:TempHandlePrsInfoRequestBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Template BT 2 Handle Personal Info Request" ;
	bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
				a bt:Sequence ;
				bt:hasChildren (
						:HandlePrsInfoRequestEvent
						:ProduceHandlePrsInfoRequestGoal
						:Wait3Sec
						:QueryPrsInfo
						#:WriteThisAgentIdToEKB
						:ProduceSendPrsInfoGoal
						:ClearEKB
							)
				]
				[
					a bt:Invert ;
					bt:hasChild 
						:ClearEKB
				]
				)
				 ].



:TempStartCoordinationBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Template Start Coordination Behavior Tree" ;
	bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
				a bt:Sequence ;
				bt:hasChildren (
						:HandleStartCoordEvent
						:ProduceInitiatorSendRequestGoal
						:ClearEKB
							)
				]
				[
					a bt:Invert ;
					bt:hasChild 
						:ClearEKB
				]
				)
				] .


:TempReceiveRequestBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Template Receive Request Behavior Tree" ;
	bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
				a bt:Sequence ;
				bt:hasChildren (
						:HandleReceiveRequestEvent
						:ProducePartHandleRequestGoal
						:Wait3Sec
						:ProducePartSendResultGoal
						:ClearEKB
							)
				]
				[
					a bt:Invert ;
					bt:hasChild 
						:ClearEKB
				]
				)
				 ].



:TempReceiveParticipantReplyBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Template Behavior Tree to receive participant reply" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren (
						#[
						#	a bt:UntilFail ;
						#	bt:hasChild [
						#			a bt:Sequence ;
						#			bt:hasChildren (
						#					:InitiatorReceiveReplyGoalRunning
						#			)							
						#	]
						#]
						#:SetInitiatorReceiveReplyGoalRunning
						:HandleReceiveResponseEvent
						#:SaveResponse
						#:SaveAllToAKB
						#:ProduceInitiatorReceiveReplyGoal
						#:SetInitiatorReceiveReplyGoalCompleted
						:ClearEKB
							)
				]
				[
					a bt:Sequence ;
					bt:hasChildren (
						:ClearEKB
						:JustFail
					)
				]
				[
					a bt:Sequence ;
					bt:hasChildren (
						:SetInitiatorReceiveReplyGoalCompleted
						:JustFail
					)
				]

				)
				]
	].


:RP_InitiatorSendRequestBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "RP-Initiator Send Request Behavior Tree" ;
	bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren (
						:HandleInitSendRequestGoal
						:WriteThisAgentIdToEKB
						:WriteParticipantAddressesToEKB
						:MessageToParticipants
						:SaveRequest
						[
							a bt:UntilSuccess ;
							bt:hasChild [
								a bt:Priority ;
								bt:hasChildren (
									[
										a bt:Sequence ;
										bt:hasChildren (
											:GetResponses
											[
												a bt:Priority ;
												bt:hasChildren (
													[
														a bt:Invert ;
														bt:hasChild 
															:NotificationNecessary
													]
													:AgreementsReached
												)
											]
											:QuorumReached
										)	
									]
									:TimeoutReached
								)
							]
						]
						:ClearEKB
					)
				]
				[
					a bt:Invert ;
					bt:hasChild 
						:ClearEKB
				]
		)
				
	] .

:RP_ParticipantHandleRequestBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "RP-Participant Handle Request Behavior Tree" ;
	bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren (
						:HandlePartRequestGoal
						:WriteThisAgentIdToEKB
						:WriteParticipantAddressesToEKB
						[
							a bt:Invert ;
							bt:hasChild 
								:TimeoutReached
						]
						[
							a bt:Priority ;
							bt:hasChildren (
								[
									a bt:Invert ;
									bt:hasChild 
										:NotificationNecessary
								]
								[
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:AgreedToPerformRequest
												:AgreedMessageToInitiator
											)
										]
										:RefusedMessageToInitiator
									)
								]
							)
						]
						:ClearEKB
					)
				]
				[
					a bt:Invert ;
					bt:hasChild 
						:ClearEKB
				]
		)
	] .

:RP_InitiatorReceiveReplyBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "RP-Initiator Receive Reply Behavior Tree" ;
	bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren (
						:HandleInitReceiveReplyGoal
						:SaveResponse
						:ClearEKB
							)
				]
				[
					a bt:Invert ;
					bt:hasChild 
						:ClearEKB
				]
			)
	] .

:RP_ParticipantSendResultBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "RP-Participant Send Result Behavior Tree" ;
	bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren ( 
						:HandlePartSendResultGoal
						[
							a bt:Priority ;
							bt:hasChildren (
								:TimeoutReached
								[
									a bt:Sequence ;
									bt:hasChildren (
										:WriteThisAgentIdToEKB
										:WriteParticipantAddressesToEKB
										:InsertInitiatorAsReceiver
										:SendResultMessage
									)
								]
							)
						]
						:ClearEKB
					)
				]
				[
					a bt:Invert ;
					bt:hasChild 
						:ClearEKB
				]
			)
	] .

:ProduceRequestPrsInfoGoal
	a bt:GoalProducer ;
	rdfs:label "Produce Goal to Request Personal Info" ;
	ajan:goal agents:InitiatorSendRequestGoal ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasParticipants	?participantId ;
									mac:hasConversationId	?conversationId ;
									mac:hasReceiverCapability	?capability ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasQuorum	?quorum ;
									mac:hasContent	?requestContent .

							?requestContent	?predicate	?object .						
						}
						WHERE {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasParticipants	?participantId ;
									mac:hasConversationId	?conversationId ;
									mac:hasReceiverCapability	?capability ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasQuorum	?quorum .


							OPTIONAL {
								?bnode	mac:hasContent	?requestContent . 
				
								?requestContent	?predicate	?object .
							}
						}"""^^xsd:string ;
				] .

:ProduceInitiatorSendRequestGoal
	a bt:GoalProducer ;
	rdfs:label "GoalProducer: Initiate Send Request Goal" ;
	ajan:goal agents:InitiatorSendRequestGoal ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasParticipants	?participantId ;
									mac:hasConversationId	?conversationId ;
									mac:hasReceiverCapability	?capability ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasQuorum	?quorum ;
									mac:hasContent	?requestContent .

							?requestContent	?predicate	?object .						}
						WHERE {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasParticipants	?participantId ;
									mac:hasConversationId	?conversationId ;
									mac:hasReceiverCapability	?capability ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasQuorum	?quorum ;
									mac:hasContent	?requestContent .

							?requestContent	?predicate	?object .
							#{
							#	BIND(BNODE() AS ?newBnode)
							#}

						}"""^^xsd:string ;
				] .

:ProduceInitiatorReceiveReplyGoal
	a bt:GoalProducer ;
	rdfs:label "GoalProducer: Initiator Receives Request Response Goal" ;
	ajan:goal agents:InitiatorReceiveReplyGoal ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .

:ProduceSendPrsInfoGoal
	a bt:GoalProducer ;
	rdfs:label "Produce Send Personal Info Request Goal" ;
	ajan:goal agents:ParticipantSendResultGoal ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>
	
						CONSTRUCT {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasInitiator	?initiatorId ;
									mac:hasConversationId	?conversationId ;
									mac:hasTimeout	?timeout ;
									mac:hasReceiverCapability	'participantResponse' ;
									mac:hasContent 	?bnode2 .

							?bnode2 	domain:hasGender 	?gender ;
										domain:hasNationality 	?nation ;
										domain:hasLanguage 	?lang .
						}
						WHERE {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasInitiator	?initiatorId ;
									mac:hasConversationId	?conversationId ;
									mac:hasTimeout	?timeout .
							
							?bnode2 	rdf:type 	domain:DomainUser ;
										domain:hasGender 	?gender ;
										domain:hasNationality 	?nation ;
										domain:hasLanguage 	?lang .

							#?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
							#			ajan:agentId	?thisAgentId .

						}"""^^xsd:string ;
				] .
							


:ProduceHandlePrsInfoRequestGoal
	a bt:GoalProducer ;
	rdfs:label "Produce Handle Personal Info Request Goal" ;
	ajan:goal agents:ParticipantHandleRequestGoal ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasInitiator	?initiatorId ;
									mac:hasConversationId	?conversationId ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasAgreement	'true' ;
									mac:hasReceiverCapability	'participantResponse' .
						}
						WHERE {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasInitiator	?initiatorId ;
									mac:hasConversationId	?conversationId ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout .


						}"""^^xsd:string ;
				] .


:ProducePartHandleRequestGoal
	a bt:GoalProducer ;
	rdfs:label "GoalProducer: Participant Handle Request Goal" ;
	ajan:goal agents:ParticipantHandleRequestGoal ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?s ?p ?o .

							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasAgreement	'true' ;
									mac:hasReceiverCapability	'participantResponse' .
						}
						WHERE {
							?s ?p ?o .
							?bnode	rdf:type	mac:RequestMessage .
						}"""^^xsd:string ;
				] .


:ProducePartSendResultGoal
	a bt:GoalProducer ;
	rdfs:label "GoalProducer: Participant Send Result Goal" ;
	ajan:goal agents:ParticipantSendResultGoal ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {

							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasInitiator	?initiatorId ;
									mac:hasConversationId	?conversationId ;
									mac:hasTimeout	?timeout ;
									mac:hasReceiverCapability	'participantResponse' ;
									mac:hasContent 	mac:DomainSpecificSubjectUri .

							mac:DomainSpecificSubjectUri 	rdf:type 	mac:ResponseContent ;
															ajan:hasLocation 	"DFKI" . 
						}
						WHERE {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasInitiator	?initiatorId ;
									mac:hasConversationId	?conversationId ;
									mac:hasTimeout	?timeout .
						}"""^^xsd:string ;
				] .

:Wait10Sec
	a bt:Wait ;
	rdfs:label "Wait 10 seconds" ;
	rdfs:comment "" ;
	bt:milliseconds "10000"^^xsd:int .

:Wait3Sec
	a bt:Wait ;
	rdfs:label "Wait 3 seconds" ;
	rdfs:comment "" ;
	bt:milliseconds "3000"^^xsd:int .

:HandleStartCsgpCoordEvent
	a bt:HandleEvent ;
	rdfs:label "Handle Start Csgp-solver Coordination event" ;
	bt:event agents:StartCsgpCoordEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:HandlePrsInfoRequestEvent
	a bt:HandleEvent ;
	rdfs:label "Handle Personal Info Request event" ;
	bt:event agents:HandlePrsInfoRequestEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .



:HandleStartCoordEvent
	a bt:HandleEvent ;
	rdfs:label "EventHandler: handle Start Coordination event" ;
	bt:event agents:StartCoordEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:HandleReceiveRequestEvent
	a bt:HandleEvent ;
	rdfs:label "EventHandler: handle Custom Receive Request event" ;
	bt:event agents:ReceiveRequestEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:InitiatorReceiveReplyGoalRunning
	a bt:Condition ;
	rdfs:label "Is Initiator Receive Reply Goal Running" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?bnode 	rdf:type ajan:InitiatorReceiveReplyGoal ;
								ajan:hasStatus "Running" .
						}"""^^xsd:string ;
		] .



:ConditionSPO
	a bt:Condition ;
	rdfs:label "Condition: just a condition" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?s ?p ?o .
						}"""^^xsd:string ;
		] .

:NotificationNecessary
	a bt:Condition ;
	rdfs:label "Is Notification Necessary?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?bnode	rdf:type	mac:Conversation ;
								mac:hasNotificationNecessary	'true' .
						}"""^^xsd:string ;
		] .

:CurrentMacExists
	a bt:Condition ;
	rdfs:label "Any MAC exists to run Solver?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance .
						}"""^^xsd:string ;
		] .

:AgreedToPerformRequest
	a bt:Condition ;
	rdfs:label "Agree to perform Request?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?s ?p ?o .
						}"""^^xsd:string ;
		] .

:GoalSucceeded
	a bt:Condition ;
	rdfs:label "Did Goal succeed?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?bnode	rdf:type	ajan:GoalStatus ;
								ajan:hasGoalId	?goalId ? 
								ajan:hasStatus	?status .
														}"""^^xsd:string ;
		] .


:AgreementsReached
	a bt:Condition ;
	rdfs:label "Did enogh agents agree to Request?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {						
						{
							SELECT (COUNT( DISTINCT ?agreementBnode) AS ?agreementCount) ?quorum
							WHERE {
								?bnode	rdf:type	mac:Conversation ;
										mac:hasId	?conversationId ;
										mac:hasQuorum	?quorum .
								?agreementBnode	rdf:type mac:RequestAgreement ;
												mac:hasId	?conversationId .
							} GROUP BY ?quorum
						}
						FILTER (?agreementCount >= xsd:int(?quorum))

						}"""^^xsd:string ;
		] .

:QuorumReached
	a bt:Condition ;
	rdfs:label "Is Quorum reached?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					
					ASK 
					WHERE{
						
						{
							SELECT (COUNT( DISTINCT ?resultBnode) AS ?resultCount) ?quorum
							WHERE {
								?bnode	rdf:type	mac:Conversation ;
										mac:hasId	?conversationId ;
										mac:hasQuorum	?quorum .

								?resultBnode	rdf:type mac:RequestResult ;
												mac:hasId	?conversationId .
							}GROUP BY ?quorum
						}
						FILTER (?resultCount >= xsd:int(?quorum))
					}

				"""^^xsd:string ;
		] .

:TimeoutReached
	a bt:Condition ;
	rdfs:label "Is Timeout reached?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?bnode	rdf:type	mac:Conversation ;
						# !!! ATTENTION: timeout FORMAT MUST BE "yyyy-mm-ddThh:mm:ss"
								mac:hasTimeout	?timeout .

						BIND(NOW() AS ?now)
						BIND( (DAY(?now)*86400 + HOURS(?now)*3600 + MINUTES(?now)*60 + SECONDS(?now)) AS ?nowInSeconds)

						BIND( (DAY(xsd:dateTime(?timeout))*86400 + HOURS(xsd:dateTime(?timeout))*3600 + MINUTES(xsd:dateTime(?timeout))*60 + SECONDS(xsd:dateTime(?timeout))) AS ?timeoutInSeconds)

						FILTER(?timeoutInSeconds < ?nowInSeconds)
					}
					"""^^xsd:string ;
		] .



:SetQuorumReached
	a bt:Update ;
	rdfs:label "Add Quorum Reached Flag" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						mac:TemporaryQuorumSubject 	rdf:type 	?object .

					}
					INSERT{
						mac:TemporaryQuorumSubject 	rdf:type 	mac:QuorumReached .
					}
					WHERE{
						?s ?p ?o .
						OPTIONAL {
							mac:TemporaryQuorumSubject 	rdf:type 	?object .
						}
						
					}
					"""^^xsd:string ;
		] .

:UnnecessaryAgentProfileExists
	a bt:Condition ;
	rdfs:label "Unrelated Agent Profile Exists" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?macProblemSbj	rdf:type	mac:MACProblemInstance ;
										mac:hasId 	?macId .

						?bnode	rdf:type 	mac:RequestResult ;
								mac:hasId	?convId ;
								mac:hasMacProblemId 	?resultMacId ;
								mac:hasContent	?resultContent .
								
						?resultContent	rdf:type 	mac:AgentProfileInfo ;
										?predicate	?object .

						FILTER(?macId != ?resultMacId)
					}
					"""^^xsd:string ;
		] .

:ConditionParticipants
	a bt:Condition ;
	rdfs:label "participants" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?macIns 	rdf:type 	mac:MACProblemInstance ;
									mac:hasParticipants	?part .
					}
					"""^^xsd:string ;
		] .


:ConditionNumberOfAgents
	a bt:Condition ;
	rdfs:label "number of agents" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?macIns 	rdf:type 	mac:MACProblemInstance ;
									mac:hasNumberOfAgents 	?n .
					}
					"""^^xsd:string ;
		] .


:ConditionId
	a bt:Condition ;
	rdfs:label "id" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?macIns 	rdf:type 	mac:MACProblemInstance ;
									mac:hasId 	?n .
					}
					"""^^xsd:string ;
		] .



:ConditionCoalitions
	a bt:Condition ;
	rdfs:label "coalitions" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?macIns 	rdf:type 	mac:MACProblemInstance ;
									mac:hasFeasibleCoalitions 	?n .
					}
					"""^^xsd:string ;
		] .



:IsQuorumReached
	a bt:Condition ;
	rdfs:label "Is Quorum reached" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						mac:TemporaryQuorumSubject 	rdf:type 	mac:QuorumReached .
					}
					"""^^xsd:string ;
		] .

:SetTimeoutReached
	a bt:Update ;
	rdfs:label "Add Timeout Reached Flag" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						mac:TemporaryQuorumSubject 	rdf:type 	?object .

					}
					INSERT{
						mac:TemporaryQuorumSubject 	rdf:type 	mac:TimeoutReached .
					}
					WHERE{
						?s ?p ?o .
						OPTIONAL {
							mac:TemporaryQuorumSubject 	rdf:type 	?object .
						}
						
					}
					"""^^xsd:string ;
		] .

:InsertAgreedToRequest
	a bt:Update ;
	rdfs:label "Insert Agreed to Request" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>


					INSERT{
						?bnode	rdf:type	mac:Conversation ;
								mac:hasAgreement	'true' .
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .
					}
					"""^^xsd:string ;
		] .
		
:AddConversationToMacProblem
	a bt:Update ;
	rdfs:label "Add converation info to MAC Problem Instance" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>


					INSERT{
						?existingSbj	mac:hasConversation 	?conversationNode .

						?conversationNode	rdf:type 	mac:Conversation ;
											mac:hasId 	?convId ;
											mac:hasNotificationNecessary	?notificationNecessary ;
											mac:hasTimeout	?timeout ;
											mac:hasQuorum 	?quorum .	
					}
					WHERE{
						?existingSbj	rdf:type	mac:MACProblemInstance .

						?conversationNode	rdf:type 	mac:Conversation ;
											mac:hasId 	?convId ;
											mac:hasNotificationNecessary	?notificationNecessary ;
											mac:hasTimeout	?timeout ;
											mac:hasQuorum 	?quorum .	
					}
					"""^^xsd:string ;
		] .

:SetMacProblemRunning
	a bt:Update ;
	rdfs:label "Set MAC Problem Running" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?macProblemSbj	mac:hasStatus 	?macStatus .									
					}
					INSERT{
						?macProblemSbj	mac:hasStatus 	"Running" .
					}
					WHERE{
						?macProblemSbj	rdf:type	mac:MACProblemInstance .
						OPTIONAL{
							?macProblemSbj	mac:hasStatus 	?macStatus .							
						}
					}
					"""^^xsd:string ;
		] .


:SetMacProblemCompleted
	a bt:Update ;
	rdfs:label "Set MAC Problem Completed" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?macProblemSbj	mac:hasStatus 	?macStatus .									
					}
					INSERT{
						?macProblemSbj	mac:hasStatus 	"Completed" .
					}
					WHERE{
						?macProblemSbj	rdf:type	mac:MACProblemInstance .
						OPTIONAL{
							?macProblemSbj	mac:hasStatus 	?macStatus .							
						}
					}
					"""^^xsd:string ;
		] .


:SetMacProblemFailed
	a bt:Update ;
	rdfs:label "Set MAC Problem Failed" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?macProblemSbj	mac:hasStatus 	?macStatus .									
					}
					INSERT{
						?macProblemSbj	mac:hasStatus 	"Failed" .
					}
					WHERE{
						?macProblemSbj	rdf:type	mac:MACProblemInstance .
						OPTIONAL{
							?macProblemSbj	mac:hasStatus 	?macStatus .							
						}
					}
					"""^^xsd:string ;
		] .


:MakeMacProblemUnique
	a bt:Update ;
	rdfs:label "Assign Unique MAC Problem Subject" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?existingSbj	rdf:type	mac:MACProblemInstance ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasMinPoints 	?minPoints ;
										mac:hasMinClusterSize 	?minClSize ;
										mac:hasQuorum 	?quorum .			
					}
					INSERT{
						?macProblemSbj	rdf:type	mac:MACProblemInstance ;
										mac:hasId 	?uniqueId ;
										mac:hasNumberOfAgents ?numOfAgents ;
										mac:hasStartTime 	?startTime ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasMinPoints 	?minPoints ;
										mac:hasMinClusterSize 	?minClSize ;
										mac:hasQuorum 	?quorum .
					}
					WHERE{
						?existingSbj	rdf:type	mac:MACProblemInstance ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasQuorum 	?quorum .
						OPTIONAL {
							?existingSbj 	mac:hasMinPoints 	?minPoints ;
											mac:hasMinClusterSize 	?minClSize .
						}
						{
							SELECT (count(?pAgentId) as ?numOfAgents)
							WHERE {
									?bnode	rdf:type	mac:MACProblemInstance ;
											mac:hasParticipants	?pAgentId .
							}
						}
						{
							BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
							BIND( IRI(CONCAT(STR(mac:ProblemIRI), STR(?uniqueId))) AS ?macProblemSbj )
						}	
						BIND(NOW() as ?startTime) 
					}
					"""^^xsd:string ;
		] .

:InsertHandleRequestCapability
	a bt:Update ;
	rdfs:label "Insert handleCoordRequest Capability" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?subject 	mac:hasReceiverCapability 	?existingCapability .
					}
					INSERT{
						?subject	mac:hasReceiverCapability	'handleCoordRequest' .
					}
					WHERE{
						?subject	rdf:type	mac:Conversation .

						OPTIONAL {
							?subject mac:hasReceiverCapability 	?existingCapability .
						}
					}
					"""^^xsd:string ;
		] .


:InsertMacStartedActivityToLog
	a bt:Update ;
	rdfs:label "Insert Mac Started Activity to Log" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?subject 	mac:hasReceiverCapability 	?existingCapability .
					}
					INSERT{
						mac:LogActivity 	rdf:type 	mac:CurrentActivity ;
											mac:hasActivity 	?activity .
					}
					WHERE{
						?s 	?p 	?o .
						OPTIONAL {
							mac:LogActivity 	rdf:type 	mac:CurrentActivity ;
												mac:hasActivity 	?activity .
						}
					}
					"""^^xsd:string ;
		] .



:InsertAgentProfileInfoCapability
	a bt:Update ;
	rdfs:label "Insert Agent Profile Info Capability" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?subject 	mac:hasReceiverCapability 	?existingCapability .
					}
					INSERT{
						?subject	mac:hasReceiverCapability	'agentProfileInfoRequest' .
					}
					WHERE{
						?subject	rdf:type	mac:Conversation .

						OPTIONAL {
							?subject mac:hasReceiverCapability 	?existingCapability .
						}
					}
					"""^^xsd:string ;
		] .

:RemoveConversationContent
	a bt:Update ;
	rdfs:label "Remove Content of Conversation" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

					DELETE {
					# remove previous content and add new content below
						?bnode	mac:hasContent 	?unnecessaryContent .					
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .
						OPTIONAL {
							?bnode 	mac:hasContent 	?unnecessaryContent .
						}
					}
					"""^^xsd:string ;
		] .	

:InsertUtilities
	a bt:Update ;
	rdfs:label "Insert CSGP Utilities to RequestMessage" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

					#DELETE {
					# remove previous content and add new content below
					#	?bnode	mac:hasContent 	?unnecessaryContent .					
					#}
					INSERT{
						?bnode	mac:hasContent 	?feasibleCoalitionNode, ?uVbnode .

                   		#?feasibleCoalitionNode  mac:hasUtilityValue ?uVbnode .

                    	#?uVbnode    rdf:type    mac:UtilityValue ;
                         #      		mac:isComputedBy   ?thisAgentId ;
                          #      	mac:hasValue        ?ttlV .

					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .
						OPTIONAL {
							?bnode 	mac:hasContent 	?unnecessaryContent .
						}
								

						?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
									ajan:agentId	?thisAgentId .	
						
                   		?feasibleCoalitionNode  mac:hasUtilityValue ?uVbnode .
                    	?uVbnode    rdf:type    mac:UtilityValue ;
                               		mac:isComputedBy   ?thisAgentId ;
                                	mac:hasValue        ?ttlV .

	#					{
	#						BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
	#						BIND( IRI(CONCAT(STR(mac:UtilityInfo), STR(?uniqueId))) AS ?utilityInfoNode )
	#					}	
					}
					"""^^xsd:string ;
		] .
					
:InsertCoordinationResult
	a bt:Update ;
	rdfs:label "Insert Coord. Result" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

					DELETE {
						?conversation 	mac:hasContent 	?previousContent .
						?macInstance 	rdf:type	mac:CurrentMACProblemInstance .
					}
					INSERT{
						?conversation	mac:hasContent ?macInstance, ?grouping, ?group.
					}
					WHERE{
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasConversation 	?conversation .
						
						OPTIONAL {
							?macInstance 	mac:hasSolution 	?grouping . 
							?grouping 	mac:hasMembers 	?group .
						}

						#OPTIONAL {
						#	?group 	mac:hasMembers 	?memberAgentId .
						#}

						?conversation	rdf:type	mac:Conversation .

						OPTIONAL {
							?conversation 	mac:hasContent 	?previousContent .
						}			
					}
					"""^^xsd:string ;
		] .

:InsertBossAsSolverToMacProblem
a bt:Update ;
	rdfs:label "Insert BOSS as Solver to MAC Problem" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					INSERT{
						?macInstance 	mac:hasSolver 	"BOSS".
					}
					WHERE{
						?macInstance  	rdf:type 	mac:MACProblemInstance .
					}
					"""^^xsd:string ;
		] .

:InsertHdbscanAsSolverToMacProblem
a bt:Update ;
	rdfs:label "Insert HDBSCAN as Solver to MAC Problem" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					INSERT{
						?macInstance 	mac:hasSolver 	"HDBSCAN".
					}
					WHERE{
						?macInstance  	rdf:type 	mac:MACProblemInstance .
					}
					"""^^xsd:string ;
		] .


:InsertMacProblemInfoToConversation
	a bt:Update ;
	rdfs:label "Insert MAC problem Info to RequestMessage" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					INSERT{
						?bnode	rdf:type	mac:Conversation ;
								mac:hasContent ?macInstance .
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .
						?macInstance  	rdf:type 	mac:MACProblemInstance .
					}
					"""^^xsd:string ;
		] .

:InsertAgentProfileInfo
	a bt:Update ;
	rdfs:label "Insert Profile Info to RequestMessage" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>


					#DELETE {
					#	?bnode 	mac:hasContent 	?previousContent .
					#}
					INSERT{
						?bnode	rdf:type	mac:Conversation ;
								mac:hasContent ?personalInfoNode .

						?personalInfoNode 	rdf:type 	mac:AgentProfileInfo ;
											mac:belongsTo 	?thisAgentId ;
											domain:hasGender 	?gender ;
											domain:hasNationality 	?nation ;
											domain:hasLanguage 	?lang .
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .

						?agProf 	rdf:type 	domain:DomainUser ;
									domain:hasGender 	?gender ;
									domain:hasNationality 	?nation ;
									domain:hasLanguage 	?lang .

						?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
									ajan:agentId	?thisAgentId .	
						{
							BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
							BIND( IRI(CONCAT(STR(mac:AgentProfileInfo), STR(?uniqueId))) AS ?personalInfoNode )
						}	
					}
					"""^^xsd:string ;
		] .

:AddDistancesToResultMessage
	a bt:Write ;
	rdfs:label "Add Distances to Conversation" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

					CONSTRUCT {
						?bnode	rdf:type	mac:Conversation ;
								mac:hasContent ?distanceScoreIri .
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .

						?macInstance 	rdf:type 	mac:MACProblemInstance ;
										mac:hasDistanceScore 	?distanceScoreIri .
						?distanceScoreIri 	rdf:type 	mac:DistanceScore ;
											mac:hasValue 	?minTotalDistance ;
											mac:isComputedBy	?thisAgentId ;
											mac:isComputedAgainst ?participantId ;
											mac:isComputedFor 	?macId .
					}
					"""^^xsd:string ;
		] .

:AddAgentProfileInfoToConv
	a bt:Write ;
	rdfs:label "Add Profile Info to Conversation" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>


					CONSTRUCT {
						?bnode	rdf:type	mac:Conversation ;
								mac:hasContent ?personalInfoNode .

						?personalInfoNode 	rdf:type 	mac:AgentProfileInfo ;
											mac:belongsTo 	?thisAgentId ;
											domain:hasGender 	?gender ;
											domain:hasNationality 	?nation ;
											domain:hasLanguage 	?lang .
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .

						?agProf 	rdf:type 	domain:DomainUser ;
									domain:hasGender 	?gender ;
									domain:hasNationality 	?nation ;
									domain:hasLanguage 	?lang .

						?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
									ajan:agentId	?thisAgentId .	
						{
							BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
							BIND( IRI(CONCAT(STR(mac:AgentProfileInfo), STR(?uniqueId))) AS ?personalInfoNode )
						}	
					}
					"""^^xsd:string ;
		] .




:CreateThisAgentProfileInstance
	a bt:Update ;
	rdfs:label "Create This Agent Profile Info Instance" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

						INSERT {
							?resultSbj	rdf:type 	mac:RequestResult ;
										mac:hasMacProblemId 	?macId ;
										mac:hasContent	?profileInfoIri .
								
							?profileInfoIri	rdf:type 	mac:AgentProfileInfo ;
											mac:belongsTo 	?thisAgentId ;
											domain:hasGender 	?gender ;
											domain:hasNationality 	?nation ;
											domain:hasLanguage 	?lang .
						}
						WHERE {
							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId .
							{
								BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
								BIND( IRI(CONCAT(STR(mac:AgentProfileInfo), STR(?uniqueId))) AS ?profileInfoIri )
							}
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .
							?bnode 	rdf:type 	domain:DomainUser ;
									domain:hasGender 	?gender ;
									domain:hasNationality 	?nation ;
									domain:hasLanguage 	?lang .
							{
								BIND(SHA1(xsd:string(NOW())) AS ?uniqueId2)
								BIND( IRI(CONCAT(STR(mac:RequestResult), STR(?uniqueId2), STR("2"))) AS ?resultSbj )
							}
				} """^^xsd:string ;
	] .

:ComputeCannotLinks
	a bt:Write ;
	rdfs:label "Compute Cannot link connections" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

						CONSTRUCT {
								?macInstance	mac:hasCannotLinkConnections	?cannotLinkBnode .

								?cannotLinkBnode	mac:hasCannotConnect	?participantId1, ?participantId2 .
						}
						WHERE {
							{
								SELECT ?macInstance ?participantId1 ?participantId2 (SUM(?canSpeakSameLang) AS ?finalCanSpeakSameLang)
								WHERE{
									{
										SELECT ?macInstance ?participantId1 ?participantId2 ?canSpeakSameLang
										WHERE{
											?macInstance	rdf:type	mac:MACProblemInstance ;
															mac:hasId 	?macId ;
															mac:hasParticipants 	?participantId1, ?participantId2 .
											FILTER(?participantId1 != ?participantId2)
											FILTER(?participantId1 < ?participantId2)

											?resultSbj1	rdf:type 	mac:RequestResult ;
														mac:hasMacProblemId 	?macId ;
														mac:hasContent	?resultContent1 .
								
											?resultContent1	rdf:type 	mac:AgentProfileInfo ;
															mac:belongsTo 	?participantId1 ;
															domain:hasLanguage 	?language1 .
										
											?resultSbj2	rdf:type 	mac:RequestResult ;
														mac:hasMacProblemId 	?macId ;
														mac:hasContent	?resultContent2 .
								
											?resultContent2	rdf:type 	mac:AgentProfileInfo ;
															mac:belongsTo 	?participantId2 ;
															domain:hasLanguage 	?language2 .

											BIND(IF(?language1 = ?language2, 1, 0) AS ?canSpeakSameLang)
										} GROUP BY ?macInstance ?participantId1 ?participantId2 ?canSpeakSameLang
									}
								}GROUP BY ?macInstance ?participantId1 ?participantId2
							}
							FILTER(?finalCanSpeakSameLang=0)
							BIND(BNODE() AS ?cannotLinkBnode)
				} """^^xsd:string ;
	] .


:ComputeCannotLinks_UpdateNode
	a bt:Update ;
	rdfs:label "Compute Cannot link connections" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

						INSERT {
								?macInstance	mac:hasCannotLinkConnections	?cannotLinkBnode .

								?cannotLinkBnode	mac:hasCannotConnect	?participantId1, ?participantId2 .
						}
						WHERE {
							{
								SELECT ?macInstance ?participantId1 ?participantId2 (SUM(?canSpeakSameLang) AS ?finalCanSpeakSameLang)
								WHERE{
									{
										SELECT ?macInstance ?participantId1 ?participantId2 ?canSpeakSameLang
										WHERE{
											?macInstance	rdf:type	mac:MACProblemInstance ;
															mac:hasId 	?macId ;
															mac:hasParticipants 	?participantId1, ?participantId2 .
											FILTER(?participantId1 != ?participantId2)
											FILTER(?participantId1 < ?participantId2)

											?resultSbj1	rdf:type 	mac:RequestResult ;
														mac:hasMacProblemId 	?macId ;
														mac:hasContent	?resultContent1 .
								
											?resultContent1	rdf:type 	mac:AgentProfileInfo ;
															mac:belongsTo 	?participantId1 ;
															domain:hasLanguage 	?language1 .
										
											?resultSbj2	rdf:type 	mac:RequestResult ;
														mac:hasMacProblemId 	?macId ;
														mac:hasContent	?resultContent2 .
								
											?resultContent2	rdf:type 	mac:AgentProfileInfo ;
															mac:belongsTo 	?participantId2 ;
															domain:hasLanguage 	?language2 .

											BIND(IF(?language1 = ?language2, 1, 0) AS ?canSpeakSameLang)
										} GROUP BY ?macInstance ?participantId1 ?participantId2 ?canSpeakSameLang
									}
								}GROUP BY ?macInstance ?participantId1 ?participantId2
							}
							FILTER(?finalCanSpeakSameLang=0)
							BIND(BNODE() AS ?cannotLinkBnode)
				} """^^xsd:string ;
	] .


:GenerateCoalitions
	a bt:CoalitionGenerator ;
	rdfs:label "Generate Coalitions" ;
	bt:query [
				a bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:targetBase ajan:ExecutionKnowledge ;
				bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					Construct {
						?macInstance	rdf:type	mac:MACProblemInstance ;
										mac:hasId	?macId ;
										mac:hasParticipants	?participantId ;
										mac:hasNumberOfAgents	?numOfAgents ;
										mac:hasMinCoalitionSize	"1" ;
										mac:hasMaxCoalitionSize	?numOfAgents ;
										mac:hasCannotLinkConnections	?cannotLinkBnode ;
										mac:hasMustLinkConnections	?mustLinkBnode .

						?cannotLinkBnode	mac:hasCannotConnect	?clAgentId, ?clAgentId2 .
						?mustLinkBnode	mac:hasMustConnect	?mlAgentId, ?mlAgentId2 .
					}
					Where{
						?macInstance	rdf:type	mac:MACProblemInstance ;
										mac:hasId 	?macId ;
										mac:hasParticipants 	?participantId ;
										mac:hasNumberOfAgents 	?numOfAgents .

						OPTIONAL {
							?macInstance 	mac:hasCannotLinkConnections	?cannotLinkBnode .

							?cannotLinkBnode	mac:hasCannotConnect	?clAgentId, ?clAgentId2 .
						}
						OPTIONAL {
							?bnode 	mac:hasMustLinkConnections	?mustLinkBnode .

							?mustLinkBnode	mac:hasMustConnect	?mlAgentId, ?mlAgentId2 .
						}
					}
					"""^^xsd:string ;
			] .


:ComputeCoalitionInfo
	a bt:Insert ;
	rdfs:label "Compute Coalition Info" ;
	bt:query [
		a bt:ConstructQuery;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

					CONSTRUCT {
							?feasibleCoalitionNode	mac:hasCommonGender	?cG ;
													mac:hasCommonNation	?cN .
					}
					WHERE {
					{
						SELECT ?feasibleCoalitionNode (COUNT(DISTINCT ?gender) AS ?gS) (COUNT(DISTINCT ?nation) AS ?nS)
						{
							?macInstance	rdf:type	 mac:MACProblemInstance ;
											mac:hasId	?macId ;
											mac:hasFeasibleCoalitions	 ?feasibleCoalitionNode .

							?feasibleCoalitionNode	rdf:type	 mac:CSGP-Coalition ;
													mac:hasMembers	?mAgentId .

							?resultSbj1	rdf:type 	mac:RequestResult ;
										mac:hasMacProblemId 	?macId ;
										mac:hasContent	?resultContent1 .
								
							?resultContent1	rdf:type 	mac:AgentProfileInfo ;
											mac:belongsTo 	?mAgentId ;
											domain:hasGender 	?gender ;
											domain:hasNationality 	?nation .
						} GROUP BY ?feasibleCoalitionNode
					}
					BIND(IF(?gS > 1, "Mixed", "Same") AS ?cG)
					BIND(IF(?nS > 1, "Mixed", "Same") AS ?cN)
				}
				"""^^xsd:string ;
		] .

:SetCoalitionAttributes
	a bt:Update ;
	rdfs:label "Set Coalition common Attributes (gender, nation) " ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

					DELETE{
						?feasibleCoalition	mac:hasCommonGender	?existingCommonGender ;
											mac:hasCommonNation	?existingCommonNation .
					}
					INSERT {
						?feasibleCoalition	mac:hasCommonGender	?commonGender ;
											mac:hasCommonNation	?commonNation .
					}
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance ;
										mac:hasId 	?macId ;
										mac:hasFeasibleCoalitions 	?feasibleCoalition .
						?feasibleCoalition 	rdf:type 	mac:CSGP-Coalition ;
											mac:hasCommonGender 	?existingCommonGender ;
											mac:hasCommonNation 	?existingCommonNation .

						FILTER(LCASE(?existingCommonGender) = "same" || LCASE(?existingCommonNation) = "same")

						?feasibleCoalition 	mac:hasMembers 	?memberAgentId .

						?resultSbj	rdf:type 	mac:RequestResult ;
									mac:hasMacProblemId 	?macId ;
									mac:hasContent	?resultContent .
								
						?resultContent	rdf:type 	mac:AgentProfileInfo ;
										mac:belongsTo 	?memberAgentId ;
										domain:hasGender 	?gender ;
										domain:hasNationality 	?nation .

						BIND(IF(LCASE(?existingCommonGender) = "same", ?gender, ?existingCommonGender) AS ?commonGender)
						BIND(IF(LCASE(?existingCommonNation) = "same", ?nation, ?existingCommonNation) AS ?commonNation)
					}
					"""^^xsd:string ;
		] .

:RemoveUnnecessaryAgentProfiles
	a bt:Update ;
	rdfs:label "Delete Unrelated Agent Profiles from EKB" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?bnode	rdf:type mac:RequestResult ;
								mac:hasId	?convId ;
								mac:hasMacProblemId 	?resultMacId ;
								mac:hasContent	?resultContent .

						?resultContent	rdf:type 	mac:AgentProfileInfo ;
										?predicate	?object .
					}
					WHERE{
						?macProblemSbj	rdf:type	mac:MACProblemInstance ;
										mac:hasId 	?macId .

						?bnode	rdf:type 	mac:RequestResult ;
								mac:hasId	?convId ;
								mac:hasMacProblemId 	?resultMacId ;
								mac:hasContent	?resultContent .
								
						?resultContent	rdf:type 	mac:AgentProfileInfo ;
										?predicate	?object .

						FILTER(?macId != ?resultMacId)
					}
					"""^^xsd:string ;
		] .


:GenerateNewConvInstance
	a bt:Update ;
	rdfs:label "Create Unique Conversation Id" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?existingConv 	rdf:type 	mac:Conversation ;
										?existingConvPred 	?existingConvObj .
					}
					INSERT{
						?conversationNode	rdf:type 	mac:Conversation ;
											mac:hasId 	?uniqueId ;
											mac:hasUseCase 	?useCaseTitle ;
											mac:hasParticipants 	?participantId ;
											mac:hasNotificationNecessary	?notificationNecessary ;
											mac:hasTimeout	?timeout ;
											mac:hasQuorum 	?quorum ;
											mac:hasMacProblemId 	?macId .
					}
					WHERE{
						?macProblemSbj	rdf:type	mac:MACProblemInstance ;
										mac:hasId 	?macId ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasQuorum 	?quorum .

						OPTIONAL {
							?existingConv 	rdf:type 	mac:Conversation ;
											?existingConvPred 	?existingConvObj .
						}
						{
							BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
							BIND( IRI(CONCAT(STR(mac:Conversation), STR(?uniqueId))) AS ?conversationNode )
						}

					}
					"""^^xsd:string ;
		] .



:AddProfileInfoAndCoalitions
	a bt:Update ;
	rdfs:label "Add Profile info of Participants" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

					INSERT {
						?conversationSbj 	mac:hasContent 	?profileInfoIri, ?macInstance, ?feasibleCoalition .

						#?macInstance 	rdf:type 	mac:MACProblemInstance ;
						#			mac:hasFeasibleCoalitions 	?feasibleCoalition ;
						#			mac:hasId 	?macId .

					#	?resultSbj			rdf:type 	mac:RequestResult ;
					#						mac:hasMacProblemId 	?macId ;
					#						mac:hasContent	?profileInfoIri .
								
					#	?profileInfoIri		rdf:type 	mac:AgentProfileInfo ;
					#						mac:belongsTo 	?agentId ;
					#						domain:hasGender 	?gender ;
					#						domain:hasNationality 	?nation .
					}
					WHERE {

						?macInstance 	rdf:type 	mac:MACProblemInstance ;
										mac:hasFeasibleCoalitions 	?feasibleCoalition ;
										mac:hasId 	?macId .

						?feasibleCoalition 	rdf:type 	mac:CSGP-Coalition ;
											mac:hasCommonGender		?commonGender ;
											mac:hasCommonNation 	?commonNation .
						
						?conversationSbj	rdf:type 	mac:Conversation ;
											mac:hasMacProblemId 	?macId .

						?resultSbj		rdf:type 	mac:RequestResult ;
										mac:hasMacProblemId 	?macId ;
										mac:hasContent	?profileInfoIri .
								
						?profileInfoIri	rdf:type 	mac:AgentProfileInfo ;
										mac:belongsTo 	?agentId ;
										domain:hasGender 	?gender ;
										domain:hasNationality 	?nation .

						{
							BIND(BNODE() as ?newMacSbj)
						}
				} 
					"""^^xsd:string ;
		] .


:InsertCsgpUtilitiesCapability
	a bt:Update ;
	rdfs:label "Insert Csgp Utilities Capability" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>


					DELETE {
						?subject 	mac:hasReceiverCapability 	?existingCapability .
					}
					INSERT{
						?subject	mac:hasReceiverCapability	'csgpUtilities' .
					}
					WHERE{
						?subject	rdf:type	mac:Conversation .

						OPTIONAL {
							?subject mac:hasReceiverCapability 	?existingCapability .
						}
					}
					"""^^xsd:string ;
		] .

:InsertInitiatorAsReceiver
	a bt:Update ;
	rdfs:label "Insert Initiator as Result Receiver" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE{
						?bnode 	mac:hasReceiver 	?receiverId .
					}
					INSERT{
						?bnode	mac:hasReceiver	?initiatorId .
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation ;
								mac:hasInitiator 	?initiatorId .
						OPTIONAL{
							?bnode 	mac:hasReceiver 	?receiverId .
						}
					}
					"""^^xsd:string ;
		] .

:ComputeCoordinationRuntime
	a bt:Update ;
	rdfs:label "Compute Runtime of Coordination" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				INSERT {
					?macStatus	mac:hasRuntime	?coordinationRuntimeInSeconds .
				}
				WHERE{
					?macStatus 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
								mac:hasStartTime 	?startTime .

					BIND(NOW() as ?endTime)


					BIND( (DAY(?startTime)*86400 + HOURS(?startTime)*3600 + MINUTES(?startTime)*60 + SECONDS(?startTime)) AS ?startTimeInSeconds)
					BIND( (DAY(?endTime)*86400 + HOURS(?endTime)*3600 + MINUTES(?endTime)*60 + SECONDS(?endTime)) AS ?endTimeInSeconds)
					BIND( ?endTimeInSeconds - ?startTimeInSeconds AS ?coordinationRuntimeInSeconds)
				}
					"""^^xsd:string ;
		] .


:InsertParticipantsAsReceivers
	a bt:Update ;
	rdfs:label "Insert Participants as Receivers" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE{
						?bnode 	mac:hasReceiver 	?receiverId .
					}
					INSERT{
						?bnode	mac:hasReceiver	?participantId .
					}
					WHERE{
#						{
#							SELECT DISTINCT ?participantId 
#							WHERE{
								?bnode	rdf:type	mac:Conversation ;
										mac:hasParticipants 	?participantId .
								?thisAgentIRI 	rdf:type 	ajan:Agent, ajan:ThisAgent ;
												ajan:agentId 	?thisAgentId .
								FILTER(?participantId != ?thisAgentId)
#							}
#						}
						OPTIONAL{
							?bnode 	mac:hasReceiver 	?receiverId .
						}
					}
					"""^^xsd:string ;
		] .	


:InsertDefaultResponseCapability
	a bt:Update ;
	rdfs:label "Insert Capability of Initiator" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE{
						?currentActiveConv 	mac:hasReceiverCapability 	?capability .
					}
					INSERT{
						?currentActiveConv	mac:hasReceiverCapability	'receiveCoordRequestResponse' .
					}
					WHERE{
						?currentActiveConv	rdf:type	mac:Conversation .

						OPTIONAL{
							?bnode 	mac:hasReceiverCapability 	?capability .
						}
					}
					"""^^xsd:string ;
		] .	

:InsertRequestResult
	a bt:Update ;
	rdfs:label "Insert Result of Request" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>


					INSERT{
						?bnode	rdf:type	mac:Conversation ;
								mac:hasContent 	mac:DomainSpecificSubjectUri .

						mac:DomainSpecificSubjectUri 	rdf:type 	mac:ResponseContent ;
															ajan:hasLocation 	"DFKI" . 
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .
					}
					"""^^xsd:string ;
		] .


:InsertRequiredTriples
	a bt:Update ;
	rdfs:label "Insert Required Triples to Handle Request" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>


					INSERT{
						?bnode	rdf:type	mac:RequestMessage ;
								mac:hasAgreement	'true' ;
								mac:hasReceiverCapability	'receiveCoordRequestResponse' .
						?s ?p ?o .
					}
					WHERE{
						?s ?p ?o .
						?bnode	rdf:type	mac:RequestMessage .
					}
					"""^^xsd:string ;
		] .


:SetInitiatorReceiveReplyGoalRunning
	a bt:Update ;
	rdfs:label "Set Initiator Receive Reply Goal Running" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						ajan:TemporaryGoalStatus	rdf:type ajan:InitiatorReceiveReplyGoal ;
													ajan:hasStatus 	?status .
					}
					INSERT{
						ajan:TemporaryGoalStatus	rdf:type ajan:InitiatorReceiveReplyGoal ;
													ajan:hasStatus 	"Running" .
					}
					WHERE{
						?s ?p ?o .

						OPTIONAL {
							ajan:TemporaryGoalStatus	rdf:type ajan:InitiatorReceiveReplyGoal ;
														ajan:hasStatus 	?status .
						}
					}
					"""^^xsd:string ;
		] .

:SetInitiatorReceiveReplyGoalCompleted
	a bt:Update ;
	rdfs:label "Set Initiator Receive Reply Goal Completed" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						ajan:TemporaryGoalStatus	ajan:hasStatus 	?status .
					}
					INSERT{
						ajan:TemporaryGoalStatus	ajan:hasStatus 	"Completed" .
					}
					WHERE{
						ajan:TemporaryGoalStatus	rdf:type ajan:InitiatorReceiveReplyGoal ;
													ajan:hasStatus 	?status .
					}
					"""^^xsd:string ;
		] .


:SetGoalCompleted
	a bt:Update ;
	rdfs:label "Update Goal status to Complete" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?bNode	ajan:hasStatus	?status .
					}
					INSERT{
						?bNode	rdf:type	ajan:GoalStatus ;
								ajan:hasStatus	"Completed" .
					}
					WHERE{
						?bNode	rdf:type	ajan:GoalStatus ;
								ajan:hasStatus	?status .
					}
					"""^^xsd:string ;
		] .

:GenerateGoalUid
	a bt:Update ;
	rdfs:label "Generate Unique Goal ID to manage Goal status" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					INSERT{
						_:bnode	rdf:type	ajan:GoalStatus ;
								ajan:hasGoalId	?goalId ? 
								ajan:hasStatus	"Running" .
					}
					WHERE{
						BIND(SHA1(xsd:string(NOW())) AS ?goalId)
					}
					"""^^xsd:string ;
		] .



:HandleReceiveResponseEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Receive Response Event" ;
	bt:event agents:ReceiveParticipantReplyEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}
					"""^^xsd:string ;
				] .

:HandleInitSendRequestGoal
	a bt:HandleEvent ;
	rdfs:label "GoalHandler: Initiator Send Request Goal" ;
	bt:event agents:InitiatorSendRequestGoal ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
						#_:bnode	rdf:type	ajan:GoalStatus ;
						#		ajan:hasStatus	"Running" .
					}
					WHERE {
						?s ?p ?o .
					}
					"""^^xsd:string ;
				] .



:WriteUtilities
	a bt:Write ;
	rdfs:label "write CSGP Utilities to RequestMessage" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>


					CONSTRUCT{
						?bnode	mac:hasContent 	?feasibleCoalitionNode, ?uVbnode .

                   		?feasibleCoalitionNode  mac:hasUtilityValue ?uVbnode .

                    	?uVbnode    rdf:type    mac:UtilityValue ;
                               		mac:isComputedBy   ?thisAgentId ;
                                	mac:hasValue        ?ttlV .
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .

						?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
									ajan:agentId	?thisAgentId .	
						
                   		?feasibleCoalitionNode  mac:hasUtilityValue ?uVbnode .
                    	?uVbnode    rdf:type    mac:UtilityValue ;
                               		mac:isComputedBy   ?thisAgentId ;
                                	mac:hasValue        ?ttlV .
					}
					"""^^xsd:string ;
		] .
:WriteRunningMacDistancesToEKB
	a bt:Write ;
	rdfs:label "Write Distance Score to EKB" ;
	rdfs:comment "Write Distance Scores of the Running MAC Problem to EKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge  ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					CONSTRUCT {
						?macInstance 	mac:hasId 	?macId ;
										mac:hasStatus ?macStatus ;
										mac:hasDistanceScore 	?distanceIri .

						?distanceIri 	rdf:type 	mac:DistanceScore ;
										mac:isComputedFor 	?macId ;
										mac:hasValue 	?minTotalDistance ;
										mac:isComputedBy	?thisAgentId ;
										mac:isComputedAgainst ?participantId .
					}
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance ;
										mac:hasId 	?macId ;
										mac:hasStatus ?macStatus .
						FILTER(LCASE(?macStatus) = "running")
						?distanceIri 	rdf:type 	mac:DistanceScore ;
										mac:isComputedFor 	?macId ;
										mac:hasValue 	?minTotalDistance ;
										mac:isComputedBy	?thisAgentId ;
										mac:isComputedAgainst ?participantId .
					}
		"""^^xsd:string ;
	] .


:WriteRunningMacCoalitionValuesToEKB
	a bt:Write ;
	rdfs:label "Write Coalition Values to EKB" ;
	rdfs:comment "Write Coalition Values of a Running MAC Problem to EKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge  ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					CONSTRUCT {
						?macInstance 	mac:hasId 	?macId ;
										mac:hasStatus ?macStatus ;
										mac:hasFeasibleCoalitions 	?feasibleCoalition .

						?feasibleCoalition	rdf:type	mac:CSGP-Coalition ;
											mac:hasMembers	?memberAgentId ;
											mac:hasValue ?coalitionValue .
					}
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance ;
										mac:hasId 	?macId ;
										mac:hasStatus ?macStatus .
						FILTER(LCASE(?macStatus) = "running")

						?macInstance mac:hasFeasibleCoalitions 	?feasibleCoalition .

						?feasibleCoalition 	rdf:type 	mac:CSGP-Coalition ;
											mac:hasMembers 	?memberAgentId ;
											mac:hasValue 	?coalitionValue .
					}
		"""^^xsd:string ;
	] .



:ComputeReciprocalDistances
	a bt:Write ;
	rdfs:label "Compute Reciprocal Distances for Clustering" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
			PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
		
			CONSTRUCT  {
					?macInstance 	mac:hasReciprocalScore 	?rrsBnode .
					?rrsBnode 	rdf:type 	mac:ReciprocalScore ;
								mac:hasValue 	?reciprocalScore ;
								mac:isComputedBy 	?participantId1 ;
								mac:isComputedAgainst 	?participantId2 ;
								mac:isComputedFor 	?macId .

			}
			WHERE {
					?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
									mac:hasParticipants 	?participantId1, ?participantId2 .
					FILTER(?participantId1 != ?participantId2)
					FILTER(?participantId1 < ?participantId2)
					?macInstance 	mac:hasDistanceScore 	?distanceIri1, ?distanceIri2 ;
									mac:hasId 	?macId .

					?distanceIri1 	rdf:type 	mac:DistanceScore ;
									mac:hasValue 	?distValue1 ;
									mac:isComputedBy 	?participantId1 ;
									mac:isComputedAgainst ?participantId2 ;
									mac:isComputedFor 	?macId .

					?distanceIri2 	rdf:type 	mac:DistanceScore ;
									mac:hasValue 	?distValue2 ;
									mac:isComputedBy 	?participantId2 ;
									mac:isComputedAgainst ?participantId1 ;
									mac:isComputedFor 	?macId .

                    BIND(IF(?distValue1 != 0 && ?distValue2 != 0, 2/((1/?distValue1)+(1/?distValue2)), 0) AS ?reciprocalScore) .
					BIND(BNODE() AS ?rrsBnode) .

				} """^^xsd:string ;
	] .



:SolveClusteringWithHdbscan
	a bt:HDBSCAN ;
	rdfs:label "Solve Clustering with HDBSCAN" ;
	bt:query [
				a bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:targetBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
                        CONSTRUCT {
								?macInstance	rdf:type	mac:MACProblemInstance;
												mac:hasId		?macId;
												mac:hasNumberOfAgents	?numberOfAgents;
												mac:hasParticipants		?participantId1, ?participantId2 ;
												mac:hasPerfectMatchScore ?perfectMatchScore ;
												mac:hasCannotLinkConnections	?cannotConnection ;
												mac:hasMustLinkConnections 	?mustConnection .
								?cannotConnection 	?clPred 	?clObj .
								?mustConnection 	?mlPred 	?mlObj .
								# HDBSCAN Parameters: min Points and min Cluster Size
								?macInstance	mac:hasMinPoints	?boundMinPoints ;
												mac:hasMinClusterSize	?boundMinClSize .
								?rrsIri 	rdf:type 	mac:DistanceScore ;
											mac:isComputedBy 	?participantId1 ;
											mac:isComputedAgainst 	?participantId2 ;
											mac:isComputedFor 	?macId ;
											mac:hasValue 	?reciprocalDistance .}
						WHERE {
							?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasNumberOfAgents 	?numberOfAgents ;
											mac:hasParticipants 	?participantId1, ?participantId2 .
							OPTIONAL{
								?macInstance 	mac:hasCannotLinkConnections 	?cannotConnection .
								?cannotConnection 	?clPred 	?clObj . }
							OPTIONAL{
								?macInstance 	mac:hasMustLinkConnections 	?mustConnection .
								?mustConnection 	?mlPred 	?mlObj . }
							?macInstance 	mac:hasReciprocalScore 	?rrsIri .
							?rrsIri 	rdf:type 	mac:ReciprocalScore ;
										mac:isComputedBy 	?participantId1 ;
										mac:isComputedAgainst 	?participantId2 ;
										mac:isComputedFor 	?macId ;
										mac:hasValue 	?reciprocalDistance .
							OPTIONAL {
								?macInstance 	mac:hasMinPoints    ?minPoints ;
												mac:hasMinClusterSize   ?minClSize .
								BIND(IF(BOUND(?minPoints), ?minPoints, 1) AS ?boundMinPoints)
								BIND(IF(BOUND(?minClSize), ?minClSize, 2) AS ?boundMinClSize) }
							BIND(0 AS ?perfectMatchScore) }
					"""^^xsd:string ;
			] .

:SolveCsgpWithBoss
	a bt:BOSS ;
	rdfs:label "Solve CSGP with BOSS" ;
	bt:query [
				a bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:targetBase ajan:ExecutionKnowledge ;
				bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					Construct {
						?macInstance	rdf:type	mac:MACProblemInstance ;
										mac:hasNumberOfAgents	?numberOfAgents ;
										mac:hasParticipants	?participantId ;
										mac:hasId	?macId ;
										mac:hasFeasibleCoalitions	?feasibleCoalition .

						# FeasibleCoalitions only include the coalitions which are feasible for this use-case (because of constraints). Therefore, feasibleCoalitions don't include all possible coalitions which is required by BOSS algorithm. Therefore, we pass a value as "NonExistentCoalitionValue" which will be assigned to the missing coalitions. By default, this value is very small since infeasibleCoalitions are infeasible and we don't want them to be part of the solution.  
						?macInstance	mac:hasNonExistentCoalitionValue	"-1000000" .

						?feasibleCoalition	rdf:type	mac:CSGP-Coalition ;
												mac:hasMembers	?memberAgentId ;
												mac:hasValue ?coalitionValue .
					}
					Where{
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
										mac:hasParticipants 	?participantId ;
										mac:hasId 	?macId ;
										mac:hasFeasibleCoalitions 	?feasibleCoalition .
						?feasibleCoalition	rdf:type	mac:CSGP-Coalition ;
											mac:hasMembers	?memberAgentId ;
											mac:hasValue ?coalitionValue .
					}
					"""^^xsd:string ;
			] .

:NormalizeCsgpCsValues
	a bt:Update ;
	rdfs:label "Normalize CSGP-CS values" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				DELETE{
					?macSolution	mac:hasValue	?csValue .
				}
				INSERT {
					?macSolution	mac:hasValue	?normalizedCsValue .
				}
				WHERE{
					?macInstance 	rdf:type 	mac:MACProblemInstance .

					OPTIONAL{
						?macInstance 	mac:hasSolution 	?macSolution ;
										mac:hasMinCsValue 	?minCsValue .
						FILTER(?minCsValue <= 0)
						?macSolution 	rdf:type 	mac:CSGP-CoalitionStructure ;
										mac:hasValue	?csValue .
						BIND((?csValue + 5 - ?minCsValue) AS ?normalizedCsValue)
					}
				}
					"""^^xsd:string ;
		] .

:WriteAgentProfileInfo
	a bt:Write ;
	rdfs:label "Write Profile Info to EKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

					CONSTRUCT {
							?bnode 	rdf:type 	domain:DomainUser ;
									domain:hasGender 	?gender ;
									domain:hasNationality 	?nation ;
									domain:hasLanguage 	?lang .
						}
					WHERE {
							?bnode 	rdf:type 	domain:DomainUser ;
									domain:hasGender 	?gender ;
									domain:hasNationality 	?nation ;
									domain:hasLanguage 	?lang .

							}
		"""^^xsd:string ;
	] .

:QueryPrsInfo
	a bt:Write ;
	rdfs:label "Write Personal Info to EKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

					CONSTRUCT {
							?bnode 	rdf:type 	domain:DomainUser ;
									domain:hasGender 	?gender ;
									domain:hasNationality 	?nation ;
									domain:hasLanguage 	?lang .
						}
					WHERE {
							?bnode 	rdf:type 	domain:DomainUser ;
									domain:hasGender 	?gender ;
									domain:hasNationality 	?nation ;
									domain:hasLanguage 	?lang .

							}
		"""^^xsd:string ;
	] .

:SaveMacProblem
	a bt:Write ;
	rdfs:label "Save MAC Problem Instance to AKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
							?existingSbj	rdf:type	mac:MACProblemInstance ;
											mac:hasStatus 	?macStatus ;
											mac:hasId 	?id ;
											mac:hasNumberOfAgents ?numOfAgents ;
											mac:hasParticipants 	?participantId ;
											mac:hasUseCase 	?useCaseTitle ;
											mac:hasNotificationNecessary 	?notificationNecessary ;
											mac:hasTimeout 	?timeout ;
											mac:hasQuorum 	?quorum ;
											mac:hasConversation 	?conversation ;
											?macPred 	?macObj ;
											mac:hasSolution	?grouping ;
											mac:hasSolver ?solver ;
											mac:hasCannotLinkConnections ?cannotConnection ;
											mac:hasMinCsValue ?minCsValue ;
											mac:hasDistanceScore 	?distanceIri ;
											mac:hasReciprocalScore 	?rrsBnode ;
											mac:hasMinPoints    ?minPoints ;
											mac:hasFeasibleCoalitions 	?feasibleCoalition ;
											mac:hasRuntime ?runtime ;
									        mac:hasMinClusterSize   ?minClSize .
							?feasibleCoalition		?fCoalPred 	?fCoalObj .

							?grouping		mac:hasMembers	?group ;
											?groupingPred 	?groupingObj .

							?group 		?groupPred 		?groupObj .

							?conversation 	?predicate 	?obj .
							?rrsBnode 	?rrsPred 	?rrsObj .
								
	
							?cannotConnection 	?clPred 	?clObj .
							?distanceIri 	?distPred 	?distObj .

						}
					WHERE {
							?existingSbj	rdf:type	mac:MACProblemInstance ;
											mac:hasUseCase 	?useCaseTitle ;
											mac:hasStatus 	?macStatus ;
											mac:hasId 	?id ;
											mac:hasNumberOfAgents ?numOfAgents ;
											mac:hasParticipants 	?participantId .

							OPTIONAL {
							?existingSbj	rdf:type	mac:MACProblemInstance ;
											mac:hasId 	?id ;
											mac:hasSolver ?solver .
							}
							OPTIONAL {
							?existingSbj	rdf:type	mac:MACProblemInstance ;
											mac:hasId 	?id ;
											mac:hasRuntime ?runtime .
							}
					#		OPTIONAL {
					#			?existingSbj	mac:hasUseCase 	?useCaseTitle .
					#		}				
					#		OPTIONAL {
					#			?existingSbj	mac:hasNotificationNecessary 	?notificationNecessary .
					#		}
					#		OPTIONAL {
					#			?existingSbj	mac:hasTimeout 	?timeout .
					#		}
					#		OPTIONAL {
					#			?existingSbj	mac:hasQuorum 	?quorum .
					#		}
							OPTIONAL {
								?existingSbj 	rdf:type	mac:MACProblemInstance ;
												mac:hasId 	?id ;
												mac:hasConversation 	?conversation .
								?conversation 	?predicate 	?obj .
							}
							OPTIONAL {
								?existingSbj 	rdf:type	mac:MACProblemInstance ;
												mac:hasId 	?id ;
												?macPred 	?macObj .
								FILTER(?macObj != mac:CurrentMACProblemInstance)
							}

							OPTIONAL{
								?existingSbj	rdf:type	mac:MACProblemInstance ;
												mac:hasId 	?id ;
												mac:hasSolution	?grouping .
								?grouping		mac:hasMembers	?group .
								?grouping 	?groupingPred 	?groupingObj .
								?group 		?groupPred 		?groupObj .
							}
							OPTIONAL{
								?existingSbj	rdf:type	mac:MACProblemInstance ;
												mac:hasId 	?id ;
												mac:hasFeasibleCoalitions	?feasibleCoalition .
								?feasibleCoalition		?fCoalPred 	?fCoalObj .
							}
					#		OPTIONAL{
					#			?existingSbj	mac:hasMinCsValue ?minCsValue .
					#		}
					#		OPTIONAL{
					#			?grouping	mac:hasSolutionOf	?existingSbj ;
					#						mac:hasMembers	?group .
					#		}
					#		OPTIONAL{
					#			?grouping	mac:hasValue	?csValue ;
					#						mac:hasRank		?csRank .
					#		}
							OPTIONAL{
								?existingSbj	rdf:type	mac:MACProblemInstance ;
												mac:hasId 	?id ;
												mac:hasCannotLinkConnections	?cannotConnection .
								?cannotConnection 	?clPred 	?clObj .
							}
							OPTIONAL {
								?existingSbj 	rdf:type	mac:MACProblemInstance ;
												mac:hasId 	?id ;
												mac:hasDistanceScore 	?distanceIri .
								?distanceIri 	?distPred 	?distObj .
							}
							OPTIONAL{
								?existingSbj 	rdf:type	mac:MACProblemInstance ;
												mac:hasId 	?id ;
												mac:hasReciprocalScore 	?rrsBnode .
								?rrsBnode 	?rrsPred 	?rrsObj .
							}
							#OPTIONAL {
							#	?existingSbj 	mac:hasMinPoints    ?minPoints ;
							#		        	mac:hasMinClusterSize   ?minClSize .
							#}
						}
		"""^^xsd:string ;
	] .


:WriteLccResult
	a bt:Write ;
	rdfs:label "Write: LCC Result 2 LAKR" ;
	rdfs:comment "Write LCC Result to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge  ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

					CONSTRUCT {
						?lccSubject	rdf:type	welcome:LCCUseCase, mac:MACProblemInstance ;
									welcome:hasEndTime	?now ;
									mac:hasId	?lccId ;
									mac:hasSolution	?lccSolution ;
									welcome:hasDedicatedAgent	?dAgentId ;
									mac:hasMinCsValue ?minCsValue ;
									welcome:hasStatus	?lccStatus .

						?lccSolution	rdf:type	mac:CSGP-CoalitionStructure ;
										mac:hasValue	?csValue ;
										mac:hasRank		?csRank ;
										mac:hasSolutionOf	?lccSubject ;
										mac:hasMembers	?coalition .

						?coalition	rdf:type	mac:CSGP-Coalition ;
									mac:hasMembers	?memberAgent .
						#?s ?p ?o .

					}
					WHERE {
						# Select LCC Use Case Problem Info
						?lccSubject	rdf:type	welcome:LCCUseCase ;
									welcome:hasStatus	?lccStatus ;
									mac:hasId	?lccId ;
									welcome:hasDedicatedAgent	?dAgentId .

						OPTIONAL {
							?lccSubject	mac:hasSolution	?lccSolution ;
										mac:hasMinCsValue ?minCsValue .
							# Select LCC Use Case Solutions
							?lccSolution	rdf:type	mac:CSGP-CoalitionStructure ;
											mac:hasValue	?csValue ;
											mac:hasRank		?csRank ;
											mac:hasSolutionOf	?lccSubject ;
											mac:hasMembers	?coalition .

						#	?coalition	rdf:type	mac:CSGP-Coalition ;
						#				mac:hasMembers	?memberAgent .
						}
						#?s ?p ?o .
						BIND(NOW() AS ?now)
					}


		"""^^xsd:string ;
	] .


:SaveRequest
	a bt:Write ;
	rdfs:label "Write Request of Initiator to AKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasInitiator	?thisAgentId ;
									mac:hasConversationId	?conversationId ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasContent	?requestContent .

							?requestContent	?predicate	?object .
						}
					WHERE {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasConversationId	?conversationId ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout .

							OPTIONAL {
								?bnode 	mac:hasContent	?requestContent .
								?requestContent	?predicate	?object .
							}
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							}
		"""^^xsd:string ;
	] .

				
:SaveAllToAKB
	a bt:Write ;
	rdfs:label "Write All to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
						
					}
					WHERE {
						?s ?p ?o .
					}
		"""^^xsd:string ;
	] .

				
:SaveResponse
	a bt:Write ;
	rdfs:label "Save Participant Response to AKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?bnode	rdf:type	mac:RequestResponse, ?responseType ;
								mac:hasParticipants	?senderId ;
								mac:hasMacProblemId 	?macId ;
								mac:hasUseCase 	?useCase ;
								mac:hasId	?conversationId .
						?bnode	mac:hasContent	?resultContent .
						?resultContent	?predicate	?object .
						
					}
					WHERE {

						?bnode	rdf:type	mac:RequestResponse, ?responseType ;
								mac:hasParticipants	?senderId ;
								mac:hasMacProblemId 	?macId ;
								mac:hasId	?conversationId .
						FILTER(?responseType != mac:RequestResponse)

						OPTIONAL {
							?bnode	mac:hasContent	?resultContent .
							?resultContent	?predicate	?object .
						}
						OPTIONAL {
							?bnode	rdf:type	mac:RequestResponse;
									mac:hasUseCase	?useCase .
						}
					}
		"""^^xsd:string ;
	] .


:WriteUidToAKB
	a bt:Write ;
	rdfs:label "Write Goal ID to AKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {					
						?bnode	rdf:type	ajan:GoalStatus ;
								ajan:hasGoalId	?goalId ? 
								ajan:hasStatus	?status .
					}
					WHERE {
						?bnode	rdf:type	ajan:GoalStatus ;
								ajan:hasGoalId	?goalId ? 
								ajan:hasStatus	?status .
					}
		"""^^xsd:string ;
	] .


:WriteParticipantAddressesToEKB
	a bt:Write ;
	rdfs:label "Write Addresses of participants from LAR to EKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:LocalAgentsKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?agentUri	ajan:agentId	?agentId ;
									ajan:hasAddress	?address .
					}
					WHERE {
						?agentUri	rdf:type	ajan:Agent ;
									ajan:agentId	?agentId ;
									ajan:hasAddress	?address .
					}
		"""^^xsd:string ;
	] .

:ClearLSR
	a bt:Update ;
	rdfs:label "Clear LSR" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:LocalServicesKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>

					DELETE{
						?s ?p ?o .
					}
					WHERE{
						?s ?p ?o .
					}
					"""^^xsd:string ;
		] .

:WriteSomethingToLSR
	a bt:Write ;
	rdfs:label "Write something to LSR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:LocalServicesKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>		
					CONSTRUCT {
						ajan:Subject 	ajan:predicate 	ajan:object .
					}
					WHERE {
						?s ?p ?o .
					}
		"""^^xsd:string ;
	] .

:WriteEverythingToLSR
	a bt:Write ;
	rdfs:label "Write everything to LSR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:LocalServicesKnowledge ;
		bt:sparql """
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}
		"""^^xsd:string ;
	] .

:WriteEverythingToAKB
	a bt:Write ;
	rdfs:label "Write everything to AKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}
		"""^^xsd:string ;
	] .



:GetAgentPreferences
	a bt:Write ;
	rdfs:label "Write agent preferences to EKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>	
				
				CONSTRUCT  {
					?newNode	rdf:type	mac:AgentPreferences ;
								domain:hasGenderPreference 	?genderPref ;
								domain:hasNationPreference 	?nationPref ;
								domain:hasGenderPrefWeight 	?genPrefWeight ;
								domain:hasNationPrefWeight 	?natPrefWeight .
				}
				WHERE {
					?bnode 	rdf:type 	domain:DomainUser ;
							domain:hasGenderPreference 	?genderPref ;
							domain:hasNationPreference 	?nationPref ;
							domain:hasGenderPrefWeight 	?genPrefWeight ;
							domain:hasNationPrefWeight 	?natPrefWeight .
							
					{
						BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
						BIND( IRI(CONCAT(STR(mac:AgentPreferences), STR(?uniqueId))) AS ?newNode )
					}

				} """^^xsd:string ;
	] .




:ComputeCsgpUtilityValues
	a bt:Update ;
	rdfs:label "Compute CSGP Utility Values" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>	

                INSERT {
                    ?feasibleCoalitionNode  mac:hasUtilityValue ?uVbnode .
                    ?uVbnode    rdf:type    mac:UtilityValue ;
                                mac:isComputedBy   ?thisAgentId ;
                                mac:hasValue        ?ttlV .
                }
                WHERE {
					{
						SELECT DISTINCT ?feasibleCoalitionNode ?thisAgentId (SUM(?uValue) AS ?ttlV)
						WHERE {
							# get This agent
							?agent	rdf:type	ajan:Agent, ajan:ThisAgent ;
									ajan:agentId	 ?thisAgentId .

							# get Feasible Coalitions which are sent by Dedicated agent
							?macInstance	rdf:type	 mac:MACProblemInstance ;
											mac:hasId	?macId ;
											mac:hasFeasibleCoalitions	 ?feasibleCoalitionNode .

							# get the coalition information
							?feasibleCoalitionNode	mac:hasCommonGender	?commonGender ;
													mac:hasCommonNation	?commonNation .

							# make sure that coalition contains This agent
							FILTER EXISTS { ?feasibleCoalitionNode  mac:hasMembers	?thisAgentId . }

							# get preferences of This agent
							?prefsSbj	rdf:type	mac:AgentPreferences ;
										domain:hasGenderPreference 	?genderPref ;
										domain:hasNationPreference 	?nationPref ;
										domain:hasGenderPrefWeight 	?genPrefWeight ;
										domain:hasNationPrefWeight 	?natPrefWeight .

							# get gender and nation of This agent
							?resultSbj	rdf:type 	mac:Conversation ;
										mac:hasMacProblemId 	?macId ;
										mac:hasContent	?resultContent .
								
							?resultContent	rdf:type 	mac:AgentProfileInfo ;
											mac:belongsTo 	?thisAgentId ;
											domain:hasGender 	?gender ;
											domain:hasNationality 	?nation .

							BIND(IF(LCASE(?genderPref) = "dont mind" || (LCASE(?genderPref) = "same" && ?gender = ?commonGender) || (LCASE(?genderPref) = "mixed" && LCASE(?commonGender) = "mixed"), xsd:float(?genPrefWeight), -xsd:float(?genPrefWeight)) AS ?genderUValue)
							BIND(IF(LCASE(?nationPref) = "dont mind" || (LCASE(?nationPref) = "same" && ?nation = ?commonNation) || (LCASE(?nationPref) = "mixed" && LCASE(?commonNation) = "mixed"), xsd:float(?natPrefWeight), -xsd:float(?natPrefWeight)) AS ?nationUValue)

							BIND((?genderUValue + ?nationUValue) AS ?uValue)

						} GROUP BY ?feasibleCoalitionNode ?thisAgentId
					}
					BIND(BNODE() AS ?uVbnode)
                }
					"""^^xsd:string ;
		] .



:ComputeCoalitionValues
	a bt:Update ;
	rdfs:label "Compute Coalition Values" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				
				INSERT {
					?feasibleCoalition mac:hasValue ?sumOfUtilities .
				}
				WHERE{
					{
						SELECT ?feasibleCoalition (SUM(?utilityValue) AS ?sumOfUtilities)
						WHERE {
							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasFeasibleCoalitions	?feasibleCoalition .

							?feasibleCoalition	rdf:type	mac:CSGP-Coalition .
							OPTIONAL {
								?feasibleCoalition	mac:hasUtilityValue	?utilityValueNode .
								?utilityValueNode	rdf:type	mac:UtilityValue ;
													mac:hasValue	?utilityValue .
							}
						} GROUP BY ?feasibleCoalition
					}
				}
					"""^^xsd:string ;
		] .



:WriteAgentProfilesToEKB
	a bt:Write ;
	rdfs:label "Write All Received Agent Profiles to EKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					CONSTRUCT {
						?bnode	rdf:type mac:RequestResult ;
								mac:hasId	?convId ;
								mac:hasMacProblemId 	?macId ;
								mac:hasContent	?resultContent .
								
						?resultContent	rdf:type 	mac:AgentProfileInfo ;
										?predicate	?object .
					}
					WHERE {
						?bnode	rdf:type mac:RequestResult ;
								mac:hasId	?convId ;
								mac:hasMacProblemId 	?macId ;
								mac:hasContent	?resultContent .

						?resultContent	rdf:type 	mac:AgentProfileInfo ;
										?predicate	?object .
					}
		"""^^xsd:string ;
	] .


:GetResponses
	a bt:Write ;
	rdfs:label "Write Responses of Participants to EKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?bnode	rdf:type mac:RequestResponse, ?responseType ;
								mac:hasId	?convId ;
								mac:hasParticipants		?senderId .
						
						?bnode	mac:hasContent	?resultContent .
						?resultContent	?predicate	?object .
					}
					WHERE {

						?bnode	rdf:type 	mac:RequestResponse, ?responseType ;
								mac:hasId	?convId ;
								mac:hasParticipants		?senderId .
						FILTER(?responseType = mac:RequestResult || ?responseType = mac:RequestAgreement || ?responseType = mac:RequestRefusal)

						#OPTIONAL {
						#	?bnode	mac:hasContent	?resultContent .
						#	?resultContent	?predicate	?object .
						#}
					}
		"""^^xsd:string ;
	] .

:MessageToParticipants
	a bt:Broadcast ;
	rdfs:label "Send Request Messages to Participants"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """

						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasInitiator	?thisAgentId ;
									mac:hasId	?conversationId ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasUseCase 	?useCaseTitle ;
									mac:hasMacProblemId 	?macId ;
									mac:hasContent	?requestContent .
							?requestContent	?predicate	?object .
						}
						WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasId	?conversationId ;
									mac:hasUseCase 	?useCaseTitle ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasMacProblemId 	?macId .
							OPTIONAL {
								?bnode 	mac:hasContent	?requestContent .
								?requestContent	?predicate	?object .
							}
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .
							}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasParticipants	?participantId ;
									mac:hasReceiverCapability	?capability .

							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							FILTER(?participantId != ?thisAgentId)
							?partAgentUri	ajan:agentId	?participantId ;
											ajan:hasAddress	?address .
							BIND(CONCAT(?address, "?capability=", ?capability) AS ?requestURI)
					}
					"""^^xsd:string
	] .

:LOGStartedCoordination
	a bt:Message ;
	rdfs:label "LOG-Started Coordination"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasUseCase 	?useCase .



							OPTIONAL{
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasId 	?macId ;
												mac:hasTimeout 	?timeout ;
												mac:hasQuorum 	?quorum .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}						
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?macInstance 	rdf:type 	mac:MACProblemInstance ;
													mac:hasParticipants 	?participantId .
								}
							}
							BIND(CONCAT("Started Coordination\\nMac ID: ", STR(?macId), "\\nParticipants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nQuorum: ", STR(?quorum)) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGSentRequestToParticipants
	a bt:Message ;
	rdfs:label "LOG-Sent Coordination Request to Participants"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}
							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Sent Coordination Request To Participants\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)

							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:SendLogToMajan
	a bt:Message ;
	rdfs:label "Send Log to MAJAN"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}
							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}


							BIND(CONCAT("Collect Clustering Distances BT Started\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)


							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGStartedComputeCoalitions
	a bt:Message ;
	rdfs:label "LOG-Compute Coalitions BT Started"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}
							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Compute CSGP Coalitions BT Started\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)


							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGStartedCollectClustering
	a bt:Message ;
	rdfs:label "LOG-Collect Clustering Distances BT Started"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}
							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Collect Clustering Distances BT Started\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)


							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .
:LOGSentUtilitiesRequestToParticipants
	a bt:Message ;
	rdfs:label "LOG-Sent Utilities Request to Participants"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}
							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Sent Compute Utilities Request To Participants\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)


							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGSentClusteringDistancesRequestToParticipants
	a bt:Message ;
	rdfs:label "LOG-Sent Clustering Distances to Participants"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}
							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Sent Clustering Distances Request To Participants\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)


							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGSentProfileInfoRequestToParticipants
	a bt:Message ;
	rdfs:label "LOG-Sent Profile Info Request to Participants"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}

							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Sent Profile Info Request To Participants\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)

							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGReceivedAgentProfileInfoRequest	
	a bt:Message ;
	rdfs:label "LOG-Received Agent Profile Info Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}

							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Received Agent Profile Info Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGReceivedUtilitiesRequest
	a bt:Message ;
	rdfs:label "LOG-Received Utilities Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}

							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Received UTILITIES Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGReceivedClusteringDistancesRequest
	a bt:Message ;
	rdfs:label "LOG-Received Coordination Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}

							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Received Clustering Distances Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGReceivedCoordinationRequest
	a bt:Message ;
	rdfs:label "LOG-Received Coordination Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .
							#OPTIONAL {
							#	?conversation 	rdf:type 	mac:Conversation ;
							#					mac:hasContent 	?content .
							#	?content 	rdf:type 	mac:MACProblemInstance ;
							#				mac:hasUseCase 	?useCase .
							#}
							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}

							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Received Coordination Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGAgreedToRequest
	a bt:Message ;
	rdfs:label "LOG-Agreed to Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .
							#OPTIONAL {
							#	?conversation 	rdf:type 	mac:Conversation ;
							#					mac:hasContent 	?content .
							#	?content 	rdf:type 	mac:MACProblemInstance ;
							#				mac:hasUseCase 	?useCase .
							#}
							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
											#	mac:hasTimeout 	?timeout ;
											#	mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}


							BIND(CONCAT("Sent AGREED to the Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nMAC ID: ", ?macId) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .


:LOGRefusedRequest
	a bt:Message ;
	rdfs:label "LOG-Refused Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .
							#OPTIONAL {
							#	?conversation 	rdf:type 	mac:Conversation ;
							#					mac:hasContent 	?content .
							#	?content 	rdf:type 	mac:MACProblemInstance ;
							#				mac:hasUseCase 	?useCase .
							#}
							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
								#				mac:hasTimeout 	?timeout ;
								#				mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}

							BIND(CONCAT("Sent REFUSED the Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nMAC ID: ", ?macId) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGClusteringDistancesResult
a bt:Message ;
	rdfs:label "LOG-Refused Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}


							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}


							BIND(CONCAT("Sent RESULT of the Clustering Distances Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGSolveCsgp
	a bt:Message ;
	rdfs:label "LOG-Start Solve CSGP"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	

							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}


							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}


							BIND(CONCAT("Starting to Solve CSGP\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .


:LOGSolveClustering
	a bt:Message ;
	rdfs:label "LOG-Start Solve Clustering"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}
							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}
							BIND(CONCAT("Starting to Solve Clustering\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)
							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .


:LOGFinalizeCoordination
	a bt:Message ;
	rdfs:label "LOG-Finalize Coordination"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasStatus 	?macStatus ;
											mac:hasUseCase 	?useCase .

							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}

	
							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	

							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}


							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}
							{
								SELECT ?groupingResultStr
								WHERE {
									{
										SELECT (GROUP_CONCAT(?groupingStr ; separator="], [") AS ?finalStr)
										WHERE {
											{
												SELECT ?grouping (GROUP_CONCAT(?groupString ; separator=", ") AS ?groupingStr)
												WHERE {
													{
														SELECT ?group ?grouping (GROUP_CONCAT(?memberAgentId ; separator=", ") AS ?groupStr)
														WHERE{
															?macInstance	rdf:type	mac:MACProblemInstance ;
																			mac:hasId 	?id ;
																			mac:hasSolution	?grouping .
															?grouping		mac:hasMembers	?group .
															?group 		mac:hasMembers 		?memberAgentId .
														} GROUP BY ?group ?grouping 
													}
													BIND(CONCAT("[", STR(?groupStr), "]") AS ?groupString)
												}GROUP BY ?grouping
											}
										}
									}
									BIND(CONCAT("[", STR(?finalStr), "]") AS ?groupingResultStr)
								}
							}


							BIND(CONCAT("Finalize Coordination\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nMAC Status: ", ?macStatus, "\\nContent IRIs: ", ?contentIris, "\\nSolution: ", ?groupingResultStr) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGCsgpSolved
	a bt:Message ;
	rdfs:label "LOG-CSGP Solved"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	

							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}


							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}
							{
								SELECT ?groupingResultStr
								WHERE {
									{
										SELECT (GROUP_CONCAT(?groupingStr ; separator="], [") AS ?finalStr)
										WHERE {
											{
												SELECT ?grouping (GROUP_CONCAT(?groupString ; separator=", ") AS ?groupingStr)
												WHERE {
													{
														SELECT ?group ?grouping (GROUP_CONCAT(?memberAgentId ; separator=", ") AS ?groupStr)
														WHERE{
															?macInstance	rdf:type	mac:MACProblemInstance ;
																			mac:hasId 	?id ;
																			mac:hasSolution	?grouping .
															?grouping		mac:hasMembers	?group .
															?group 		mac:hasMembers 		?memberAgentId .
														} GROUP BY ?group ?grouping 
													}
													BIND(CONCAT("[", STR(?groupStr), "]") AS ?groupString)
												}GROUP BY ?grouping
											}
										}
									}
									BIND(CONCAT("[", STR(?finalStr), "]") AS ?groupingResultStr)
								}
							}


							BIND(CONCAT("CSGP solved\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris, "\\n Solution: ", ?groupingResultStr) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGClusteringSolved
	a bt:Message ;
	rdfs:label "LOG-Clustering Solved"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	

							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}


							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}
							{
								SELECT ?groupingResultStr
								WHERE {
									{
										SELECT (GROUP_CONCAT(?groupingStr ; separator="], [") AS ?finalStr)
										WHERE {
											{
												SELECT ?grouping (GROUP_CONCAT(?groupString ; separator=", ") AS ?groupingStr)
												WHERE {
													{
														SELECT ?group ?grouping (GROUP_CONCAT(?memberAgentId ; separator=", ") AS ?groupStr)
														WHERE{
															?macInstance	rdf:type	mac:MACProblemInstance ;
																			mac:hasId 	?id ;
																			mac:hasSolution	?grouping .
															?grouping		mac:hasMembers	?group .
															?group 		mac:hasMembers 		?memberAgentId .
														} GROUP BY ?group ?grouping 
													}
													BIND(CONCAT("[", STR(?groupStr), "]") AS ?groupString)
												}GROUP BY ?grouping
											}
										}
									}
									BIND(CONCAT("[", STR(?finalStr), "]") AS ?groupingResultStr)
								}
							}


							BIND(CONCAT("Clustering solved\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris, "\\n Solution: ", ?groupingResultStr) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGResultOfRequest
	a bt:Message ;
	rdfs:label "LOG-Sent Result of Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .
							#OPTIONAL {
							#	?conversation 	rdf:type 	mac:Conversation ;
							#					mac:hasContent 	?content .
							#	?content 	rdf:type 	mac:MACProblemInstance ;
							#				mac:hasUseCase 	?useCase .
							#}
							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}


							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}


							BIND(CONCAT("Sent RESULT of the Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .


:LOGSavedRequestResponse
	a bt:Message ;
	rdfs:label "LOG-Save Response of Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							OPTIONAL{
								?response 	rdf:type 	mac:RequestResponse ;
											mac:hasId 	?convId ;
											mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL{
								?response 	rdf:type 	mac:RequestResponse ;
											mac:hasUseCase 	?useCase .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}


							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}


							BIND(CONCAT("Save RESPONSE of the Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGCurrentEkb
	a bt:Message ;
	rdfs:label "LOG-Current EKB"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							BIND(CONCAT("Current EKB\\nConversation ID: ", STR(?convId), "\\nTimeout: ",STR(?timeout), "\\nQuorum: ", STR(?quorum), "\\nMAC ID: ", ?macId) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGQuorumReached
	a bt:Message ;
	rdfs:label "LOG-Quorum Reached"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							BIND(CONCAT("Quorum Reached\\nConversation ID: ", STR(?convId), "\\nTimeout: ",STR(?timeout), "\\nQuorum: ", STR(?quorum), "\\nMAC ID: ", ?macId) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .


:LOGTimeoutReached
	a bt:Message ;
	rdfs:label "LOG-Timeout Reached"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							BIND(CONCAT("Timeout Reached\\nConversation ID: ", STR(?convId), "\\nTimeout: ",STR(?timeout), "\\nQuorum: ", STR(?quorum), "\\nMAC ID: ", ?macId) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:AgreedMessageToInitiator
	a bt:Message ;
	rdfs:label "Send Participant agrees"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newNode	rdf:type mac:RequestAgreement, mac:RequestResponse ;
										mac:hasUseCase 	?useCase ;
										mac:hasId	?conversationId ;
										mac:hasMacProblemId 	?macId ;
										mac:hasParticipants		?thisAgentId .
						}
						WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasUseCase 	?useCase ;
									mac:hasMacProblemId 	?macId ;
									mac:hasId	?conversationId .

							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .
							BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
							BIND( IRI(CONCAT(STR(mac:RequestAgreement), STR(?uniqueId))) AS ?newNode )
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasInitiator	?initiatorId ;
									mac:hasReceiverCapability ?initiatorCapability.

							?initAgentUri	ajan:agentId	?initAgentId ;
											ajan:hasAddress	?address .
							BIND(CONCAT(?address, "?capability=", ?initiatorCapability) AS ?requestURI)
					}
					"""^^xsd:string
	] .

:RefusedMessageToInitiator
	a bt:Message ;
	rdfs:label "Send Participant refuses"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {

							?newNode	rdf:type mac:RequestRefusal, mac:RequestResponse ;
										mac:hasConversationId	?conversationId ;
										mac:hasUseCase 	?useCase ;
										mac:hasMacProblemId 	?macId ;
										mac:hasParticipants		?thisAgentId .
						}
						WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasUseCase 	?useCase ;
									mac:hasMacProblemId 	?macId ;
									mac:hasId	?conversationId .

							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .
							BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
							BIND( IRI(CONCAT(STR(mac:RequestRefusal), STR(?uniqueId))) AS ?newNode )
							}


							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasInitiator	?initiatorId ;
									mac:hasReceiverCapability ?initiatorCapability.

							?initAgentUri	rdf:type	ajan:Agent ;
											ajan:agentId	?initAgentId ;
											ajan:hasAddress	?address .
							BIND(CONCAT(?address, "?capability=", ?initiatorCapability) AS ?requestURI)

					}"""^^xsd:string
	] .



:SendResultMessage
	a bt:Broadcast ;
	rdfs:label "Send Participant Result"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newNode	rdf:type	mac:RequestResult, mac:RequestResponse ;
										mac:hasId	?convId ;
										mac:hasParticipants		?thisAgentId ;
										mac:hasMacProblemId 	?macId ;
										mac:hasUseCase 	?useCase ;
										mac:hasContent	?resultContent .
							?resultContent	?predicate	?object .
						}
						WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasMacProblemId 	?macId ;
									mac:hasUseCase 	?useCase ;
									mac:hasId	?convId ;
									mac:hasContent	?resultContent .
							?resultContent	?predicate	?object .
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .
							{			
								BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
								BIND( IRI(CONCAT(STR(mac:RequestResult), STR(?uniqueId))) AS ?newNode )
							}}

							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasReceiver	?receiverId ;
									mac:hasReceiverCapability ?receiverCapability.

							?receiverAgentIRI	ajan:agentId	?receiverId ;
												ajan:hasAddress	?address .
							BIND(CONCAT(?address, "?capability=", ?receiverCapability) AS ?requestURI)
					}
					"""^^xsd:string
	] .

:HandlePartRequestGoal
	a bt:HandleEvent ;
	rdfs:label "GoalHandler: Participant Handle Request Goal" ;
	bt:event agents:ParticipantHandleRequestGoal ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					#	_:bnode	rdf:type	ajan:GoalStatus ;
					#			ajan:hasStatus	"Running" .
					}
					WHERE {
						?s ?p ?o .
						}
					"""^^xsd:string ;
				] .

:HandleInitReceiveReplyGoal
	a bt:HandleEvent ;
	rdfs:label "GoalHandler: Initiator Receive Reply Goal" ;
	bt:event agents:InitiatorReceiveReplyGoal ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
						#_:bnode	rdf:type	ajan:GoalStatus ;
						#		ajan:hasStatus	"Running" .
					}
					WHERE {
						?s ?p ?o .
						}
					"""^^xsd:string ;
				] .

:HandlePartSendResultGoal
	a bt:HandleEvent ;
	rdfs:label "GoalHandler: Participant Send Result Goal" ;
	bt:event agents:ParticipantSendResultGoal ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					#	_:bnode	rdf:type	ajan:GoalStatus ;
					#			ajan:hasStatus	"Running" .
					}
					WHERE {
						?s ?p ?o .
						}
					"""^^xsd:string ;
				] .
# ----------- MAJAN BTs -----------


#------------MAJAN Stuff----------------------

#-------------LCC Protocol BTs --------------------------

:StartLccAssessmentBt
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Start LCC Assessment Behavior Tree" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
				a bt:Sequence ;
				bt:hasChildren (
						:HandleStartLccAssessmentEvent
						:MessageToAppToStartLccAssessment
						:SaveLccAssessmentConfig
						:ClearEKB
						)
					]
				] .

:LccAssessmentCompleteBt
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "LCC Assessment Completed Behavior Tree" ;
	bt:hasChild [
				a bt:Sequence ;
				bt:hasChildren (
						:HandleLccAssessmentCompleteEvent
						:SaveLccAssessmentScores
						:ComputeLccCpl
						:WriteLccAttributesToExec
						:WriteThisAgentIdToEKB
						:MessageToTpToSubmitLccAssessmentInfo
						)
				] .

:SubmitFinalLccResultBt
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Submit LCC Final Result Behavior Tree" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
				a bt:Sequence ;
				bt:hasChildren (
						:HandleLccFinalResultEvent
						:SaveLccFinalResult
						:ClearEKB
						)
					]
				] .


:StartLccProcessBt
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "LCC Protocol Behavior Tree" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
				a bt:Sequence ;
				bt:hasChildren (
						:HandleStartLccProcessEvent
						:WriteThisAgentIdToEKB
						#:WriteRootAddress2Exec
						:UpdateLccProblem
						[
							a bt:Priority ;
							bt:hasChildren (
									[
										a bt:Sequence ;
										bt:hasChildren (
												:ConditionDedicatedAgent
												:ProduceLccDedicatedAgentBehaviorEvent
														)
									]
									[
										a bt:Sequence ;
										bt:hasChildren (
												:WriteLccPersonalInfo2Exec
												:WriteAgentAddressesToEKB
												:Message2DedicatedLccPersonalInfo
												:InsertLccPersonalInfo2LakrWithLccId
														)
									]
									[
										a bt:Sequence ;
										bt:hasChildren (
												:ClearEKB
												:JustFail
														)
									]
										)
						]
						:WriteLccProblem2Lakr
						:ClearEKB
							)
					]
				] .

:LccDedicatedAgentBt
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "LCC Dedicated Agent Behavior Tree" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
					a bt:Sequence ;
					bt:hasChildren (
							:HandleLccDedicatedAgentEvent
							[
								a bt:Priority ;
								bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
													:WriteLccPersonalInfo2Exec
													:InsertLccPersonalInfo2LakrWithLccId
													:Wait4LccPersonalInfo
													:WriteCompleteLccPersonalInfo2Exec
													[
														a bt:Priority ;
														bt:hasChildren (
																:ConditionAllReturnedLccPersonalInfo
													#			[
													#				a bt:Sequence ;
													#				bt:hasChildren (
													#						:MessageRequestLccPersonalInfo
													#						:Wait4LccPersonalInfo
													#						:ConditionAllReturnedLccPersonalInfo
													#								)
													#			]
																		)
													]
													:ProduceComputeLccCoalitionsEvent
													:ClearEKB
															)
										]
										:ProduceLccFailedEvent
												)
							]
									)
						]
				] .


:ReceiveLccPersonalInfoBt
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Receive LCC Personal Info Behavior Tree" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
				a bt:Sequence ;
				bt:hasChildren (
						:HandleReceiveLccPersonalInfoEvent
						:InsertLccPersonalInfoOfSender2Lakr
						:ClearEKB
								)
					]
				] .

:ComputeLccCoalitionStructuresBt
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Compute LCC Coalition Structures Behavior Tree" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
				a bt:Sequence ;
				bt:hasChildren (
						:HandleComputeCoalitionsEvent
						[
							a bt:Priority ;
							bt:hasChildren (
									[
										a bt:Sequence ;
										bt:hasChildren (
												#:ComputeLccCannotLinkConnections
												:GenerateFeasibleCoalitions4Lcc
												:ComputeLccCoalitionInfo_addingAttendanceInfo
												[
													a bt:Priority ;
													bt:hasChildren (
														:RemoveAttendanceViolatedCoalitions
														:SimpleSuccess
													)
												]
												:UpdateLccCoalitionInfoWrt
											#	[
											#		a bt:Priority ;
											#		bt:hasChildren (
															:ConditionAnyFeasibleCoalitionExists
											#				:ProduceFinalizeLccEvent
											#						)
											#	]
												:WriteAgentAddressesToEKB
												:BroadcastCoalitions2ReceiveUtilities
												:WriteLccPreferences2Exec
												:ComputeSdOfLccCoalitions
												:ComputeUtilityValuesInLccWrite
												:InsertLccUtilities2Lakr
												:Wait4UtilityValues
												:ComputeLccCoalitionValues
												:ProduceSolveLccEvent
												:ClearEKB
														)
									]
									:ProduceLccFailedEvent
											)
						]
								)
					]
				] .

:ComputeLccUtilityValuesBt
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Compute LCC Utility Values Behavior Tree" ;
	bt:hasChild	[
		a bt:UntilFail ;
		bt:hasChild [
				a bt:Sequence ;
				bt:hasChildren (
						:HandleComputeLccUtilitiesEvent
						:WriteLccPreferences2Exec
						:WriteThisAgentIdToEKB
						:ComputeUtilityValuesInLccWrite
						#:WriteRootAddress2Exec
						:WriteAgentAddressesToEKB
						:MessageLccUtilities2Dedicated
						:InsertLccUtilities2Lakr
						:ClearEKB
								)
					]
				].

:ReceiveLccUtilityValuesBt
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Receive LCC Utility Values BT" ;
	bt:hasChild [
#		a bt:Sequence ;
#		bt:hasChildren (
#				[
					a bt:UntilFail ;
					bt:hasChild [
							a bt:Sequence ;
							bt:hasChildren (
								:HandleReceiveLccUtilitiesEvent
						#		:ReplaceLccProcessType
						#		:WriteAllIncompleteLccProcess2Ek
						#		:RemoveUnmatchingLccProcesses
						#		:ConditionAgentInAnyMAC
						#		:RetrieveLccProcessInfoSbt
						#		:WriteLccUtilitiesOfSender2Lakr
								:InsertLccUtilitiesOfSender2Lakr
								:ClearEKB
											)

								]
#				]
#						)
				] .




:SolveLccBt
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Solve LCC Behavior Tree" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
				a bt:Sequence ;
				bt:hasChildren (
						:HandleSolveLccEvent
						[
							a bt:Priority ;
							bt:hasChildren (
									[
										a bt:Sequence ;
										bt:hasChildren (
												:WriteThisAgentIdToEKB
												:WriteLCCCoalitionValues2EKB
												#:JustFail
												:SolveLcc_BOSS
												:NormalizeCsValues
												:WriteAgentAddressesToEKB
												[
													a bt:Priority ;
													bt:hasChildren (
															:BroadcastLccResult
															:SimpleSuccess
													)
												]
												:Message2TeacherLccResult
												:ProduceFinalizeLccEvent
												:ClearEKB
														)
									]
									:ProduceLccFailedEvent
											)
						]
							)
					]
				] .

:FinalizeLccProcessBt
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Finalize LCC Process Behavior Tree" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
				a bt:Sequence ;
				bt:hasChildren (
						:HandleFinalizeLccEvent
						:WriteLccResult
						:ComputeLccRuntime
						[
							a bt:Priority ;
							bt:hasChildren (
									:ConditionAgentInAnyCoordination
									:Message2WPMUpdateStatus2Active
							)
						]
								)
					]
				] .

:LccFailureBt
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "LCC Failure Behavior Tree" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
			a bt:Sequence ;
			bt:hasChildren (
						:HandleLccFailedEvent
						[
							a bt:Priority ;
							bt:hasChildren (
									:Message2TeacherLccFailed
									:SimpleSuccess
							)
						]
						[
							a bt:Priority ;
							bt:hasChildren (
									:BroadcastLccFailed
									:SimpleSuccess
							)
						]
						:ProduceFinalizeLccEvent
							)
					]
				] .



#-------------LCC Protocol BTs END--------------------------
#-------------LCC Protocol BT Nodes START--------------------------
:HandleStartLccAssessmentEvent
	a bt:HandleQueueEvent ;
	rdfs:label "EventHandler: start LCC Assessment Event" ;
	bt:event agents:StartLccAssessmentEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						#?s ?p ?o .

						?subjectIri    rdf:type    welcome:LCCLesson ;
											welcome:hasLessonId		?lessonId ;
											welcome:hasAssessmentDeadline     ?assessmentDeadline .
					}
					WHERE {
						#?s ?p ?o .
						?subjectIri	rdf:type    welcome:LCCLesson ;
								welcome:hasLessonId		?lessonId ;
								welcome:hasAssessmentDeadline     ?assessmentDeadline .
					}"""^^xsd:string ;
				] .
:SimpleSuccess
	a bt:Success ;
	rdfs:label "Just Success Node"^^xsd:string .


:MessageToAppToStartLccAssessment
	a bt:Message ;
	rdfs:label "Message: Start LCC Assessment"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
					{
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
  					} UNION {
						VALUES ?hdrName {"X-Msg-Type"}
						VALUES ?fieldValue {"Assessment"}
					}						
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "application/ld+json"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "application/ld+json"
				]


		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
						?subjectIri    rdf:type    welcome:LCCLesson ;
											welcome:hasLessonId		?lessonId ;
											welcome:hasAssessmentDeadline     ?assessmentDeadline .
						}
						WHERE {
						?subjectIri    rdf:type    welcome:LCCLesson ;
											welcome:hasLessonId		?lessonId ;
											welcome:hasAssessmentDeadline     ?assessmentDeadline .
							}
				"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
						# LINE TO SEND TO DUMMY ENDPOINT
						#VALUES ?requestURI { "http://localhost:8092/app/inform"}
						
						# LINES TO SEND TO ACTUAL DISPATCHER Endpoint
						welcome:dispatcher welcome:hasAddress ?partialAddress .
						BIND(CONCAT(STR(?partialAddress), "/welcome/integration/workflow/dispatcher/agentNotification") AS ?requestURI )

					}"""^^xsd:string
	] .

:SaveLccAssessmentConfig
	a bt:Write ;
	rdfs:label "Write: LCC Assessment Config info to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					CONSTRUCT {
						?subjectIri    rdf:type    welcome:LCCLesson ;
											welcome:hasLessonId		?lessonId ;
											welcome:hasAssessmentDeadline     ?assessmentDeadline .
					}
					WHERE {
						?subjectIri    rdf:type    welcome:LCCLesson ;
											welcome:hasLessonId		?lessonId ;
											welcome:hasAssessmentDeadline     ?assessmentDeadline .
					}


		"""^^xsd:string ;
	] .


:HandleLccAssessmentCompleteEvent
	a bt:HandleEvent ;
	rdfs:label "EventHandler: LCC Assessment Complete Event" ;
	bt:event agents:LccAssessmentCompleteEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						#?s ?p ?o .
						?subjectIri	rdf:type	welcome:LCCLesson ;
								welcome:hasLessonId    ?lessonId ;
                    	        welcome:hasAssessmentScore  ?assessmentScore ;
                    	        welcome:hasReadingScore     ?readingScore ;
                                welcome:hasWritingScore     ?writingScore ;
                                welcome:hasListeningScore   ?listeningScore ;
                                welcome:hasVocabularyScore  ?vocabularyScore .
					}
					WHERE {
						#?s ?p ?o .
						?subjectIri	rdf:type	welcome:LCCLesson ;
								welcome:hasLessonId    ?lessonId ;
                    	        welcome:hasAssessmentScore  ?assessmentScore ;
                    	        welcome:hasReadingScore     ?readingScore ;
                                welcome:hasWritingScore     ?writingScore ;
                                welcome:hasListeningScore   ?listeningScore ;
                                welcome:hasVocabularyScore  ?vocabularyScore .
					}"""^^xsd:string ;
				] .

:SaveLccAssessmentScores
	a bt:Write ;
	rdfs:label "Write: LCC Assessment Scores to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					CONSTRUCT {
						?subjectIri	rdf:type	welcome:LCCLesson ;
								welcome:hasLessonId    ?lessonId ;
                    	        welcome:hasAssessmentScore  ?assessmentScore ;
                    	        welcome:hasReadingScore     ?readingScore ;
                                welcome:hasWritingScore     ?writingScore ;
                                welcome:hasListeningScore   ?listeningScore ;
                                welcome:hasVocabularyScore  ?vocabularyScore .
					}
					WHERE {
						?subjectIri	rdf:type	welcome:LCCLesson ;
								welcome:hasLessonId    ?lessonId ;
                    	        welcome:hasAssessmentScore  ?assessmentScore ;
                    	        welcome:hasReadingScore     ?readingScore ;
                                welcome:hasWritingScore     ?writingScore ;
                                welcome:hasListeningScore   ?listeningScore ;
                                welcome:hasVocabularyScore  ?vocabularyScore .
					}


		"""^^xsd:string ;
	] .

:ComputeLccCpl
	a bt:Update ;
	rdfs:label "Update: Compute Course Progress Level of TCN" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					INSERT{
						welcome:DialogueUser	welcome:hasLccCpl	?cpl .
					}
					WHERE{
						{
						SELECT (AVG(?asmScore) as ?cpl)
						WHERE {
						?subjectIri	rdf:type	welcome:LCCLesson ;
                    	        welcome:hasAssessmentScore  ?assessmentScore .
						BIND((xsd:float(?assessmentScore)) AS ?asmScore)
						}
						}
					}
					"""^^xsd:string ;
		] .



:WriteLccAttributesToExec
	a bt:Write ;
	rdfs:label "Write: LCC Attributes to Execution to be send to TP" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					CONSTRUCT {
						welcome:DialogueUser
											welcome:hasGender	?gender ;
											welcome:hasNationality	?nation ;
											welcome:hasLccGenderPreference	?lccGenderPref ;
											welcome:hasLccNationPreference	?lccNationPref ;
											welcome:hasName	?tcnName .
						?tcnName	?p	?o .
					}
					WHERE {
						welcome:DialogueUser
											welcome:hasGender	?gender ;
											welcome:hasNationality	?nation ;
											welcome:hasLccGenderPreference	?lccGenderPref ;
											welcome:hasLccNationPreference	?lccNationPref .
						OPTIONAL {
								welcome:DialogueUser welcome:hasName	?tcnName .
								?tcnName	?p	?o .
						}
					}


		"""^^xsd:string ;
	] .

:MessageToTpToSubmitLccAssessmentInfo
	a bt:Message ;
	rdfs:label "Message: Submit Assessment Scores to Teacher Panel"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """

				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
					{
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
  					} UNION {
						VALUES ?hdrName {"X-Msg-Type"}
						VALUES ?fieldValue {"Assessment-Scores"}
					}						
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
						?agentUri	ajan:agentId	?agentId ;
									welcome:hasName	?tcnName ;
									welcome:hasGender	?gender ;
									welcome:hasNationality	?nation ;
									welcome:hasLccGenderPreference	?lccGenderPref ;
									welcome:hasLccNationPreference	?lccNationPref .
						?tcnName	?p	?o .
						?subjectIri	rdf:type	welcome:LCCLesson ;
								welcome:hasLessonId    ?lessonId ;
                    	        welcome:hasAssessmentScore  ?assessmentScore ;
                    	        welcome:hasReadingScore     ?readingScore ;
                                welcome:hasWritingScore     ?writingScore ;
                                welcome:hasListeningScore   ?listeningScore ;
                                welcome:hasVocabularyScore  ?vocabularyScore .
						}
						WHERE {

						?agentUri	rdf:type	ajan:Agent ;
									ajan:agentId	?agentId .
						welcome:DialogueUser
											welcome:hasGender	?gender ;
											welcome:hasNationality	?nation ;
											welcome:hasLccGenderPreference	?lccGenderPref ;
											welcome:hasLccNationPreference	?lccNationPref .
						OPTIONAL {
								welcome:DialogueUser welcome:hasName	?tcnName .
								?tcnName	?p	?o .
						}
						?subjectIri	rdf:type	welcome:LCCLesson ;
								welcome:hasLessonId    ?lessonId ;
                    	        welcome:hasAssessmentScore  ?assessmentScore ;
                    	        welcome:hasReadingScore     ?readingScore ;
                                welcome:hasWritingScore     ?writingScore ;
                                welcome:hasListeningScore   ?listeningScore ;
                                welcome:hasVocabularyScore  ?vocabularyScore .
							}
				"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					# LINES TO SEND TO DUMMY ENDPOINT 
					#PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					#PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					#PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					#PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					#SELECT DISTINCT ?requestURI
					#WHERE {
					#	VALUES ?requestURI { "http://localhost:8092/teacherPanel/inform"}

					#}

					# LINES TO SEND TO ACTUAL ENDPOINT OF DISPATCHER FOR TP 
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
					SELECT ?requestURI
					WHERE
					{
						welcome:dispatcher welcome:hasAddress ?partialAddress .
						BIND(CONCAT(STR(?partialAddress), "/welcome/integration/workflow/dispatcher/messageToTeacher") AS ?requestURI )
					}
					"""^^xsd:string
	] .


:HandleLccFinalResultEvent
	a bt:HandleQueueEvent ;
	rdfs:label "EventHandler: LCC Final Result Submission Event" ;
	bt:event agents:SubmitFinalLccResultEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						#?s ?p ?o .

						?lccSolutionSubjectIri	rdf:type    		welcome:LCCUseCase ;
                                            	welcome:hasId   	?lccId ;
                                            	welcome:hasFinalSolution   	?lccSolution .

						?lccSolution    		rdf:type    		welcome:Grouping ;
												welcome:hasMembers  	?group.

						?group             		rdf:type   		welcome:Group ;
												welcome:hasMembers  	?memberAgentId .
					}
					WHERE {
						#?s ?p ?o .
						?lccSolutionSubjectIri	rdf:type    		welcome:LCCUseCase ;
                                            	welcome:hasId   	?lccId ;
                                            	welcome:hasFinalSolution   	?lccSolution .

						?lccSolution    		rdf:type    		welcome:Grouping ;
												welcome:hasMembers  	?group.

						?group             		rdf:type   		welcome:Group ;
												welcome:hasMembers  	?memberAgentId .

					}"""^^xsd:string ;
				] .

:SaveLccFinalResult
	a bt:Write ;
	rdfs:label "Write: LCC Final Result Submission by TP to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					CONSTRUCT {
						?lccSolutionSubjectIri	rdf:type    		welcome:LCCUseCase ;
                                            	welcome:hasId   	?lccId ;
                                            	welcome:hasFinalSolution   	?lccSolution .

						?lccSolution    		rdf:type    		welcome:Grouping ;
												welcome:hasMembers  	?group.

						?group             		rdf:type   		welcome:Group ;
												welcome:hasMembers  	?memberAgentId .
					}
					WHERE {
						?lccSolutionSubjectIri	rdf:type    		welcome:LCCUseCase ;
                                            	welcome:hasId   	?lccId ;
                                            	welcome:hasFinalSolution   	?lccSolution .

						?lccSolution    		rdf:type    		welcome:Grouping ;
												welcome:hasMembers  	?group.

						?group             		rdf:type   		welcome:Group ;
												welcome:hasMembers  	?memberAgentId .
					}


		"""^^xsd:string ;
	] .

:HandleStartLccProcessEvent
	a bt:HandleQueueEvent ;
	rdfs:label "EventHandler: start LCC Process Event" ;
	bt:event agents:StartLccProcessEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						#?s ?p ?o .

						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasParticipants	?pAgentId ;
								welcome:hasLessonId	?lessonId ;
								welcome:hasDedicatedAgent	?dAgentId ;
								mac:hasId	?lccId ;
								welcome:hasSdWeight	?cplWeight ;
								welcome:hasMinSize		 ?minSize ;
								welcome:hasMaxSize		 ?maxSize ;
								welcome:hasAbsenceAllowance	 ?allowedAbsence .
					}
					WHERE {
						#?s ?p ?o .
						?bnode	rdf:type	welcome:LCCUseCase ;
								welcome:hasParticipants	?pAgentId ;
								welcome:hasLessonId	?lessonId ;
								welcome:hasDedicatedAgent	?dAgentId ;
								welcome:hasId	?lccId ;
								welcome:hasCPLWeight	?cplWeight ;
								welcome:hasMinSize		 ?minSize ;
								welcome:hasMaxSize		 ?maxSize ;
								welcome:hasAbsenceAllowance	 ?allowedAbsence .

					}"""^^xsd:string ;
				] .



:WriteRootAddress2Exec
	a bt:Write ;
	rdfs:label "Write: Root Address of Agents to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					CONSTRUCT {
						?agent	welcome:hasRootAddress	?rootAddress .
					}
					WHERE {
						?agent	rdf:type ajan:Agent .
						?du		welcome:hasRootAddress	?rootAddress .
					}


		"""^^xsd:string ;
	] .

:ConditionDedicatedAgent
	a bt:Condition ;
	rdfs:label "Condition: Is this Dedicated Agent?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?agent	rdf:type	ajan:Agent ;
								ajan:agentId	?agentId .

						?bnode	rdf:type	welcome:LCCUseCase ;
								welcome:hasDedicatedAgent	?agentId .
						}"""^^xsd:string ;
		] .

:ProduceLccDedicatedAgentBehaviorEvent
	a bt:EventProducer ;
	rdfs:label "EventProducer: LCC Dedicated Agent Behavior Event" ;
	ajan:event agents:LccDedicatedAgentBehaviorEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .


:WriteLccPersonalInfo2Exec
	a bt:Write ;
	rdfs:label "Write: LCC Personal Info to Exec for the particular LCC Process" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?agent	welcome:hasLCCPersonalInfo	?bnode .

						?bnode	rdf:type	welcome:LCCPersonalInfo ;
								welcome:hasGender	?gender ;
								welcome:hasNationality	?nationality ;
								welcome:hasLccCpl		?lccCpl ;
								welcome:hasAttendedLessonIDs 	?attendedLessonId .
					}
					WHERE {
						?agent	rdf:type ajan:Agent .

						welcome:DialogueUser
							welcome:hasGender	?gender ;
							welcome:hasNationality	?nationality ;
							welcome:hasLccCpl		?lccCpl ;
							welcome:hasAttendedLessonIDs 	?attendedLessonId .

							{BIND(BNODE() AS ?bnode)}
					}


		"""^^xsd:string ;
	] .


:WriteAgentAddressesToEKB
	a bt:Insert ;
	rdfs:label "Insert: Addresses of other agents from LAR to Execution" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:LocalAgentsKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX welcome-sw: <http://www.semanticweb.org/welcome#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?agentUri	ajan:agentId	?agentId ;
									welcome:hasAddress	?address .
					}
					WHERE {
						?agentUri	rdf:type	ajan:Agent ;
									ajan:agentId	?agentId ;
									welcome-sw:hasAddress	?address .
					}
		"""^^xsd:string ;
	] .


:Message2DedicatedLccPersonalInfo
	a bt:Message ;
	rdfs:label "Message: Return Personal Info to Dedicated agent for LCC"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
					
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?agent	ajan:agentId	?agentName ;
									welcome:hasLCCPersonalInfo	?bnode .

							?bnode	rdf:type	welcome:LCCPersonalInfo ;
									welcome:hasGender	?gender ;
									welcome:hasNationality	?nationality ;
									welcome:hasLccCpl		?lccCpl ;
									welcome:hasAttendedLessonIDs 	?attendedLessonId ;
									mac:hasId	?lccId .
						}
						WHERE {
							?agent	rdf:type ajan:Agent ;
									ajan:agentId	?agentName ;
									welcome:hasLCCPersonalInfo	?bnode .

							?bnode	rdf:type	welcome:LCCPersonalInfo ;
									welcome:hasGender	?gender ;
									welcome:hasNationality	?nationality ;
									welcome:hasLccCpl		?lccCpl ;
									welcome:hasAttendedLessonIDs 	?attendedLessonId .

							?bnode2	rdf:type	welcome:LCCUseCase ;
									mac:hasId	?lccId .

				}"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					SELECT DISTINCT ?requestURI
					WHERE {

					#?agent	rdf:type	ajan:Agent ;
					#		welcome:hasRootAddress ?rootAddress .

					?bnode	rdf:type	welcome:LCCUseCase ;
							welcome:hasDedicatedAgent	?dAgentId ;
							mac:hasId	?lccId .
					?agentUri	ajan:agentId	?dAgentId ;
								welcome:hasAddress	?address .

					BIND(CONCAT(?address, "?capability=receiveLccPersonalInfo") AS ?requestURI )
					}"""^^xsd:string
	] .


:InsertLccPersonalInfo2LakrWithLccId
	a bt:Insert ;
	rdfs:label "Insert: LCC Personal Info to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					CONSTRUCT {
						?agent	welcome:hasLCCPersonalInfo	?bnode .

						?bnode	rdf:type	welcome:LCCPersonalInfo ;
								welcome:hasGender	?gender ;
								welcome:hasNationality	?nationality ;
								welcome:hasLccCpl		?lccCpl ;
								welcome:hasAttendedLessonIDs 	?attendedLessonId ;
								mac:hasId	?lccId .

					}
					WHERE {
						?agent	rdf:type ajan:Agent ;
								welcome:hasLCCPersonalInfo ?bnode .

						?bnode	rdf:type	welcome:LCCPersonalInfo ;
								welcome:hasGender	?gender ;
								welcome:hasNationality	?nationality ;
								welcome:hasLccCpl		?lccCpl ;
								welcome:hasAttendedLessonIDs 	?attendedLessonId .

						?bnode2	rdf:type	welcome:LCCUseCase ;
								mac:hasId	?lccId .


					}


		"""^^xsd:string ;
	] .

:WriteLccPersonalInfo2LakrWithLccId
	a bt:Write ;
	rdfs:label "Write: LCC Personal Info to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					CONSTRUCT {
						?agent	welcome:hasLCCPersonalInfo	?bnode .

						?bnode	rdf:type	welcome:LCCPersonalInfo ;
								welcome:hasGender	?gender ;
								welcome:hasNationality	?nationality ;
								welcome:hasLccCpl		?lccCpl ;
								welcome:hasAttendedLessonIDs 	?attendedLessonId ;
								mac:hasId	?lccId .

					}
					WHERE {
						?agent	rdf:type ajan:Agent ;
								welcome:hasLCCPersonalInfo ?bnode .

						?bnode	rdf:type	welcome:LCCPersonalInfo ;
								welcome:hasGender	?gender ;
								welcome:hasNationality	?nationality ;
								welcome:hasLccCpl		?lccCpl ;
								welcome:hasAttendedLessonIDs 	?attendedLessonId .

						?bnode2	rdf:type	welcome:LCCUseCase ;
								mac:hasId	?lccId .


					}


		"""^^xsd:string ;
	] .


:UpdateLccProblem
	a bt:Update ;
	rdfs:label "Update: Add necessary LCC Problem Instance Fields" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE{
							?bnode	rdf:type	welcome:LCCUseCase ;
									?p ?o .
					}
					INSERT{
							?lccSubject	rdf:type	welcome:LCCUseCase, mac:MACProblemInstance ;
										?p ?o ;
										welcome:hasSdWeight		?cplWeight ;
										mac:hasUseCase	"LCC"^^xsd:string ;
										mac:hasSolver	"BOSS"^^xsd:string ;
										mac:hasNumberOfAgents	?numOfAgents ;
										mac:hasMinCoalitionSize	?minSize ;
										mac:hasMaxCoalitionSize	?maxSize .
					}
					WHERE{
						{
							?bnode	rdf:type	welcome:LCCUseCase ;
									?p ?o ;
									welcome:hasSdWeight	?cplWeight ;
									#welcome:hasCPLWeight	?cplWeight ;
									welcome:hasMinSize	?minSize ;
									welcome:hasMaxSize	?maxSize ;
									mac:hasId	?lccId .
						}
						{
							SELECT (count(?pAgentId) as ?numOfAgents)
							WHERE {
									?bnode	rdf:type	welcome:LCCUseCase ;
											mac:hasParticipants	?pAgentId .
							}
						}
						BIND( IRI(CONCAT(STR(welcome:LCC), STR(?lccId))) AS ?lccSubject )
					}
					"""^^xsd:string ;
		] .

:WriteLccProblem2Lakr
	a bt:Write ;
	rdfs:label "Write: LCC Problem Instance to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					CONSTRUCT {
						?agent	welcome:hasInvolvedInMac	?macId .
						?macUseCaseSubject	rdf:type	welcome:LCCUseCase, mac:MACProblemInstance ;
											mac:hasId	?macId ;
											welcome:hasStatus	"Running" ;
											welcome:hasStartTime	?now ;
											?p	?o .
					}
					WHERE {
						?agent	rdf:type ajan:Agent .
						?macUseCaseSubject	rdf:type	welcome:LCCUseCase ;
											mac:hasId	?macId ;
											?p	?o .
						BIND(NOW() AS ?now)
					}
		"""^^xsd:string ;
	] .



:ClearEKB
	a bt:Update ;
	rdfs:label "Clear EKB" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					DELETE{
						?s ?p ?o .
					}
					WHERE{
						?s ?p ?o .
					}
					"""^^xsd:string ;
		] .

:HandleLccDedicatedAgentEvent
	a bt:HandleQueueEvent ;
	rdfs:label "EventHandler: dedicated agent behavior Event" ;
	bt:event agents:LccDedicatedAgentBehaviorEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:Wait4LccPersonalInfo
	a bt:Wait ;
	rdfs:label "Wait: wait for agents to return their Personal Info for LCC" ;
	rdfs:comment "" ;
	bt:milliseconds "25000"^^xsd:int .


:WriteCompleteLccPersonalInfo2Exec
	a bt:Write ;
	rdfs:label "Write: LCC Personal Info of all participant agents to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?agent	ajan:agentId	?agentId ;
								welcome:hasLCCPersonalInfo ?bnode .

						?bnode	rdf:type	welcome:LCCPersonalInfo ;
								welcome:hasGender	?gender ;
								welcome:hasNationality	?nationality ;
								welcome:hasLccCpl		?lccCpl ;
								welcome:hasAttendedLessonIDs 	?attendedLessonId ;
								mac:hasId	?lccId .

					}
					WHERE {
						?agent	ajan:agentId	?agentId ;
								welcome:hasLCCPersonalInfo ?bnode .

						?bnode	rdf:type	welcome:LCCPersonalInfo ;
								welcome:hasGender	?gender ;
								welcome:hasNationality	?nationality ;
								welcome:hasLccCpl		?lccCpl ;
								welcome:hasAttendedLessonIDs 	?attendedLessonId ;
								mac:hasId	?lccId .
					}


		"""^^xsd:string ;
	] .

:ConditionAllReturnedLccPersonalInfo
	a bt:Condition ;
	rdfs:label "Condition: did all LCC agents return their Personal Info?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
			PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
			ASK
			WHERE
			{
				?bnode	rdf:type	welcome:LCCUseCase ;
						mac:hasParticipants	?pAgentId ;
						mac:hasId	?lccId .

				?agentUri	welcome:hasLCCPersonalInfo	?bnode2 ;
							ajan:agentId	?pAgentId .

				?bnode2		rdf:type	welcome:LCCPersonalInfo ;
							mac:hasId	?lccId .
			}
						"""^^xsd:string ;
		] .



:HandleReceiveLccPersonalInfoEvent
	a bt:HandleQueueEvent ;
	rdfs:label "EventHandler: Receive LCC Personal Info Event" ;
	bt:event agents:ReceiveLccPersonalInfoEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:WriteLccPersonalInfoOfSender2Lakr
	a bt:Write ;
	rdfs:label "Write: LCC Personal Info of the sender agent to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?agent	ajan:agentId	?agentId ;
								welcome:hasLCCPersonalInfo ?bnode .

						?bnode	rdf:type	welcome:LCCPersonalInfo ;
								welcome:hasGender	?gender ;
								welcome:hasNationality	?nationality ;
								welcome:hasLccCpl		?lccCpl ;
								welcome:hasAttendedLessonIDs 	?attendedLessonId ;
								mac:hasId	?lccId .

					}
					WHERE {
						?agent	ajan:agentId	?agentId ;
								welcome:hasLCCPersonalInfo ?bnode .

						?bnode	rdf:type	welcome:LCCPersonalInfo ;
								welcome:hasGender	?gender ;
								welcome:hasNationality	?nationality ;
								welcome:hasLccCpl		?lccCpl ;
								welcome:hasAttendedLessonIDs 	?attendedLessonId ;
								mac:hasId	?lccId .

					}


		"""^^xsd:string ;
	] .



:InsertLccPersonalInfoOfSender2Lakr
	a bt:Insert ;
	rdfs:label "Insert: LCC Personal Info of the sender agent to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?agent	ajan:agentId	?agentId ;
								welcome:hasLCCPersonalInfo ?bnode .

						?bnode	rdf:type	welcome:LCCPersonalInfo ;
								welcome:hasGender	?gender ;
								welcome:hasNationality	?nationality ;
								welcome:hasLccCpl		?lccCpl ;
								welcome:hasAttendedLessonIDs 	?attendedLessonId ;
								mac:hasId	?lccId .

					}
					WHERE {
						?agent	ajan:agentId	?agentId ;
								welcome:hasLCCPersonalInfo ?bnode .

						?bnode	rdf:type	welcome:LCCPersonalInfo ;
								welcome:hasGender	?gender ;
								welcome:hasNationality	?nationality ;
								welcome:hasLccCpl		?lccCpl ;
								welcome:hasAttendedLessonIDs 	?attendedLessonId ;
								mac:hasId	?lccId .

					}


		"""^^xsd:string ;
	] .

:ProduceComputeLccCoalitionsEvent
	a bt:EventProducer ;
	rdfs:label "EventProducer: Compute Possible Coalitions Event" ;
	ajan:event agents:ComputeLccCoalitionStructuresEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """

						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .


:ProduceLccFailedEvent
	a bt:EventProducer ;
	rdfs:label "EventProducer: LCC Failed Event" ;
	ajan:event agents:LccFailureEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .

:HandleComputeCoalitionsEvent
	a bt:HandleQueueEvent ;
	rdfs:label "EventHandler: Compute Coalition Structures Event" ;
	bt:event agents:ComputeLccCoalitionStructuresEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:ComputeLccCannotLinkConnections
	a bt:Write ;
	rdfs:label "Write: Compute LCC Cannot Link Connections" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					CONSTRUCT {
						?bnode	mac:hasCannotLinkConnections	?cannotLinkBnode .

						?cannotLinkBnode	mac:hasCannotConnect	?pAgentId, ?pAgentId2 .

					}
					WHERE {
						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId	?lccId ;
								welcome:hasLessonId	?lessonId ;
								mac:hasParticipants	?pAgentId, ?pAgentId2 .

						FILTER(?pAgentId != ?pAgentId2)
						FILTER(?pAgentId < ?pAgentId2)

						FILTER(xsd:integer(?lessonId) != 1)

						?agentUri	ajan:agentId	?pAgentId ;
									welcome:hasLCCPersonalInfo	?bnode2 .
						?bnode2	rdf:type	welcome:LCCPersonalInfo ;
								mac:hasId	?lccId .

						?agentUri2	ajan:agentId	?pAgentId2 ;
									welcome:hasLCCPersonalInfo	?bnode3 .
						?bnode3	rdf:type	welcome:LCCPersonalInfo ;
								mac:hasId	?lccId .

						BIND((xsd:integer(?lessonId) - 1) AS ?previousLessonId)

						FILTER NOT EXISTS {
							?bnode2	welcome:hasAttendedLessonIDs	?previousLessonId .
						}
						FILTER NOT EXISTS {
							?bnode3	welcome:hasAttendedLessonIDs	?previousLessonId .
						}
						BIND(BNODE() AS ?cannotLinkBnode)
					}
		"""^^xsd:string ;
	] .

:GenerateFeasibleCoalitions4Lcc
	a bt:CoalitionGenerator ;
	rdfs:label "CoalitionGenerator: Generate Feasible Coalitions for LCC" ;
	bt:query [
				a bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:targetBase ajan:ExecutionKnowledge ;
				bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					Construct {
						?bnode	rdf:type	mac:MACProblemInstance ;
								mac:hasId	?lccId ;
								mac:hasParticipants	?pAgentId ;
								mac:hasNumberOfAgents	?numOfAgents ;
								mac:hasMinCoalitionSize	?minSize ;
								mac:hasMaxCoalitionSize	?maxSize ;
								mac:hasCannotLinkConnections	?cannotLinkBnode ;
								mac:hasMustLinkConnections	?mustLinkBnode .

						?cannotLinkBnode	mac:hasCannotConnect	?clAgentId, ?clAgentId2 .
						?mustLinkBnode	mac:hasMustConnect	?mlAgentId, ?mlAgentId2 .
					}
					Where{
						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId	?lccId ;
								mac:hasParticipants	?pAgentId ;
								mac:hasNumberOfAgents	?numOfAgents ;
								mac:hasMinCoalitionSize	?minSize ;
								mac:hasMaxCoalitionSize	?maxSize .

						OPTIONAL {
							?bnode mac:hasCannotLinkConnections	?cannotLinkBnode .

							?cannotLinkBnode	mac:hasCannotConnect	?clAgentId, ?clAgentId2 .
						}
						OPTIONAL {
							?bnode mac:hasMustLinkConnections	?mustLinkBnode .

							?mustLinkBnode	mac:hasMustConnect	?mlAgentId, ?mlAgentId2 .
						}
					}
					"""^^xsd:string ;
			] .

:ConditionAnyFeasibleCoalitionExists
	a bt:Condition ;
	rdfs:label "Condition: Is there any LCC Feasible Coalition?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
			PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
			PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>

			ASK
			WHERE
			{
				?bnode	rdf:type	welcome:LCCUseCase ;
						mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

				?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
										mac:hasMembers	?cmAgentId .
				FILTER(BOUND(?cmAgentId))
			}
						"""^^xsd:string ;
		] .


:ProduceFinalizeLccProcessEvent
	a bt:EventProducer ;
	rdfs:label "EventProducer: Finalize LCC Process either with Success or Failure" ;
	ajan:event agents:FinalizeLccProcessEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """

						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .


:BroadcastCoalitions2ReceiveUtilities
	a bt:Broadcast ;
	rdfs:label "Broadcast: LCC Feasible Coalitions to Receive Utility Values"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
						
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?bnode	rdf:type	welcome:LCCUseCase ;
									mac:hasId	?lccId ;
									mac:hasFeasibleCoalitions	?feasibleCoalitionNode ;
									welcome:hasDedicatedAgent	?dAgentId .

							?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
													welcome:hasCommonGender ?cmnGender ;
													welcome:hasCommonNation	?cmnNation ;
													mac:hasMembers	?mAgentId .

							# Select Complete LCC Personal Info
							?pAgent	ajan:agentId	?pAgentId ;
									welcome:hasLCCPersonalInfo ?lccPsnlInfo .

							?lccPsnlInfo	rdf:type	welcome:LCCPersonalInfo ;
											welcome:hasGender	?gender ;
											welcome:hasNationality	?nationality ;
											welcome:hasLccCpl		?lccCpl ;
											mac:hasId	?lccId .
						}
						WHERE {
							# Select Feasible Coalitions
							?bnode	rdf:type	welcome:LCCUseCase ;
									mac:hasId	?lccId ;
									mac:hasFeasibleCoalitions	?feasibleCoalitionNode ;
									welcome:hasDedicatedAgent	?dAgentId .

							?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
													welcome:hasCommonGender ?cmnGender ;
													welcome:hasCommonNation	?cmnNation ;
													mac:hasMembers	?mAgentId .

							# Select Complete LCC Personal Info
							?pAgent	ajan:agentId	?pAgentId ;
									welcome:hasLCCPersonalInfo ?lccPsnlInfo .

							?lccPsnlInfo	rdf:type	welcome:LCCPersonalInfo ;
											welcome:hasGender	?gender ;
											welcome:hasNationality	?nationality ;
											welcome:hasLccCpl		?lccCpl ;
											mac:hasId	?lccId .
							}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					SELECT DISTINCT ?requestURI
					WHERE {

					?bnode	rdf:type	welcome:LCCUseCase ;
							mac:hasId	?lccId ;
							mac:hasParticipants	?pAgentId .

					?agent	rdf:type	ajan:Agent, ajan:ThisAgent ;
							ajan:agentId	?agentId .

					FILTER(?pAgentId != ?agentId)
					?agentUri	ajan:agentId	?pAgentId ;
								welcome:hasAddress	?address .
					BIND(CONCAT(?address, "?capability=computeLccUtilityValues") AS ?requestURI )
					}"""^^xsd:string
	] .


:HandleComputeLccUtilitiesEvent
	a bt:HandleQueueEvent ;
	rdfs:label "EventHandler: Compute LCC Utility Values Event" ;
	bt:event agents:ComputeLccUtilityValuesEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .






:WriteDebug
	a bt:Write ;
	rdfs:label "Write: DEBUG " ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						ajan:bnode	ajan:pred	?bnode .
						ajan:lccId	ajan:pred	?lccId .
						ajan:pAgentId	ajan:pred	?pAgentId .
						ajan:agent	ajan:pred	?agent .
						ajan:agentId	ajan:pred	?agentId .
					}
					WHERE {

					?bnode	rdf:type	welcome:LCCUseCase ;
							mac:hasId	?lccId ;
							mac:hasParticipants	?pAgentId .

					?agent	rdf:type	ajan:Agent ;
							ajan:agentId	?agentId .

					FILTER(?pAgentId != ?agentId)
					BIND(CONCAT("http://localhost:8060/welcome/integration/coordination/ajan/agents/", ?pAgentId, "?capability=computeLccUtilityValues") AS ?requestURI )
					}"""^^xsd:string ;
	] .

:WriteAllLccInfo2Exec
	a bt:Write ;
	rdfs:label "Write: All LCC Problem Instances Info to Execution" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				CONSTRUCT  {
					?bnode	rdf:type	welcome:LCCUseCase ;
							welcome:hasGenderWeight		?gWeight ;
							welcome:hasNationalityWeight	?nWeight ;
							mac:hasId	?lccId .
				}
				WHERE {
					?bnode	rdf:type	welcome:LCCUseCase ;
							welcome:hasGenderWeight		?gWeight ;
							welcome:hasNationalityWeight	?nWeight ;
							mac:hasId	?lccId .
				} """^^xsd:string ;
	] .


:RemoveUnnecessaryLccInfoFromExec
	a bt:Update ;
	rdfs:label "Update: Remove Unnecessary LCC Problem Instances from Exec" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?bnode	rdf:type	welcome:TempLCCUseCase ;
								welcome:hasGenderWeight		?gWeight ;
								welcome:hasNationalityWeight	?nWeight ;
								mac:hasId ?lccId .
					}
					WHERE{
						# this is retrieved from LAKR of this agent. All LCCUseCase s are retrieved.
						?bnode	rdf:type	welcome:TempLCCUseCase ;
								welcome:hasGenderWeight		?gWeight ;
								welcome:hasNationalityWeight	?nWeight .

						# this is received from Dedicated agent. It also sends the id of LCCUseCase.
						?bnode2	rdf:type	welcome:LCCUseCase ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode ;
								mac:hasId ?lccId .

						FILTER(BOUND(?feasibleCoalitionNode))

						#		?p	?o .
						#		mac:hasId ?lccId .

						# here we select the LCCUseCases which have a different ID than the one which is sent by Dedicated Agent.
						# We need to retrieve the correct LCC USE CASE specific to this agent from LAKR. Because the LCCUseCase problem instance contains
						# the weights of preferences sent by Teacher.
						FILTER NOT EXISTS {
							?bnode	mac:hasId ?lccId .
						}
					}
					"""^^xsd:string ;
		] .

:RemoveUnnecessaryCoalitions
	a bt:Update ;
	rdfs:label "Update: Remove Unnecessary Coalitions" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?bnode	mac:hasFeasibleCoalitions	?feasibleCoalitionNode .
						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												?p			?o .
					}
					WHERE{
						?agent	rdf:type	ajan:Agent ;
								ajan:agentId	?agentId .

						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												?p			?o .

						FILTER NOT EXISTS {
							?feasibleCoalitionNode	mac:hasMembers	?agentId .
						}
					}
					"""^^xsd:string ;
		] .

:ComputeLccCoalitionInfo
	a bt:Insert ;
	rdfs:label "Insert: Compute LCC Coalition Information - common gender and nationality" ;
	bt:query [
		a bt:ConstructQuery;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					CONSTRUCT {
							?feasibleCoalitionNode	welcome:hasCommonGender	?cG ;
													welcome:hasCommonNation	?cN .
					}
					WHERE {
						{
							SELECT ?feasibleCoalitionNode (COUNT(DISTINCT ?gender) AS ?gS) (COUNT(DISTINCT ?nation) AS ?nS)
							{
								?bnode		rdf:type	 welcome:LCCUseCase ;
											mac:hasId	?lccId ;
											mac:hasFeasibleCoalitions	 ?feasibleCoalitionNode .
								?feasibleCoalitionNode	rdf:type	 mac:CSGP-Coalition ;
														mac:hasMembers	?mAgentId.
								?mAgent	ajan:agentId	?mAgentId ;
										welcome:hasLCCPersonalInfo ?mLccPsnlInfo .
								?mLccPsnlInfo	rdf:type	welcome:LCCPersonalInfo ;
												mac:hasId	?lccId ;
												welcome:hasGender	?gender ;
												welcome:hasNationality	?nation .
							} GROUP BY ?feasibleCoalitionNode
						}
						BIND(IF(?gS > 1, "Mixed", "Same") AS ?cG)
						BIND(IF(?nS > 1, "Mixed", "Same") AS ?cN)
					}
					"""^^xsd:string ;
		] .

:ComputeLccCoalitionInfo_addingAttendanceInfo
	a bt:Insert ;
	rdfs:label "Insert: Compute LCC Coalition Information - common gender and nationality" ;
	bt:query [
		a bt:ConstructQuery;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					CONSTRUCT {
							?feasibleCoalitionNode	welcome:hasCommonGender	?cG ;
													welcome:hasCommonNation	?cN ;
													welcome:hasTotalAttendanceAmount	?attnd .
					}
					WHERE {
					{
						SELECT ?feasibleCoalitionNode (COUNT(DISTINCT ?gender) AS ?gS) (COUNT(DISTINCT ?nation) AS ?nS)
						(COUNT(DISTINCT ?attended) AS ?attnd)
						{
							?bnode		rdf:type	 welcome:LCCUseCase ;
										mac:hasId	?lccId ;
										welcome:hasLessonId	?lessonId ;
										mac:hasFeasibleCoalitions	 ?feasibleCoalitionNode .
							?feasibleCoalitionNode	rdf:type	 mac:CSGP-Coalition ;
													mac:hasMembers	?mAgentId.
							?mAgent	ajan:agentId	?mAgentId ;
									welcome:hasLCCPersonalInfo ?mLccPsnlInfo .
							?mLccPsnlInfo	rdf:type	welcome:LCCPersonalInfo ;
											mac:hasId	?lccId ;
											welcome:hasGender	?gender ;
											welcome:hasNationality	?nation .
							BIND((xsd:integer(?lessonId) - 1) AS ?previousLessonId)
							OPTIONAL {
								FILTER EXISTS {
									?mLccPsnlInfo	welcome:hasAttendedLessonIDs	?previousLessonId .
								}
								BIND(?mAgentId AS ?attended)
							}
						} GROUP BY ?feasibleCoalitionNode
					}
					BIND(IF(?gS > 1, "Mixed", "Same") AS ?cG)
					BIND(IF(?nS > 1, "Mixed", "Same") AS ?cN)
				}
				"""^^xsd:string ;
		] .


:RemoveAttendanceViolatedCoalitions
	a bt:Update ;
	rdfs:label "Remove Coalitions in which Attendance is Violated" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					DELETE {
						?bnode	mac:hasFeasibleCoalitions	?feasibleCoalitionNode .
						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												?p ?o.
					}
					WHERE{
						?bnode	rdf:type	 welcome:LCCUseCase ;
								welcome:hasLessonId	?lessonId ;
								welcome:hasAbsenceAllowance		?allowedAttendanceLimit ;
								mac:hasFeasibleCoalitions	 ?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	 mac:CSGP-Coalition ;
												mac:hasSize		?groupSize ;
												welcome:hasTotalAttendanceAmount	?attendedAmount ;
												?p ?o.
						FILTER((xsd:integer(?lessonId) != 1) && ((xsd:integer(?attendedAmount) + xsd:integer(?allowedAttendanceLimit)) < xsd:integer(?groupSize)))
						}
				"""^^xsd:string ;
		] .

:UpdateLccCoalitionInfoWrt
	a bt:Write ;
	rdfs:label "Write: LCC Coalition Info" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					#DELETE{
					#?feasibleCoalitionNode	welcome:hasCommonGender	?cG ;
					#						welcome:hasCommonNation	?cN .
					#}
					CONSTRUCT {
					?feasibleCoalitionNode	welcome:hasCommonGender	?commonGender ;
											welcome:hasCommonNation	?commonNation .
					}
					WHERE {
						?bnode		rdf:type	 welcome:LCCUseCase ;
									mac:hasId	?lccId ;
									mac:hasFeasibleCoalitions	 ?feasibleCoalitionNode .
						?feasibleCoalitionNode	rdf:type	 mac:CSGP-Coalition ;
												welcome:hasCommonGender	?cG ;
												welcome:hasCommonNation	?cN .

						FILTER(LCASE(?cG) = "same" || LCASE(?cN) = "same")

						#{
						#	SELECT ?gender ?nation
						#	{
								?feasibleCoalitionNode	mac:hasMembers	?mAgentId.
								?mAgent	ajan:agentId	?mAgentId ;
										welcome:hasLCCPersonalInfo ?mLccPsnlInfo .
								?mLccPsnlInfo	rdf:type	welcome:LCCPersonalInfo ;
												mac:hasId	?lccId ;
												welcome:hasGender	?gender ;
												welcome:hasNationality	?nation .
						#	} LIMIT 1
						#}
						BIND(IF(LCASE(?cG) = "same", ?gender, ?cG) AS ?commonGender)
						BIND(IF(LCASE(?cN) = "same", ?nation, ?cN) AS ?commonNation)
					}
					"""^^xsd:string ;
		] .

:UpdateLccCoalitionInfo
	a bt:Update ;
	rdfs:label "Update: LCC Coalition Info" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE{
					?feasibleCoalitionNode	welcome:hasCommonGender	?cG ;
											welcome:hasCommonNation	?cN .
					}
					INSERT{
					?feasibleCoalitionNode	welcome:hasCommonGender	?commonGender ;
											welcome:hasCommonNation	?commonNation .
					}
					WHERE {
						?bnode		rdf:type	 welcome:LCCUseCase ;
									mac:hasId	?lccId ;
									mac:hasFeasibleCoalitions	 ?feasibleCoalitionNode .
						?feasibleCoalitionNode	rdf:type	 mac:CSGP-Coalition ;
												welcome:hasCommonGender	?cG ;
												welcome:hasCommonNation	?cN .

						FILTER(LCASE(?cG) = "same" || LCASE(?cN) = "same")

						#{
						#	SELECT ?gender ?nation
						#	{
								?feasibleCoalitionNode	mac:hasMembers	?mAgentId.
								?mAgent	ajan:agentId	?mAgentId ;
										welcome:hasLCCPersonalInfo ?mLccPsnlInfo .
								?mLccPsnlInfo	rdf:type	welcome:LCCPersonalInfo ;
												mac:hasId	?lccId ;
												welcome:hasGender	?gender ;
												welcome:hasNationality	?nation .
						#	} LIMIT 1
						#}
						BIND(IF(LCASE(?cG) = "same", ?gender, ?cG) AS ?commonGender)
						BIND(IF(LCASE(?cN) = "same", ?nation, ?cN) AS ?commonNation)
					}
					"""^^xsd:string ;
		] .

:WriteLccPreferences2Exec
	a bt:Write ;
	rdfs:label "Write: LCC Individual Preferences to Execution" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				CONSTRUCT  {
						?agent	welcome:hasLCCPreferencesInfo	?bnode .

						?bnode	rdf:type	welcome:LCCPreferencesInfo ;
								welcome:hasLccGenderPreference ?genPref ;
								welcome:hasLccNationPreference ?natPref ;
								welcome:hasLccGenderPrefWeight	?gWeight ;
								welcome:hasLccNationPrefWeight	?nWeight .
				}
				WHERE {
					?agent	rdf:type ajan:Agent ;
							ajan:agentId	?subAgentId .

					?du		rdf:type	welcome:DialogueUser ;
							welcome:hasLccGenderPreference ?genPref ;
							welcome:hasLccNationPreference ?natPref ;
							welcome:hasLccGenderPrefWeight	?gWeight ;
							welcome:hasLccNationPrefWeight	?nWeight .

					{BIND(BNODE() AS ?bnode)}

				} """^^xsd:string ;
	] .



:ComputeSdOfLccCoalitions
	a bt:SquareRoot ;
	rdfs:label "SquareRoot: Compute LCC SDs" ;
	bt:query [
				a bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:targetBase ajan:AgentKnowledge ;
				bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX ajan_math: <http://localhost:8090/rdf4j/repositories/ajan_math_ontology#>

					Construct {
						?feasibleCoalitionNode	rdf:type	ajan_math:AJAN_MathSubject ;
												ajan_math:hasValue	?unrootedSd ;
												ajan_math:hasResultPredicate	welcome:hasStandardDeviation .

						# This node creates triples in the following format:
						# ?feasibleCoalitionNode welcome:hasStandardDeviation	?finalValue .

					}
					Where{
						SELECT ?feasibleCoalitionNode ((SUM(?sd)/?groupSize) AS ?unrootedSd)
						WHERE {
							{
								SELECT ?feasibleCoalitionNode (SUM(?lccCpl) AS ?totalCpl) (COUNT(?mAgentId) AS ?groupSize)
								WHERE {
									# Select Feasible Coalitions
									?bnode	rdf:type	welcome:LCCUseCase ;
											mac:hasId	?lccId ;
											mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

									?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
											mac:hasMembers	?mAgentId .

									# Select Complete LCC Personal Info
									?mAgentUri ajan:agentId  ?mAgentId ;
											welcome:hasLCCPersonalInfo ?lccPsnlInfo .
									?lccPsnlInfo	rdf:type	welcome:LCCPersonalInfo ;
											welcome:hasLccCpl		?lccCpl ;
											mac:hasId	?lccId .
								} GROUP BY ?feasibleCoalitionNode
							}
							BIND((?totalCpl/?groupSize) AS ?mean)
							{
								SELECT ?feasibleCoalitionNode ?lccCpl
								WHERE {
									?feasibleCoalitionNode	 mac:hasMembers	?mAgentId .
									# Select Complete LCC Personal Info
									?mAgentUri ajan:agentId  ?mAgentId ;
											welcome:hasLCCPersonalInfo ?lccPsnlInfo .
									?lccPsnlInfo	rdf:type	welcome:LCCPersonalInfo ;
											welcome:hasLccCpl		?lccCpl .
								} GROUP BY ?feasibleCoalitionNode ?lccCpl ?mAgentId
							}
							BIND( ( (xsd:float(?mean) - xsd:float(?lccCpl)) * (xsd:float(?mean) - xsd:float(?lccCpl))) AS ?sd )
						}GROUP BY ?feasibleCoalitionNode ?groupSize

					}
					"""^^xsd:string ;
			] .


:ComputeUtilityValuesInLcc
	a bt:Update ;
	rdfs:label "Update: Compute Utility Values in LCC" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
                INSERT {
					?bnode	rdf:type	welcome:LCCUseCase ;
							mac:hasId	?lccId ;
							mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

                    ?feasibleCoalitionNode  welcome:hasUtilityValue ?uVbnode .
                    ?uVbnode    rdf:type    welcome:UtilityValue ;
                                welcome:isComputedBy   ?agentId ;
                                mac:hasValue        ?ttlV .
                }
                WHERE {
			#		{
			#			SELECT DISTINCT ?feasibleCoalitionNode ?agentId ?bnode ?lccId (SUM(?uValue) AS ?ttlV)
			#			WHERE {
							# get This agent
			#				?agent	rdf:type	ajan:Agent, ajan:ThisAgent ;
							#?agent	rdf:type	ajan:Agent;
			#						ajan:agentId	 ?agentId .

							# get Feasible Coalitions which are sent by Dedicated agent
			#				?bnode	rdf:type	welcome:LCCUseCase ;
			#						mac:hasId	?lccId ;
			#						mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

							# make sure that coalition contains This agent
			#				FILTER EXISTS { ?feasibleCoalitionNode  mac:hasMembers	?agentId . }

							# get the coalition information
			#				?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
			#										welcome:hasCommonGender	?commonGender ;
			#										welcome:hasCommonNation	?commonNation .

							# get preferences of This agent
			#				?agent	welcome:hasLCCPreferencesInfo	?aLccPrfInfo .
			#				?aLccPrfInfo	rdf:type	welcome:LCCPreferencesInfo ;
			#								welcome:hasLccGenderPreference	?aGenderPref ;
			#								welcome:hasLccNationPreference	?aNationPref ;
			#								welcome:hasLccGenderPrefWeight	?gWeight ;
			#								welcome:hasLccNationPrefWeight	?nWeight .

							# get gender and nation of This agent
							?agent welcome:hasLCCPersonalInfo ?aLccPsnlInfo .
							?aLccPsnlInfo	rdf:type	welcome:LCCPersonalInfo ;
											mac:hasId	?lccId ;
											welcome:hasGender	 ?aGender ;
											welcome:hasNationality	?aNation .


							BIND(IF(LCASE(?aGenderPref) = "dont mind" || (LCASE(?aGenderPref) = "same" && ?aGender = ?commonGender) || (LCASE(?aGenderPref) = "mixed" && LCASE(?commonGender) = "mixed"), xsd:float(?gWeight), -xsd:float(?gWeight)) AS ?genderUValue)
							BIND(IF(LCASE(?aNationPref) = "dont mind" || (LCASE(?aNationPref) = "same" && ?aNation = ?commonNation) || (LCASE(?aNationPref) = "mixed" && LCASE(?commonNation) = "mixed"), xsd:float(?nWeight), -xsd:float(?nWeight)) AS ?nationUValue)

							BIND((?genderUValue + ?nationUValue) AS ?uValue)

						} GROUP BY ?feasibleCoalitionNode ?agentId ?bnode ?lccId
					}
					BIND(BNODE() AS ?uVbnode)
                }
					"""^^xsd:string ;
		] .



:ComputeUtilityValuesInLccWrite
	a bt:Insert ;
	rdfs:label "Insert: Compute Utility Values in LCC" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
                CONSTRUCT {
					?bnode	rdf:type	welcome:LCCUseCase ;
							mac:hasId	?lccId ;
							mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

                    ?feasibleCoalitionNode  welcome:hasUtilityValue ?uVbnode .
                    ?uVbnode    rdf:type    welcome:UtilityValue ;
                                welcome:isComputedBy   ?agentId ;
                                mac:hasValue        ?ttlV .
                }
                WHERE {
					{
						SELECT DISTINCT ?feasibleCoalitionNode ?agentId ?bnode ?lccId (SUM(?uValue) AS ?ttlV)
						WHERE {
							# get This agent
							?agent	rdf:type	ajan:Agent, ajan:ThisAgent ;
							#?agent	rdf:type	ajan:Agent;
									ajan:agentId	 ?agentId .

							# get Feasible Coalitions which are sent by Dedicated agent
							?bnode	rdf:type	welcome:LCCUseCase ;
									mac:hasId	?lccId ;
									mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

							# make sure that coalition contains This agent
							FILTER EXISTS { ?feasibleCoalitionNode  mac:hasMembers	?agentId . }

							# get the coalition information
							?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
													welcome:hasCommonGender	?commonGender ;
													welcome:hasCommonNation	?commonNation .

							# get preferences of This agent
							?agent	welcome:hasLCCPreferencesInfo	?aLccPrfInfo .
							?aLccPrfInfo	rdf:type	welcome:LCCPreferencesInfo ;
											welcome:hasLccGenderPreference	?aGenderPref ;
											welcome:hasLccNationPreference	?aNationPref ;
											welcome:hasLccGenderPrefWeight	?gWeight ;
											welcome:hasLccNationPrefWeight	?nWeight .

							# get gender and nation of This agent
							?agent welcome:hasLCCPersonalInfo ?aLccPsnlInfo .
							?aLccPsnlInfo	rdf:type	welcome:LCCPersonalInfo ;
											mac:hasId	?lccId ;
											welcome:hasGender	 ?aGender ;
											welcome:hasNationality	?aNation .


							BIND(IF(LCASE(?aGenderPref) = "dont mind" || (LCASE(?aGenderPref) = "same" && ?aGender = ?commonGender) || (LCASE(?aGenderPref) = "mixed" && LCASE(?commonGender) = "mixed"), xsd:float(?gWeight), -xsd:float(?gWeight)) AS ?genderUValue)
							BIND(IF(LCASE(?aNationPref) = "dont mind" || (LCASE(?aNationPref) = "same" && ?aNation = ?commonNation) || (LCASE(?aNationPref) = "mixed" && LCASE(?commonNation) = "mixed"), xsd:float(?nWeight), -xsd:float(?nWeight)) AS ?nationUValue)

							BIND((?genderUValue + ?nationUValue) AS ?uValue)

						} GROUP BY ?feasibleCoalitionNode ?agentId ?bnode ?lccId
					}
					BIND(BNODE() AS ?uVbnode)
                }
					"""^^xsd:string ;
		] .


:ComputeLccUtilities
	a bt:Write ;
	rdfs:label "Write: Compute LCC Utilities" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
                CONSTRUCT {
                    #?feasibleCoalitionNode  welcome:hasUtilityValue ?uVbnode .
                    #?uVbnode    rdf:type    welcome:UtilityValue ;
                     #           welcome:isComputedBy   ?agentId ;
                    #            mac:hasValue        ?ttlV .


					?bnode	rdf:type	welcome:LCCUseCase ;
									mac:hasId	?lccId ;
									mac:hasFeasibleCoalitions	?feasibleCoalitionNode .
                    ?feasibleCoalitionNode  welcome:hasUtilityValue ?uVbnode .
                    ?uVbnode    rdf:type    welcome:UtilityValue ;
                                welcome:isComputedBy   ?agentId ;
                                mac:hasValue        ?ttlV .
                }
                WHERE {
					{
						SELECT DISTINCT ?feasibleCoalitionNode ?agentId ?bnode ?lccId (SUM(?uValue) AS ?ttlV)
						WHERE {
							# get This agent
							?agent	rdf:type	ajan:Agent, ajan:ThisAgent ;
									ajan:agentId	 ?agentId .

							# get Feasible Coalitions which are sent by Dedicated agent
							?bnode	rdf:type	welcome:LCCUseCase ;
									mac:hasId	?lccId ;
									mac:hasFeasibleCoalitions	?feasibleCoalitionNode .


							# get Weights for Preferences from the LCC info which is written from LAKR to Exec as Temporary LCC Info
							#?tempLccInfo	rdf:type	welcome:LCCUseCase ;
							#				mac:hasId	?lccId ;
							#				welcome:hasGenderWeight		?gWeight ;
							#				welcome:hasNationalityWeight	?nWeight .

							# make sure that coalition contains This agent
							FILTER EXISTS { ?feasibleCoalitionNode  mac:hasMembers	?agentId . }

							# get a member of a coalition
							?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
													mac:hasMembers	?mAgentId .

							# make sure that the member is different than This agent
							FILTER(?mAgentId != ?agentId)

							# get gender of member agent
							?mAgent	ajan:agentId	 ?mAgentId ;
									welcome:hasLCCPersonalInfo ?mLccPsnlInfo .
							?mLccPsnlInfo	rdf:type	welcome:LCCPersonalInfo ;
											mac:hasId	?lccId2 ;
											welcome:hasGender	 ?mGender ;
											welcome:hasNationality	?mNation .
							FILTER(?lccId = ?lccId2)
							# get gender of This agent
							?agent welcome:hasLCCPersonalInfo ?aLccPsnlInfo .
							?aLccPsnlInfo	rdf:type	welcome:LCCPersonalInfo ;
											mac:hasId	?lccId3 ;
											welcome:hasGender	 ?aGender ;
											welcome:hasNationality	?aNation .
							FILTER(?lccId = ?lccId3)
							# get gender preference of This agent
							?agent	welcome:hasLCCPreferencesInfo	?aLccPrfInfo .
							?aLccPrfInfo	rdf:type	welcome:LCCPreferencesInfo ;
											welcome:hasGenderPreference	?aGenderPref ;
											welcome:hasNationPreference	?aNationPref ;
											welcome:hasGenderWeight	?gWeight ;
											welcome:hasNationalityWeight	?nWeight .

							#?du		rdf:type	welcome:DialogueUser ;
							#        welcome:hasGenderPreference ?aGenderPref ;
							#        welcome:hasNationPreference ?aNationPref ;
							#        welcome:hasGenderWeight	?gWeight ;
							#        welcome:hasNationalityWeight	?nWeight .


							BIND(IF(LCASE(?aGenderPref) = "dont mind" || (?aGenderPref = ?mGender), xsd:float(?gWeight), -xsd:float(?gWeight)) AS ?genderUValue)

							BIND(IF(LCASE(?aNationPref) = "dont mind" || (LCASE(?aNationPref) = "same" && ?aNation = ?mNation) || (LCASE(?aNationPref) = "mixed" && ?aNation != ?mNation), xsd:float(?nWeight), -xsd:float(?nWeight)) AS ?nationUValue)

							BIND((?genderUValue + ?nationUValue) AS ?uValue)

			#				BIND(IF(LCASE(?aGenderPref) = "dont mind" ||
			#				((LCASE(?aGenderPref) = "same") && ?aGender = ?mGender) ||
			#				((LCASE(?aGenderPref) = "mixed") && ?aGender != ?mGender),1 ,-1) AS ?uv)

						} GROUP BY ?feasibleCoalitionNode ?agentId ?bnode ?lccId
					}
					#BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
					#BIND( IRI(CONCAT(STR(welcome:UtilityValue),STR(?lccId) , STR(?uniqueId))) AS ?uVbnode )
					BIND(BNODE() AS ?uVbnode)
                }"""^^xsd:string ;
	] .

:ComputeLccUtilityValues
	a bt:Update ;
	rdfs:label "Update: Compute Utility Values" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
                INSERT {
                    #?feasibleCoalitionNode  welcome:hasUtilityValue ?uVbnode .
                    #?uVbnode    rdf:type    welcome:UtilityValue ;
                     #           welcome:isComputedBy   ?agentId ;
                    #            mac:hasValue        ?ttlV .


					?bnode	rdf:type	welcome:LCCUseCase ;
									mac:hasId	?lccId ;
									mac:hasFeasibleCoalitions	?feasibleCoalitionNode .
                    ?feasibleCoalitionNode  welcome:hasUtilityValue ?uVbnode .
                    ?uVbnode    rdf:type    welcome:UtilityValue ;
                                welcome:isComputedBy   ?agentId ;
                                mac:hasValue        ?ttlV .
                }
                WHERE {
					{
						SELECT ?feasibleCoalitionNode ?agentId ?bnode ?lccId (SUM(?uValue) AS ?ttlV)
						WHERE {
							# get This agent
							?agent	rdf:type	ajan:Agent ;
									ajan:agentId	 ?agentId .

							# get Feasible Coalitions which are sent by Dedicated agent
							?bnode	rdf:type	welcome:LCCUseCase ;
									mac:hasId	?lccId ;
									mac:hasFeasibleCoalitions	?feasibleCoalitionNode .


							# get Weights for Preferences from the LCC info which is written from LAKR to Exec as Temporary LCC Info
							#?tempLccInfo	rdf:type	welcome:LCCUseCase ;
							#				mac:hasId	?lccId ;
							#				welcome:hasGenderWeight		?gWeight ;
							#				welcome:hasNationalityWeight	?nWeight .

							# make sure that coalition contains This agent
							FILTER EXISTS { ?feasibleCoalitionNode  mac:hasMembers	?agentId . }

							# get a member of a coalition
							?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
													mac:hasMembers	?mAgentId .

							# make sure that the member is different than This agent
							FILTER(?mAgentId != ?agentId)

							# get gender of member agent
							?mAgent	ajan:agentId	 ?mAgentId ;
									welcome:hasLCCPersonalInfo ?mLccPsnlInfo .
							?mLccPsnlInfo	rdf:type	welcome:LCCPersonalInfo ;
											mac:hasId	?lccId2 ;
											welcome:hasGender	 ?mGender ;
											welcome:hasNationality	?mNation .
							FILTER(?lccId = ?lccId2)
							# get gender of This agent
							?agent welcome:hasLCCPersonalInfo ?aLccPsnlInfo .
							?aLccPsnlInfo	rdf:type	welcome:LCCPersonalInfo ;
											mac:hasId	?lccId3 ;
											welcome:hasGender	 ?aGender ;
											welcome:hasNationality	?aNation .
							FILTER(?lccId = ?lccId3)
							# get gender preference of This agent
							?agent	welcome:hasLCCPreferencesInfo	?aLccPrfInfo .
							?aLccPrfInfo	rdf:type	welcome:LCCPreferencesInfo ;
											welcome:hasGenderPreference	?aGenderPref ;
											welcome:hasNationPreference	?aNationPref ;
											welcome:hasGenderWeight	?gWeight ;
											welcome:hasNationalityWeight	?nWeight .

							#?du		rdf:type	welcome:DialogueUser ;
							#        welcome:hasGenderPreference ?aGenderPref ;
							#        welcome:hasNationPreference ?aNationPref ;
							#        welcome:hasGenderWeight	?gWeight ;
							#        welcome:hasNationalityWeight	?nWeight .


							BIND(IF(LCASE(?aGenderPref) = "dont mind" || (?aGenderPref = ?mGender), xsd:float(?gWeight), -xsd:float(?gWeight)) AS ?genderUValue)

							BIND(IF(LCASE(?aNationPref) = "dont mind" || (LCASE(?aNationPref) = "same" && ?aNation = ?mNation) || (LCASE(?aNationPref) = "mixed" && ?aNation != ?mNation), xsd:float(?nWeight), -xsd:float(?nWeight)) AS ?nationUValue)

							BIND((?genderUValue + ?nationUValue) AS ?uValue)

			#				BIND(IF(LCASE(?aGenderPref) = "dont mind" ||
			#				((LCASE(?aGenderPref) = "same") && ?aGender = ?mGender) ||
			#				((LCASE(?aGenderPref) = "mixed") && ?aGender != ?mGender),1 ,-1) AS ?uv)

						} GROUP BY ?feasibleCoalitionNode ?agentId ?bnode ?lccId
					}
					BIND(BNODE() AS ?uVbnode)
                }
					"""^^xsd:string ;
		] .

:MessageLccUtilities2Dedicated
	a bt:Message ;
	rdfs:label "Message: Return LCC Utility Values to Dedicated agent for LCC"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
					
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?agent	ajan:agentId	?agentId ;
									welcome:hasInvolvedInMac	?bnode .

							?bnode	rdf:type	welcome:LCCUseCase ;
									mac:hasId ?lccId ;
									mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

							?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
													welcome:hasUtilityValue ?uVbnode .

							?uVbnode    rdf:type    welcome:UtilityValue ;
										welcome:isComputedBy   ?agentId ;
										mac:hasValue        ?utilityValue .
						}
						WHERE {
							?agent	rdf:type	ajan:Agent, ajan:ThisAgent ;
									ajan:agentId	?agentId .

							?bnode	rdf:type	welcome:LCCUseCase ;
									mac:hasId ?lccId ;
									mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

							?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;

							OPTIONAL {
								?feasibleCoalitionNode	welcome:hasUtilityValue ?uVbnode .
								?uVbnode    rdf:type    welcome:UtilityValue ;
											welcome:isComputedBy   ?agentId ;
											mac:hasValue        ?utilityValue .
							}
				}"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					SELECT DISTINCT ?requestURI
					WHERE {

					?bnode	rdf:type	welcome:LCCUseCase ;
							welcome:hasDedicatedAgent	?dAgentId ;
							mac:hasId	?lccId .

					?agentUri	ajan:agentId	?dAgentId ;
								welcome:hasAddress	?address .

					BIND(CONCAT(?address, "?capability=receiveLccUtilityValues") AS ?requestURI )
					}"""^^xsd:string
	] .



:UpdateLccUseCaseInLakr
	a bt:Update ;
	rdfs:label "Update: LCC Info in LAKR" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
                DELETE{
					?bnode2	rdf:type	welcome:LCCUseCase ;
							?p2	?o2 ;
							mac:hasId	?lccId .
				}
				INSERT {
					?bnode	rdf:type	welcome:LCCUseCase ;
							?p ?o ;
							?p2 ?o2 .
                }
                WHERE {
					#OPTIONAL{
						?bnode	rdf:type	welcome:LCCUseCase ;
								?p ?o ;
								mac:hasId	?lccId .
					#}
					OPTIONAL {
						?bnode2	rdf:type	welcome:LCCUseCase ;
								?p2	?o2 ;
								mac:hasId	?lccId .
						FILTER(?bnode != ?bnode2)
					}

                }
					"""^^xsd:string ;
		] .

:InsertLccUtilities2Lakr
	a bt:Insert ;
	rdfs:label "Insert: LCC Utility Values to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

				CONSTRUCT  {
						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId ?lccId ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												welcome:hasUtilityValue ?uVbnode ;
												welcome:hasCommonGender	?cmnGender ;
												welcome:hasCommonNation	?cmnNation ;
												mac:hasMembers	?mAgentId .

						?uVbnode	rdf:type    welcome:UtilityValue ;
									welcome:isComputedBy   ?agentId ;
									mac:hasValue        ?utilityValue .
				}
				WHERE {

						#?agent	rdf:type	ajan:Agent ;
						#		ajan:agentId	?agentId .

						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId ?lccId ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												mac:hasMembers	?mAgentId .

						OPTIONAL {
							?feasibleCoalitionNode	welcome:hasCommonGender	?cmnGender ;
													welcome:hasCommonNation	?cmnNation .
						}

						OPTIONAL {
							?feasibleCoalitionNode	welcome:hasUtilityValue ?uVbnode .
							?uVbnode    rdf:type    welcome:UtilityValue ;
										welcome:isComputedBy   ?agentId ;
										mac:hasValue        ?utilityValue .
						}

						#OPTIONAL {
						#	?existingBnode	rdf:type	welcome:LCCUseCase ;
						#					mac:hasId	?lccId .
						#	FILTER(?existingBnode!=?bnode)
						#}
						#BIND(IF(BOUND(?existingBnode), ?existingBnode, ?bnode) AS ?finalBnode)

				} """^^xsd:string ;
	] .

:WriteLccUtilities2Lakr
	a bt:Write ;
	rdfs:label "Write: LCC Utility Values to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

				CONSTRUCT  {
						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId ?lccId ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												welcome:hasUtilityValue ?uVbnode ;
												mac:hasMembers	?mAgentId .

						?uVbnode	rdf:type    welcome:UtilityValue ;
									welcome:isComputedBy   ?agentId ;
									mac:hasValue        ?utilityValue .
				}
				WHERE {

						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId ?lccId ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												mac:hasMembers	?mAgentId .

						OPTIONAL {
							?feasibleCoalitionNode	welcome:hasUtilityValue ?uVbnode .
							?uVbnode    rdf:type    welcome:UtilityValue ;
										welcome:isComputedBy   ?agentId ;
										mac:hasValue        ?utilityValue .
						}

						#OPTIONAL {
						#	?existingBnode	rdf:type	welcome:LCCUseCase ;
						#					mac:hasId	?lccId .
						#	FILTER(?existingBnode!=?bnode)
						#}
						#BIND(IF(BOUND(?existingBnode), ?existingBnode, ?bnode) AS ?finalBnode)

				} """^^xsd:string ;
	] .


:InsertLccUseCaseAmount
	a bt:Insert ;
	rdfs:label "Insert: LCC Utility Values to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

				CONSTRUCT  {
						ajan:LccInstances	rdf:type	?totalInstances .
				}
				WHERE {
						{
							SELECT (COUNT(?bnode) AS ?totalInstances)
							WHERE{
								?bnode	rdf:type	welcome:LCCPreferencesInfo .
										#mac:hasId ?lccId .
								#FILTER EXISTS { ?bnode	mac:hasFeasibleCoalitions	?feasibleCoalitionNode . }
							}

						}
				} """^^xsd:string ;
	] .
:Wait4UtilityValues
	a bt:Wait ;
	rdfs:label "Wait: 4 LCC Utilities" ;
	rdfs:comment "Wait for participating agents to return their Utility Values for LCC" ;
	bt:milliseconds "50000"^^xsd:int .




:ComputeLccCoalitionValues
	a bt:Update ;
	rdfs:label "Update: Compute LCC Coalition Values" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				INSERT {
					?feasibleCoalition mac:hasValue ?coalitionValue .
				}
				WHERE{
					{
						SELECT ?feasibleCoalition ?sdValue	?sdWeight (SUM(?utilityValue) AS ?sumOfUtilities)
						WHERE {
							?lccUseCase	rdf:type	welcome:LCCUseCase ;
										welcome:hasStatus	?lccStatus ;
										mac:hasId	?lccId ;
										welcome:hasSdWeight	?sdWeight ;
										mac:hasFeasibleCoalitions	?feasibleCoalition .
							#FILTER NOT EXISTS { ?lccUseCase	welcome:hasStatus	"Complete" .}
							FILTER(LCASE(?lccStatus) = "running")

							?feasibleCoalition	rdf:type	mac:CSGP-Coalition .
							OPTIONAL {
							?feasibleCoalition	welcome:hasUtilityValue	?utilityValueNode .
							?utilityValueNode	rdf:type	welcome:UtilityValue ;
												mac:hasValue	?utilityValue .
							}
							OPTIONAL {
								?feasibleCoalition	welcome:hasStandardDeviation	?sdValue .
							}
						} GROUP BY ?feasibleCoalition ?sdValue	?sdWeight
					}
					#BIND(IF(BOUND(?sumOfUtilities), ((?sumOfUtilities * (1-?sdWeight)) - (?sdWeight * ?sdValue)), 0) AS ?coalitionValue)
                    BIND(IF(BOUND(?sumOfUtilities), ?sumOfUtilities, 0) AS ?boundSumOfUtils)
                    BIND(xsd:float(?sdValue) AS ?fSdValue)
                    BIND(xsd:float(?sdWeight) AS ?fSdWeight)
                    BIND(xsd:float(?boundSumOfUtils) AS ?fBoundSumOfUtils)
                    BIND( ((1-?fSdWeight) * ?fBoundSumOfUtils) - (?fSdWeight * ?fSdValue) AS ?coalitionValue)


					#{
					#	SELECT ?feasibleCoalition ?sdValue	?sdWeight (SUM(?utilityValue) AS ?sumOfUtilities)
					#	WHERE {
					#		?lccUseCase	rdf:type	welcome:LCCUseCase ;
					#					welcome:hasStatus	?lccStatus ;
					#					mac:hasId	?lccId ;
					#					welcome:hasSdWeight	?sdWeight ;
					#					mac:hasFeasibleCoalitions	?feasibleCoalition .
					#		#FILTER NOT EXISTS { ?lccUseCase	welcome:hasStatus	"Complete" .}
					#		FILTER(LCASE(?lccStatus) = "running")

					#		?feasibleCoalition	rdf:type	mac:CSGP-Coalition .
					#		OPTIONAL {
					#		?feasibleCoalition	welcome:hasUtilityValue	?utilityValueNode .
					#		?utilityValueNode	rdf:type	welcome:UtilityValue ;
					#							mac:hasValue	?utilityValue .
					#		}
					#		OPTIONAL {
					#			?feasibleCoalition	welcome:hasStandardDeviation	?sdValue .
					#		}
					#	} GROUP BY ?feasibleCoalition ?sdValue	?sdWeight
					#}
					#BIND(IF(BOUND(?sumOfUtilities), ?sumOfUtilities, 0) AS ?coalitionValue)
				}
					"""^^xsd:string ;
		] .



:ComputeLccRuntime
	a bt:Update ;
	rdfs:label "Update: Compute LCC Runtime" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				INSERT {
					?lccUseCase	mac:hasRuntime	?lccRuntimeInSeconds .
				}
				WHERE{
					?lccUseCase	rdf:type	welcome:LCCUseCase ;
								welcome:hasStatus	?lccStatus ;
								mac:hasId	?lccId .

					FILTER(LCASE(?lccStatus) = "completed" || LCASE(?lccStatus) = "failed" || LCASE(?lccStatus) = "no solution found")
					OPTIONAL {
						?lccUseCase	welcome:hasStartTime	?startTime ;
									welcome:hasEndTime	?endTime .
					}
					FILTER(BOUND(?startTime) && BOUND(?endTime))

					BIND( (DAY(?startTime)*86400 + HOURS(?startTime)*3600 + MINUTES(?startTime)*60 + SECONDS(?startTime)) AS ?startTimeInSeconds)
					BIND( (DAY(?endTime)*86400 + HOURS(?endTime)*3600 + MINUTES(?endTime)*60 + SECONDS(?endTime)) AS ?endTimeInSeconds)
					BIND( ?endTimeInSeconds - ?startTimeInSeconds AS ?lccRuntimeInSeconds)
				}
					"""^^xsd:string ;
		] .

:ProduceSolveLccEvent
	a bt:EventProducer ;
	rdfs:label "EventProducer: Solve LCC Event" ;
	ajan:event agents:SolveLccEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """

						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .

:WriteCompleteUtilities2Exec
	a bt:Write ;
	rdfs:label "Write: Utilities to LAKR" ;
	rdfs:comment "Write LCC Utility Values of all participating agents to Execution Knowledge" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

				CONSTRUCT  {
						?newbnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId ?lccId ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												welcome:hasUtilityValue ?uVbnode ;
												mac:hasMembers	?mAgentId .

						?uVbnode	rdf:type    welcome:UtilityValue ;
									welcome:isComputedBy   ?agentId ;
									mac:hasValue        ?utilityValue .
				}
				WHERE {

						{?bnode	rdf:type	welcome:LCCUseCase ;
								welcome:hasStatus	"completed" ;
								mac:hasId ?lccId ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												welcome:hasUtilityValue ?uVbnode .

						?uVbnode    rdf:type    welcome:UtilityValue ;
									welcome:isComputedBy   ?agentId ;
									mac:hasValue        ?utilityValue .
						}
						BIND(BNODE() AS ?newbnode)
				} """^^xsd:string ;
	] .


:HandleReceiveLccUtilitiesEvent
	a bt:HandleQueueEvent ;
	rdfs:label "EventHandler: Receive Utilities" ;
	rdfs:comment "Receive LCC Utility Values from Participants Event Handler" ;
	bt:event agents:ReceiveLccUtilityValuesEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:ReplaceLccProcessTypeOLDDDD
	a bt:HandleQueueEvent ;
	rdfs:label "EventHandler: Receive Utilities" ;
	rdfs:comment "Receive LCC Utility Values from Participants Event Handler" ;
	bt:event agents: ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?bnode	rdf:type	welcome:CurrentlyRunningLCCUseCase ;
								mac:hasId ?lccId ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												welcome:hasUtilityValue ?uVbnode .

						?uVbnode    rdf:type    welcome:UtilityValue ;
									welcome:isComputedBy   ?agentId ;
									mac:hasValue        ?utilityValue .
					}
					WHERE {
						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId ?lccId ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												welcome:hasUtilityValue ?uVbnode .

						?uVbnode    rdf:type    welcome:UtilityValue ;
									welcome:isComputedBy   ?agentId ;
									mac:hasValue        ?utilityValue .
		#				?s ?p ?o .
									}"""^^xsd:string ;
				] .



:ReplaceLccProcessType
	a bt:Update ;
	rdfs:label "Update: replace lccUseCase with Currentlyrunning..." ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId ?lccId ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												welcome:hasUtilityValue ?uVbnode .

						?uVbnode    rdf:type    welcome:UtilityValue ;
									welcome:isComputedBy   ?agentId ;
									mac:hasValue        ?utilityValue .					}
					INSERT{
						?bnode	rdf:type	welcome:CurrentlyRunningLCCUseCase ;
								mac:hasId ?lccId ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												welcome:hasUtilityValue ?uVbnode .

						?uVbnode    rdf:type    welcome:UtilityValue ;
									welcome:isComputedBy   ?agentId ;
									mac:hasValue        ?utilityValue .
					}
					WHERE{
						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId ?lccId ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												welcome:hasUtilityValue ?uVbnode .

						?uVbnode    rdf:type    welcome:UtilityValue ;
									welcome:isComputedBy   ?agentId ;
									mac:hasValue        ?utilityValue .
					}
					"""^^xsd:string ;
		] .

:WriteAllIncompleteLccProcess2Ek
	a bt:Write ;
	rdfs:label "Write: All Incomplete LCCs 2 LAKR" ;
	rdfs:comment "" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					CONSTRUCT {
						?agent	rdf:type	ajan:Agent ;
								ajan:agentId	?agentId ;
								welcome:hasInvolvedInMac ?bnode .

						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId ?lccId .

					}
					WHERE {
						?agent	rdf:type	ajan:Agent ;
								ajan:agentId	?agentId ;
								welcome:hasInvolvedInMac ?bnode .

						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId ?lccId .

						FILTER NOT EXISTS {?bnode	welcome:hasStatus	"Completed" .}

					}


		"""^^xsd:string ;
	] .


:RemoveUnmatchingLccProcesses
	a bt:Update ;
	rdfs:label "Update: Remove Unmatching LCC Processes from EK" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?agent	welcome:hasInvolvedInMac ?bnode .
						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId	?lccIdFromLakr .
					}
					WHERE{
						?agent	rdf:type	ajan:Agent ;
								welcome:hasInvolvedInMac	?bnode .

						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId	?lccIdFromLakr .

						?bnode2	rdf:type	welcome:CurrentlyRunningLCCUseCase ;
								mac:hasId	?currentLccId .
						FILTER(?lccIdFromLakr != ?currentLccId)
					}
					"""^^xsd:string ;
		] .

:InsertLccUtilitiesOfSender2Lakr
	a bt:Insert ;
	rdfs:label "Insert: LCC Utilities 2 LAKR" ;
	rdfs:comment "Insert LCC Utility Values of Participants to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """

					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					CONSTRUCT {

						?bnode	rdf:type	welcome:LCCUseCase ;
						#		mac:hasId	?lccId ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												welcome:hasUtilityValue ?uVbnode .

						?uVbnode    rdf:type    welcome:UtilityValue ;
									welcome:isComputedBy   ?agentId ;
									mac:hasValue        ?utilityValue .

					}
					WHERE {
					#	?bnode	rdf:type	welcome:CurrentlyRunningLCCUseCase ;
					#			mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

					#	?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
					#							welcome:hasUtilityValue ?uVbnode .

					#	?uVbnode    rdf:type    welcome:UtilityValue ;
					#				welcome:isComputedBy   ?agentId ;
					#				mac:hasValue        ?utilityValue .

					#	?bnode2	rdf:type	welcome:LCCUseCase .

						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId	?lccId ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												welcome:hasUtilityValue ?uVbnode .

						?uVbnode    rdf:type    welcome:UtilityValue ;
									welcome:isComputedBy   ?agentId ;
									mac:hasValue        ?utilityValue .

						#BIND(BNODE() AS ?utValue)
					}


		"""^^xsd:string ;
	] .

:WriteLccUtilitiesOfSender2Lakr
	a bt:Write ;
	rdfs:label "Write: LCC Utilities 2 LAKR" ;
	rdfs:comment "Write LCC Utility Values of Participants to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {

						#?bnode	rdf:type	welcome:LCCUseCase ;
						#		mac:hasId	?lccId ;
						#		mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												welcome:hasUtilityValue ?utValue .

						?utValue    rdf:type    welcome:UtilityValue ;
									welcome:isComputedBy   ?agentId ;
									mac:hasValue        ?utilityValue .

					}
					WHERE {
					#	?bnode	rdf:type	welcome:CurrentlyRunningLCCUseCase ;
					#			mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

					#	?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
					#							welcome:hasUtilityValue ?uVbnode .

					#	?uVbnode    rdf:type    welcome:UtilityValue ;
					#				welcome:isComputedBy   ?agentId ;
					#				mac:hasValue        ?utilityValue .

					#	?bnode2	rdf:type	welcome:LCCUseCase .

						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId	?lccId ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												welcome:hasUtilityValue ?uVbnode .

						?uVbnode    rdf:type    welcome:UtilityValue ;
									welcome:isComputedBy   ?agentId ;
									mac:hasValue        ?utilityValue .

						BIND(BNODE() AS ?utValue)
					}


		"""^^xsd:string ;
	] .



:HandleSolveLccEvent
	a bt:HandleQueueEvent ;
	rdfs:label "EventHandler: Solve LCC Event" ;
	rdfs:comment "HandleEvent to Solve LCC Use Case with BOSS Algorithm" ;
	bt:event agents:SolveLccEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .


:WriteLCCCoalitionValues2EKB
	a bt:Write ;
	rdfs:label "Write: LCC Coalition Values" ;
	rdfs:comment "Write LCC Coalition Values to Execution Knowledge" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge  ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					CONSTRUCT {
						#?bnode	rdf:type	welcome:LCCUseCase ;
						#		mac:hasId	?lccId ;
						#		mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												mac:hasMembers	?memberAgent ;
												mac:hasValue ?coalitionValue .

					}
					WHERE {
						?bnode	rdf:type	welcome:LCCUseCase ;
								welcome:hasStatus	?lccStatus ;
								mac:hasId	?lccId ;
								mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												mac:hasMembers	?memberAgent ;
												mac:hasValue ?coalitionValue .

						FILTER(LCASE(?lccStatus) = "running")
					}


		"""^^xsd:string ;
	] .

:SolveLcc_BOSS
	a bt:BOSS ;
	rdfs:label "BOSS: Solve LCC Use Case" ;
	bt:query [
				a bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:targetBase ajan:ExecutionKnowledge ;
				bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					Construct {
						?lccSubject	rdf:type	mac:MACProblemInstance ;
									mac:hasNumberOfAgents	?numOfAgents ;
									mac:hasParticipants	?pAgentId ;
									mac:hasId	?lccId ;
									mac:hasFeasibleCoalitions	?feasibleCoalitionNode .
						?lccSubject	mac:hasNonExistentCoalitionValue	"-1000000" .


						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												mac:hasMembers	?mAgentId ;
												mac:hasValue ?coalitionValue .
						#?s ?p ?o .
					}
					Where{

						#?s ?p ?o .
						?lccSubject	rdf:type	welcome:LCCUseCase ;
									mac:hasNumberOfAgents	?numOfAgents ;
									mac:hasParticipants	?pAgentId ;
									mac:hasId	?lccId ;
									mac:hasFeasibleCoalitions	?feasibleCoalitionNode .

						?feasibleCoalitionNode	rdf:type	mac:CSGP-Coalition ;
												mac:hasMembers	?mAgentId ;
												mac:hasValue ?coalitionValue .
					}
					"""^^xsd:string ;
			] .

:NormalizeCsValues
	a bt:Update ;
	rdfs:label "Update: Normalize CS values" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				DELETE{
					?lccSolution	mac:hasValue	?csValue .
				}
				INSERT {
					?lccSolution	mac:hasValue	?normalizedCsValue .
				}
				WHERE{
					?lccSubject	rdf:type	welcome:LCCUseCase .

					OPTIONAL {
						?lccSubject	mac:hasSolution	?lccSolution ;
									mac:hasMinCsValue ?minCsValue .

						# Select LCC Use Case Solutions
						?lccSolution	rdf:type	mac:CSGP-CoalitionStructure ;
										mac:hasValue	?csValue .
						BIND((?csValue + 5 - ?minCsValue) AS ?normalizedCsValue)
							}

				}
					"""^^xsd:string ;
		] .
:BroadcastLccResult
	a bt:Broadcast ;
	rdfs:label "Broadcast: LCC Result"^^xsd:string ;
	rdfs:comment "Send the Result of LCC_CSGP to other participating agents"^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
					
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							#?agentUri	rdf:type	ajan:Agent ;
							#			ajan:agentId	?agentId .

							?lccSubject	rdf:type	welcome:LCCUseCase ;
										mac:hasId	?lccId ;
										mac:hasSolution	?lccSolution ;
										mac:hasMinCsValue ?minCsValue ;
										welcome:hasDedicatedAgent	?dAgentId ;
										welcome:hasStatus	?lccStatus .

							?lccSolution	rdf:type	mac:CSGP-CoalitionStructure ;
											mac:hasValue	?csValue ;
											mac:hasRank		?csRank ;
											mac:hasSolutionOf	?lccSubject ;
											mac:hasMembers	?coalition .

							?coalition	rdf:type	mac:CSGP-Coalition ;
											mac:hasMembers	?memberAgent .
						}
						WHERE {
							#?agentUri	rdf:type	ajan:Agent  ;
							#			ajan:agentId	?agentId .

							# Select LCC Use Case Problem Info
							?lccSubject	rdf:type	welcome:LCCUseCase ;
										mac:hasId	?lccId ;
										welcome:hasDedicatedAgent	?dAgentId .

							OPTIONAL {
								?lccSubject	mac:hasSolution	?lccSolution ;
						          mac:hasMinCsValue ?minCsValue .
								# Select LCC Use Case Solutions
								?lccSolution	rdf:type	mac:CSGP-CoalitionStructure ;
												mac:hasValue	?csValue ;
												mac:hasRank		?csRank ;
												mac:hasSolutionOf	?lccSubject ;
												mac:hasMembers	?coalition .
							}

							OPTIONAL {
								?coalition	rdf:type	mac:CSGP-Coalition ;
											mac:hasMembers	?memberAgent .
							}
#							BIND( IF( BOUND(?lccSolution) && BOUND(?csValue) && BOUND(?csRank) && BOUND(?coalition) &&
#										BOUND(?memberAgent), "Completed", "Failed") AS ?lccStatus)
							BIND( IF( BOUND(?lccSolution) && BOUND(?csValue) && BOUND(?csRank), "Completed", "No Solution Found") AS ?lccStatus)

							}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					SELECT DISTINCT ?requestURI
					WHERE {

					?bnode	rdf:type	welcome:LCCUseCase ;
							mac:hasId	?lccId ;
							mac:hasParticipants	?pAgentId .

					?agent	rdf:type	ajan:Agent, ajan:ThisAgent ;
							ajan:agentId	?agentId .

					FILTER(?pAgentId != ?agentId)
					?agentUri	ajan:agentId	?pAgentId ;
								welcome:hasAddress	?address .

					BIND(CONCAT(?address, "?capability=finalizeLccProcess") AS ?requestURI )
					}"""^^xsd:string
	] .


:BroadcastLccFailed
	a bt:Broadcast ;
	rdfs:label "Broadcast: LCC Failed"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
					
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?lccSubject	rdf:type	welcome:LCCUseCase ;
										mac:hasId	?lccId ;
										welcome:hasDedicatedAgent	?dAgentId ;
										mac:hasStatus	?lccStatus .
						}
						WHERE {
							# Select LCC Use Case Problem Info
							?lccSubject	rdf:type	welcome:LCCUseCase ;
										mac:hasId	?lccId ;
										welcome:hasDedicatedAgent	?dAgentId .


							BIND( "Failed" AS ?lccStatus)

							}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					SELECT DISTINCT ?requestURI
					WHERE {

					?bnode	rdf:type	welcome:LCCUseCase ;
							mac:hasId	?lccId ;
							mac:hasParticipants	?pAgentId .

					?agent	rdf:type	ajan:Agent, ajan:ThisAgent ;
							ajan:agentId	?agentId .

					FILTER(?pAgentId != ?agentId)
					?agentUri	ajan:agentId	?pAgentId ;
								welcome:hasAddress	?address .

					BIND(CONCAT(?address, "?capability=finalizeLccProcess") AS ?requestURI )
					}"""^^xsd:string
	] .


:BroadcastTestToView
	a bt:Broadcast ;
	rdfs:label "Display Execution Knowledge"^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
						
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
						VALUES ?requestURI { "http://localhost:8092/teacherPanel/inform"}
					}"""^^xsd:string
	] .



:Message2TeacherLccResult
	a bt:Message ;
	rdfs:label "Message: LCC Result 2 Teacher"^^xsd:string ;
	rdfs:comment "Send Result of LCC Process to Teacher"^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
					{
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
  					} UNION {
						VALUES ?hdrName {"X-Msg-Type"}
						VALUES ?fieldValue {"Groups"}
					}						
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							#?lccSubject	rdf:type	welcome:LCCUseCase ;
							#			mac:hasId	?lccId ;
							#			mac:hasSolution	?lccSolution ;
							#			welcome:hasDedicatedAgent	?dAgentId ;
							#			welcome:hasStatus	?lccStatus .

							#?lccSolution	rdf:type	mac:CSGP-CoalitionStructure ;
							#				mac:hasValue	?csValue ;
							#				mac:hasRank		?csRank ;
							#				mac:hasSolutionOf	?lccSubject ;
							#				mac:hasMembers	?coalition .

							#?coalition	rdf:type	mac:CSGP-Coalition ;
							#				mac:hasMembers	?memberAgent .


							?lccSubject	rdf:type	welcome:LCCUseCase ;
										welcome:hasId	?lccId ;
										welcome:hasSolution	?lccSolution ;
										welcome:hasDedicatedAgent	?dAgentId ;
										welcome:hasStatus	?lccStatus .

							?lccSolution	rdf:type	welcome:Grouping ;
											welcome:hasValue	?csValue ;
											welcome:hasRank		?csRank ;
											welcome:hasSolutionOf	?lccSubject ;
											welcome:hasMembers	?coalition .

							?coalition	rdf:type	welcome:Group ;
										welcome:hasMembers	?memberAgent .

						}
						WHERE {
							# Select LCC Use Case Problem Info
							?lccSubject	rdf:type	welcome:LCCUseCase ;
										mac:hasId	?lccId ;
										welcome:hasDedicatedAgent	?dAgentId .

							OPTIONAL {
								?lccSubject	mac:hasSolution	?lccSolution .
								# Select LCC Use Case Solutions
								?lccSolution	rdf:type	mac:CSGP-CoalitionStructure ;
												mac:hasValue	?csValue ;
												mac:hasRank		?csRank ;
												mac:hasSolutionOf	?lccSubject ;
												mac:hasMembers	?coalition .

								?coalition	rdf:type	mac:CSGP-Coalition ;
											mac:hasMembers	?memberAgent .
							}
							BIND( IF( BOUND(?lccSolution) && BOUND(?csValue) && BOUND(?csRank) && BOUND(?coalition) &&
										BOUND(?memberAgent), "Completed", "No Solution Found") AS ?lccStatus)

							}
				"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>


					SELECT ?requestURI
					WHERE {
						# LINES TO SEND TO DUMMY ENDPOINT
						VALUES ?requestURI { "http://localhost:8092/teacherPanel/inform"}
						# LINES TO SEND TO ACTUAL ENDPOINT
					#	welcome:dispatcher welcome:hasAddress ?partialAddress .
					#	BIND(CONCAT(STR(?partialAddress), "/welcome/integration/workflow/dispatcher/messageToTeacher") AS ?requestURI )
					}
					"""^^xsd:string
	] .


:Message2TeacherLccFailed
	a bt:Message ;
	rdfs:label "Message: LCC Failed 2 Teacher"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
					{
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
  					} UNION {
						VALUES ?hdrName {"X-Msg-Type"}
						VALUES ?fieldValue {"Groups"}
					}						
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?lccSubject	rdf:type	welcome:LCCUseCase ;
										mac:hasId	?lccId ;
										welcome:hasDedicatedAgent	?dAgentId ;
										welcome:hasStatus	?lccStatus .
						}
						WHERE {
							# Select LCC Use Case Problem Info
							?lccSubject	rdf:type	welcome:LCCUseCase ;
										mac:hasId	?lccId ;
										welcome:hasDedicatedAgent	?dAgentId .

							BIND( "Failed" AS ?lccStatus)

							}
				"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>


					SELECT ?requestURI
					WHERE {
						# LINES TO SEND TO DUMMY ENDPOINT
						VALUES ?requestURI { "http://localhost:8092/teacherPanel/inform"}
						# LINES TO SEND TO ACTUAL ENDPOINT
					#	welcome:dispatcher welcome:hasAddress ?partialAddress .
					#	BIND(CONCAT(STR(?partialAddress), "/welcome/integration/workflow/dispatcher/messageToTeacher") AS ?requestURI )
					}
					"""^^xsd:string
	] .

:ProduceFinalizeLccEvent
	a bt:EventProducer ;
	rdfs:label "EventProducer: Finalize LCC Event" ;
	ajan:event agents:FinalizeLccProcessEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?agentUri	rdf:type	ajan:Agent ;
										ajan:agentId	?agentId .

							?lccSubject	rdf:type	welcome:LCCUseCase ;
										mac:hasId	?lccId ;
										mac:hasSolution	?lccSolution ;
										welcome:hasDedicatedAgent	?dAgentId ;
										mac:hasMinCsValue ?minCsValue ;
										welcome:hasStatus	?lccStatus .

							?lccSolution	rdf:type	mac:CSGP-CoalitionStructure ;
											mac:hasValue	?csValue ;
											mac:hasRank		?csRank ;
											mac:hasSolutionOf	?lccSubject ;
											mac:hasMembers	?coalition .

							?coalition	rdf:type	mac:CSGP-Coalition ;
											mac:hasMembers	?memberAgent .
						}
						WHERE {
							?agentUri	rdf:type	ajan:Agent  ;
										ajan:agentId	?agentId .

							# Select LCC Use Case Problem Info
							?lccSubject	rdf:type	welcome:LCCUseCase ;
										mac:hasId	?lccId ;
										welcome:hasDedicatedAgent	?dAgentId .

							OPTIONAL {
								?lccSubject	mac:hasSolution	?lccSolution ;
											mac:hasMinCsValue ?minCsValue .
								# Select LCC Use Case Solutions
								?lccSolution	rdf:type	mac:CSGP-CoalitionStructure ;
												mac:hasValue	?csValue ;
												mac:hasRank		?csRank ;
												mac:hasSolutionOf	?lccSubject ;
												mac:hasMembers	?coalition .
							}

							OPTIONAL {
								?coalition	rdf:type	mac:CSGP-Coalition ;
											mac:hasMembers	?memberAgent .
							}
#							BIND( IF( BOUND(?lccSolution) && BOUND(?csValue) && BOUND(?csRank) && BOUND(?coalition) &&
#										BOUND(?memberAgent), "Completed", "Failed") AS ?lccStatus)
							BIND( IF( BOUND(?lccSolution) && BOUND(?csValue) && BOUND(?csRank), "Completed", "No Solution Found") AS ?lccStatus)

							}	"""^^xsd:string ;
				] .


:HandleFinalizeLccEvent
	a bt:HandleQueueEvent ;
	rdfs:label "EventHandler: Finalize LCC Event" ;
	rdfs:comment "Handle Finalize LCC Process Event" ;
	bt:event agents:FinalizeLccProcessEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """

					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:HandleLccFailedEvent
	a bt:HandleQueueEvent ;
	rdfs:label "EventHandler: Lcc Failed Event" ;
	rdfs:comment "" ;
	bt:event agents:LccFailureEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """

					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .



:WriteLccResult
	a bt:Write ;
	rdfs:label "Write: LCC Result 2 LAKR" ;
	rdfs:comment "Write LCC Result to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge  ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

					CONSTRUCT {
						?lccSubject	rdf:type	welcome:LCCUseCase, mac:MACProblemInstance ;
									welcome:hasEndTime	?now ;
									mac:hasId	?lccId ;
									mac:hasSolution	?lccSolution ;
									welcome:hasDedicatedAgent	?dAgentId ;
									mac:hasMinCsValue ?minCsValue ;
									welcome:hasStatus	?lccStatus .

						?lccSolution	rdf:type	mac:CSGP-CoalitionStructure ;
										mac:hasValue	?csValue ;
										mac:hasRank		?csRank ;
										mac:hasSolutionOf	?lccSubject ;
										mac:hasMembers	?coalition .

						?coalition	rdf:type	mac:CSGP-Coalition ;
									mac:hasMembers	?memberAgent .
						#?s ?p ?o .

					}
					WHERE {
						# Select LCC Use Case Problem Info
						?lccSubject	rdf:type	welcome:LCCUseCase ;
									welcome:hasStatus	?lccStatus ;
									mac:hasId	?lccId ;
									welcome:hasDedicatedAgent	?dAgentId .

						OPTIONAL {
							?lccSubject	mac:hasSolution	?lccSolution ;
										mac:hasMinCsValue ?minCsValue .
							# Select LCC Use Case Solutions
							?lccSolution	rdf:type	mac:CSGP-CoalitionStructure ;
											mac:hasValue	?csValue ;
											mac:hasRank		?csRank ;
											mac:hasSolutionOf	?lccSubject ;
											mac:hasMembers	?coalition .

						#	?coalition	rdf:type	mac:CSGP-Coalition ;
						#				mac:hasMembers	?memberAgent .
						}
						#?s ?p ?o .
						BIND(NOW() AS ?now)
					}


		"""^^xsd:string ;
	] .



#-------------LCC Protocol BT Nodes END--------------------------



#-------------CHC Protocol BTs START--------------------------

:CHCProtocolBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "CHC Protocol Behavior Tree" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
				a bt:Sequence ;
				bt:hasChildren (
						:HandleCHCProtocolEvent
						:WriteThisAgentIdToEKB
						[
							a bt:Priority ;
							bt:hasChildren (
									[
										a bt:Sequence ;
										bt:hasChildren (
												:ConditionAgentRunningCHCProcess
												:MessageAlreadyRunningCHCProcess
												)
									]
										#[
										#	a bt:Sequence ;
										#	bt:hasChildren (
										#			:ConditionAgentInvolvedInCHCProcess
										#			[
										#				a bt:Priority ;
										#				bt:hasChildren (
										#						[
										#							a bt:Invert ;
										#							bt:hasChild
										#									:MessageWantToStartNewCHCProcess
										#						]
										#						[
										#							a bt:Invert ;
										#							bt:hasChild
										#									:ConditionStillWantToStartCHC
										#						]
										#
										#						)
										#			]
										#			)
										#]
									:EventProducerExecuteCHCProcessEvent
											)
						]
								)
					]
				] .

:ExecutingCHCProcessBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "ExecutingCHCProcessBT Behavior Tree" ;
	bt:hasChild [
					a bt:Priority ;
					bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
													:HandleExecuteCHCProcessEvent
													:CHCStartFlagOn
													:WriteThisAgentIdToEKB
													:Message2AppStartingCHC
													:Message2WPMUpdateStatus2InCoordination
#PopulateLARRepos BT (by Elena) is used to populate LAR but since running locally, LAR is not populated. Uncomment nodes related to LAR when running globally. <start>
#													:EventProducerPopulateLAR
#													:Wait4LAR
#													[
#														a bt:Priority ;
#														bt:hasChildren (
#																:ConditionLARPopulated
#																[
#																	a bt:Sequence ;
#																	bt:hasChildren (
#																		:EventProducerPopulateLAR
#																		:Wait4LAR
#																		:ConditionLARPopulated
#																					)
#																]
#																		)
#													]
# <end>
													:WriteChcProblemInstance2Execution
													:WriteChcPiAndChcRunningFlag2Lakr
													:UpdateExtractChcPersonalInfo
													#:JustFail
													:WritePersonalInfoRequestContent2Execution
													:Broadcast4PersonalInfo
													:InsertCHCWasBroadcasted2Execution
													:Wait4ChcPersonalInfo
													[
														a bt:Priority ;
														bt:hasChildren (
																[
																	a bt:Invert ;
																	bt:hasChild
																			:ConditionAnyoneNotReturnedPersonalInfo
																]
																:RemoveNotRespondingAgentsFromCHCProblemInstance
																# If no one responds to Dedicated, then dedicated removes them all from
																# use case problem instance. Then since there is no participant agent
																# anymore, Dedicated fails to send the broadcasts.
																# However, this is not an error. Since an important step fails in
																# the protocol, Dedicated produces CHCFailure Event.
																# Then it informs the app that chc failed. So the process fails successfully.
																		)
													]
													:WriteSimilaritiesRequestContent2Execution
													:Broadcast4SimilarityValues
													:WriteCHCPreferences2Execution
													:ComputeSimilarities4CHC
													:WriteSimilarities2LAKR
													:Wait4SimilarityValues
													#[
													#	a bt:Priority ;
													#	bt:hasChildren (
																:ConditionEveryoneReturnedSimilarities
																#:WriteZeroSimilarity4NotRespondingAgents
													#					)
													#]
													:EventProducerSolverCHCEvent
															)
										]
										:EventProducerCHCFailureEvent
									)
				] .

:SharingCHCPersonalInfoBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "SharingCHCPersonalInfoBT Behavior Tree" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
				a bt:Sequence ;
				bt:hasChildren (
							:HandleShareCHCPersonalInfoEvent
							:WriteCHCPersonalInfo2Exec
							:Message2DedicatedChcPersonalInfo
							:Message2WPMUpdateStatus2InCoordination
							:AddAgentInvolvedInCHCFlag
							# CHC Personal Info is written from A.K to E.K. Then I attach the Id of CHC Process to the CHC Personal Info and send this info to
							# Dedicated agent. Lastly, I write "?agent :isInvolvedInCHC ?chcId." to A.K.
							# If it is necessary to write the CHC Personal Info for a particulat CHC Process (i.e. set of triples in which CHC Id is attached to Personal Info),
							# then add an extra write node at the end or modify "WriteAgentInvolvedInCHC" node.
								)
					]
				] .



:ReceiveCHCPersonalInfoBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "ReceiveCHCPersonalInfoBT Behavior Tree" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
				a bt:Sequence ;
				bt:hasChildren (
							:HandleReceiveCHCPersonalInfoEvent
							:WritePersonalInfo2LAKR
								)
					]
				] .


:SharingCHCSimilaritiesBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "SharingCHCSimilaritiesBT Behavior Tree" ;
	bt:hasChild [
			a bt:UntilFail ;
			bt:hasChild [
					a bt:Sequence ;
					bt:hasChildren (
								:HandleShareCHCSimilaritiesEvent
								#:WriteAll2Lakr
								:WriteCHCPreferences2Execution
#								:UpdateCHCPrefInstance2LAKR
								:ComputeSimilarities4CHC
								:MessageSimilarities2Dedicated
								:WriteSimilarities2LAKR
									)
						]
				] .

:ReceivingCHCSimilaritiesBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "ReceivingCHCSimilaritiesBT Behavior Tree" ;
	bt:hasChild [
			a bt:UntilFail ;
			bt:hasChild [
					a bt:Sequence ;
					bt:hasChildren (
								:HandleReceiveCHCSimilaritiesEvent
								:WriteReceivedSimilarities2LAKR
								)
						]
				] .

:SolvingCHCBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "SolvingCHCBT Behavior Tree" ;
	bt:hasChild [
					a bt:Priority ;
					bt:hasChildren (
							[
								a bt:Sequence ;
								bt:hasChildren (
										:HandleSolveCHCEvent
										#:ComputeCHCReciprocalScores
										:ComputeCHCReciprocalSimilarities
										:ComputeCHCConstraints
										#:WriteComputedReciprocalSimilarities
										:WriteReciprocalScores2Lakr
										#:ComputeLccDistancesInLakr
										#:HdbscanAlgorithm
										:ClusteringSolver_HDBSCAN
										:WriteCHCResultRequestContent2Execution
										:BroadcastHDBSCANResult
										:EventProducerFinalizeCHCProcessEvent
												)
							]
							:EventProducerCHCFailureEvent
									)
				] .

:FinalizingCHCProcessBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Finalizing CHC Process Behavior Tree" ;
	bt:hasChild [
					a bt:Sequence ;
					bt:hasChildren (
								:HandleFinalizeCHCProcessEvent
								:WriteThisAgentIdToEKB
								[
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:ConditionCHCSucceeded
												:Message2AppResultOfCHC
												:WriteCHCResult2Lakr
											)
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
												:Message2AppChcFailure
												:UpdateChcStatus2Failure
												#:WriteChcFailed2Lakr
											)
										]
									)
								]
								:RemoveAgentInCHCAndComputeRuntime
								:UpdateAgentRunningChcFlagOff
								[
									a bt:Priority ;
									bt:hasChildren (
											:ConditionAgentInAnyMAC
											:Message2WPMUpdateStatus2Active
													)
								]
									)
				] .


:CHCFailureBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "CHC Process/Protocol Failure Behavior Tree" ;
	bt:hasChild [
					a bt:Sequence ;
					bt:hasChildren (
										:HandleCHCFailureEvent
										:WriteThisAgentIdToEKB
										:EventProducerFinalizeCHCProcessEvent
										[
											a bt:Priority ;
											bt:hasChildren (
													[
														a bt:Invert ;
														bt:hasChild 
															:ConditionWasCHCBuiltAndBroadcasted
													]
													:BroadcastCHCFailed
											)
										]

									)
				] .



#---------------MAJAN BT Nodes---------------



#------------LCC Protocol Nodes -------------------------------



:HDBSCAN
	a bt:HDBSCAN ;
	rdfs:label "Run HDBSCAN" ;
	bt:query [
				a bt:ConstructQuery ;
				bt:originBase ajan:AgentKnowledge ;
				bt:targetBase ajan:AgentKnowledge ;
				bt:sparql """
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
			PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
			PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
			PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
			CONSTRUCT{
				?usecase 	mac:hasMacProblemId  ?usecaseID;
						mac:hasPerfectMatchScore ?perfectMatchScore;
						mac:hasNumberOfAgents ?numberOfAgents;
						mac:hasParticipants ?agents.
				_:bNodeSimilarity 	mac:hasSubjectAgent ?a1;
							mac:hasObjectAgent ?a2;
							mac:isComputedForProblemId  ?usecaseId;
							mac:hasSimilarityScore ?totalSml.
				}
			WHERE {
				{
				welcome:UseCase welcome:toBeSolved ?usecase.
				?usecase 	mac:hasNumberOfAgents ?numberOfAgents;
						mac:hasParticipants ?agents;
						mac:hasMacProblemId  ?usecaseID;
						welcome:hasAgeWeight ?ageWeight;
						welcome:hasGenderWeight ?genWeight;
						welcome:hasFamilyWeight	?famWeight;
						welcome:hasNationalityWeight	?natWeight;
						welcome:hasReligionWeight	?relWeight;
						welcome:hasEthnicityWeight	?ethWeight;
						welcome:hasLocationWeight	?locWeight;
						welcome:hasAccessibilityWeight	?accWeight;
						welcome:hasRentPeriodWeight	?rentWeight;
						welcome:hasShareWithWeight	?shareWeight.
				BIND(1 AS ?matchScore)
				BIND(0 AS ?unmatchScore)
				BIND(10 AS ?numberOfPreferences)
				BIND((?matchScore * (?ageWeight + ?genWeight + ?famWeight + ?natWeight + ?relWeight + ?ethWeight + ?locWeight + ?accWeight + ?rentWeight + ?shareWeight))/?numberOfPreferences AS ?perfectMatchScore)
				} UNION {
				welcome:UseCase welcome:toBeSolved ?usecase.

				?usecase 	mac:hasMacProblemId  ?usecaseId;
						welcome:hasAgeWeight ?ageWeight;
						welcome:hasGenderWeight ?genWeight;
						welcome:hasFamilyWeight	?famWeight;
						welcome:hasNationalityWeight	?natWeight;
						welcome:hasReligionWeight	?relWeight;
						welcome:hasEthnicityWeight	?ethWeight;
						welcome:hasLocationWeight	?locWeight;
						welcome:hasAccessibilityWeight	?accWeight;
						welcome:hasRentPeriodWeight	?rentWeight;
						welcome:hasShareWithWeight	?shareWeight.

				BIND(1 AS ?matchScore)
				BIND(0 AS ?unmatchScore)

				?a1 a ajan:Agent.
				?a1 welcome:isParticipatingIn ?usecaseId.

				?a2 a ajan:Agent.
				?a2 welcome:isParticipatingIn ?usecaseId.
				?a1 welcome:hasChcAgePreference ?agePrefA1.
				OPTIONAL {
					?agePrefA1 welcome:lowerBound ?lowerAgeA1;
					        welcome:higherBound ?higherAgeA1.
					}.
				?a1 welcome:hasChcGenderPreference ?genPrefA1.
				?a1 welcome:hasChcFamilyPreference ?famPrefA1.
				?a1 welcome:hasChcNationPreference ?natPrefA1.
				?a1 welcome:hasNationality ?nationA1.
				?a1 welcome:hasChcReligionPreference ?relPrefA1.
				?a1 welcome:hasReligion ?relA1.
				?a1 welcome:hasChcEthnicPreference ?ethPrefA1.
				?a1 welcome:hasEthnicity ?ethA1.
				?a1 welcome:hasChcLocationPreference ?locPrefA1.
				?a1 welcome:hasChcAccessibilityPreference ?accPrefA1.
				?a1 welcome:hasChcRentPeriodPreference ?rentPrefA1.
				OPTIONAL {
					?rentPrefA1 welcome:startDate ?startRentA1;
				        welcome:endDate ?endRentA1.
					}.
				?a1 welcome:hasChcShareWithPreference ?sharePrefA1.
					OPTIONAL {
					?sharePrefA1 welcome:min ?minShareA1;
		        		welcome:max ?maxShareA1.
					}.
				?a2 welcome:hasAge ?ageA2.
				?a2 welcome:hasGender ?genA2.
				?a2 welcome:hasFamily ?famA2.
				?a2 welcome:hasNationality ?nationA2.
				?a2 welcome:hasReligion ?relA2.
				?a2 welcome:hasEthnicity ?ethA2.
				?a2 welcome:hasChcLocationPreference ?locPrefA2.
				?a2 welcome:hasChcAccessibilityPreference ?accPrefA2.
				?a2 welcome:hasChcRentPeriodPreference ?rentPrefA2.
				OPTIONAL {
					?rentPrefA2 welcome:startDate ?startRentA2;
				        welcome:endDate ?endRentA2.
					}.
				?a2 welcome:hasChcShareWithPreference ?sharePrefA2.
				OPTIONAL {
					?sharePrefA2 welcome:min ?minShareA2;
				        welcome:max ?maxShareA2.
					}.
				FILTER(?a1 != ?a2)
				BIND(IF(?agePrefA1="Dont mind" || (xsd:integer(?ageA2) >= xsd:integer(?lowerAgeA1) && xsd:integer(?ageA2) <= xsd:integer(?higherAgeA1)), ?matchScore, ?unmatchScore) AS ?ageSml).
				BIND(IF(?genPrefA1="Dont mind" || ?genA2=?genPrefA1, ?matchScore, ?unmatchScore) AS ?genSml).
				BIND(IF(?famPrefA1="Dont mind" || ?famA2=?famPrefA1, ?matchScore, ?unmatchScore) AS ?famSml).
				BIND(IF(?natPrefA1="Dont mind" || (?natPrefA1="Same" && ?nationA1=?nationA2) || (?natPrefA1="Mixed" && ?nationA1!=?nationA2), ?matchScore, ?unmatchScore) AS ?natSml)
				BIND(IF(?relPrefA1="Dont mind" || (?relPrefA1="Same" && ?relA1=?relA2) || (?relPrefA1="Mixed" && ?relA1!=?relA2), ?matchScore, ?unmatchScore) AS ?relSml)
				BIND(IF(?ethPrefA1="Dont mind" || (?ethPrefA1="Same" && ?ethA1=?ethA2) || (?ethPrefA1="Mixed" && ?ethA1!=?ethA2), ?matchScore, ?unmatchScore) AS ?ethSml)

				BIND(IF(?locPrefA1="Dont mind" || ?locPrefA2="Dont mind" || ?locPrefA1=?locPrefA2, ?matchScore, ?unmatchScore) AS ?locSml)
				BIND(IF(?accPrefA1="Dont mind" || ?accPrefA2="Dont mind" || ?accPrefA1=?accPrefA2, ?matchScore, ?unmatchScore) AS ?accSml)
				BIND(((year(xsd:dateTime(?endRentA1)) - year(now()))*365 + 30*(month(xsd:dateTime(?endRentA1))) + day(xsd:dateTime(?endRentA1))) AS ?endRentA1IntValue)
				BIND(((year(xsd:dateTime(?endRentA2)) - year(now()))*365 + 30*(month(xsd:dateTime(?endRentA2))) + day(xsd:dateTime(?endRentA2))) AS ?endRentA2IntValue)
				BIND(((year(xsd:dateTime(?startRentA1)) - year(now()))*365 + 30*(month(xsd:dateTime(?startRentA1))) + day(xsd:dateTime(?startRentA1))) AS ?startRentA1IntValue)
				BIND(((year(xsd:dateTime(?startRentA2)) - year(now()))*365 + 30*(month(xsd:dateTime(?startRentA2))) + day(xsd:dateTime(?startRentA2))) AS ?startRentA2IntValue)
				BIND(IF(?endRentA1IntValue>?endRentA2IntValue, ?endRentA2IntValue, ?endRentA1IntValue) AS ?smallerEndRent)
				BIND(IF(?startRentA1IntValue>?startRentA2IntValue, ?startRentA1IntValue, ?startRentA2IntValue) AS ?biggerStartRent)
				BIND(IF(?startRentA1IntValue>?startRentA2IntValue, ?startRentA2IntValue, ?startRentA1IntValue) AS ?smallerStartRent)
				BIND(IF(?endRentA1IntValue>?endRentA2IntValue, ?endRentA1IntValue, ?endRentA2IntValue) AS ?biggerEndRent)
				BIND(?smallerEndRent - ?biggerStartRent + 1 AS ?rentOverlap)
				BIND(?biggerEndRent - ?smallerStartRent + 1 AS ?rentTotal)
				BIND(IF(?rentPrefA1="Dont mind" || ?rentPrefA2="Dont mind", ?matchScore, IF(?startRentA1 > ?endRentA2 || ?startRentA2 > ?endRentA1, ?unmatchScore,
				xsd:double(?rentOverlap/?rentTotal))) AS ?rentSml)
				BIND(IF(?maxShareA1>?maxShareA2, ?maxShareA2, ?maxShareA1) AS ?smallerMaxShare)
				BIND(IF(?minShareA1>?minShareA2, ?minShareA1, ?minShareA2) AS ?biggerMinShare)
				BIND(IF(?minShareA1>?minShareA2, ?minShareA2, ?minShareA1) AS ?smallerMinShare)
				BIND(IF(?maxShareA1>?maxShareA2, ?maxShareA1, ?maxShareA2) AS ?biggerMaxShare)
				BIND(?smallerMaxShare - ?biggerMinShare + 1 AS ?shareOverlap)

				BIND(?biggerMaxShare - ?smallerMinShare + 1 AS ?shareTotal)
				BIND(IF(?sharePrefA1="Dont mind" || ?sharePrefA2="Dont mind", ?matchScore, IF(?minShareA1 > ?maxShareA2 || ?minShareA2 > ?maxShareA1, ?unmatchScore,
				xsd:double(?shareOverlap/?shareTotal))) AS ?shareSml)

				BIND(xsd:float(((?ageSml * ?ageWeight) + (?genSml * ?genWeight) + (?famSml * ?famWeight) + (?natSml * ?natWeight) + (?relSml * ?relWeight) +
				(?ethSml * ?ethWeight) + (?locSml * ?locWeight) + (?accSml * ?accWeight) + (?rentSml * ?rentWeight) + (?shareSml * ?shareWeight))/10.0) AS ?totalSml).
				}}
					"""^^xsd:string ;
			] .


:CoalitionGenerator
	a bt:CoalitionGenerator ;
	rdfs:label "Generating Coalitions" ;
	bt:query [
				a bt:ConstructQuery ;
				bt:originBase ajan:AgentKnowledge ;
				bt:targetBase ajan:AgentKnowledge ;
				bt:sparql """
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					Construct {
						welcome:LCC1 ?p ?o.
						?o2 ?p3 ?o3.
					}
					Where{
						{ welcome:LCC1 ?p ?o. }   UNION
						{ welcome:LCC1 ?p2 ?o2.
						  ?o2 ?p3 ?o3.}
					}
					"""^^xsd:string ;
			] .

:CSGPSolver
	a bt:CSGPSolver ;
	rdfs:label "Solve CSGP" ;
	bt:query [
				a bt:ConstructQuery ;
				bt:originBase ajan:AgentKnowledge ;
				bt:targetBase ajan:AgentKnowledge ;
				bt:sparql """
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					Construct {
						welcome:LCC1 ?p ?o.
						?o2 ?p3 ?o3.
					}
					Where{
						{ welcome:LCC1 ?p ?o. }   UNION
						{ welcome:LCC1 ?p2 ?o2.
						  ?o2 ?p3 ?o3.}
					}
					"""^^xsd:string ;
			] .

#------------LCC Protocol Nodes -------------------------------

#-----------------CHCProtocolBT Nodes--------------------------------------
:HandleCHCProtocolEvent_old
	a bt:HandleEvent ;
	rdfs:label "EventHandler: CHC Protocol BT" ;
	bt:event agents:CHCProtocolEvent ;
	bt:validate [
					a bt:ConstructQuery ;
					bt:targetBase ajan:ExecutionKnowledge ;
					bt:sparql """
						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .


:HandleCHCProtocolEvent
	a bt:HandleQueueEvent ;
	rdfs:label "CHC Protocol Event Handler" ;
	rdfs:comment "Handle CHC Protocol Event which is triggered by the MyWelcome app" ;
	bt:event agents:CHCProtocolEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:ConditionAgentRunningCHCProcess
	a bt:Condition ;
	rdfs:label "Is Agent Running a CHC Process as Dedicated Agent?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?agentUri	rdf:type	ajan:Agent ;
									welcome:isRunningChc	?runningChc .
						FILTER(LCASE(?runningChc) = "true")

#						?agent welcome:isRunningCHC ?chcId .
#						?agent rdf:type ajan:Agent .
#						FILTER( bound(?chcId) )
						}"""^^xsd:string ;
		] .

:ConditionAgentInvolvedInCHCProcess
	a bt:Condition ;
	rdfs:label "Is agent involved in a CHC process?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?agent welcome:isInvolvedInCHC ?chcId .
						?agent rdf:type ajan:Agent .
						FILTER( bound(?chcId) )
						}"""^^xsd:string ;
		] .

:ConditionStillWantToStartCHC
	a bt:Condition ;
	rdfs:label "Does TCN want to start a CHC even though he/she is already involved in one" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						GRAPH ?g { ?agent welcome:startCHC "true"^^xsd:boolean . }
					}"""^^xsd:string ;
		] .

:WriteThisAgentIdToEKB
	a bt:Write ;
	rdfs:label "Write: ID of agent to Execution" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
			CONSTRUCT  {
				?agentUri	rdf:type	ajan:Agent, ajan:ThisAgent ;
							ajan:agentId	?agentName .
			}
			WHERE {
				?agentUri	rdf:type	ajan:Agent ;
							ajan:agentId	?agentName .
			} """^^xsd:string ;
	] .

:WriteCHCFlags2Execution
	a bt:Write ;
	rdfs:label "Write: ID of all CHC Flags to Execution" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
			CONSTRUCT  {
				?agentUri	rdf:type	ajan:Agent ;
							ajan:agentId	?agentName ;
							welcome:isInvolvedInCHC	?involvedChcId ;
							welcome:isRunningCHC	?runningChcId .

			}
			WHERE {
				?agentUri	rdf:type	ajan:Agent ;
							ajan:agentId	?agentName .

				OPTIONAL {
					?agentUri	welcome:isInvolvedInCHC	?involvedChcId .
				}
				OPTIONAL {
					?agentUri	welcome:isRunningCHC	?runningChcId .
				}
			} """^^xsd:string ;
	] .

:WriteCHCFlags2Lakr
	a bt:Write ;
	rdfs:label "Write: ID of the existing CHC Flags to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
			CONSTRUCT  {
				?agentUri	rdf:type	ajan:Agent ;
							ajan:agentId	?agentName ;
							welcome:isInvolvedInCHC	?involvedChcId ;
							welcome:isRunningCHC	?runningChcId .

			}
			WHERE {
				?agentUri	rdf:type	ajan:Agent ;
							ajan:agentId	?agentName .

				OPTIONAL {
					?agentUri	welcome:isInvolvedInCHC	?involvedChcId .
				}
				OPTIONAL {
					?agentUri	welcome:isRunningCHC	?runningChcId .
				}
			} """^^xsd:string ;
	] .

:MessageAlreadyRunningCHCProcess
	a bt:Message ;
	rdfs:label "Message: Send Already running a CHC Process to TCN"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
					{
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
  					} UNION {
						VALUES ?hdrName {"X-Msg-Type"}
						VALUES ?fieldValue {"CHC-Status"}
					}						
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "application/ld+json; charset=UTF-8"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "application/ld+json"
				][
					a http-core:Header ;
					http-core:hdrName http-headers:to ;
					http-core:fieldValue "APP"
			]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?agent welcome:informTCN "Already running CHC. Cannot start a new one now."^^xsd:string.
						}
						WHERE {
							?agent rdf:type ajan:Agent .
						}"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					SELECT ?requestURI
					WHERE {
					  VALUES ?requestURI { "http://localhost:8092/app/inform" }
					}"""^^xsd:string
	] .


:MessageWantToStartNewCHCProcess
	a bt:Message ;
	rdfs:label "Message: Send already involved in a CHC process. Still want to start a new one? to TCN"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
					{
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
  					} UNION {
						VALUES ?hdrName {"X-Msg-Type"}
						VALUES ?fieldValue {"CHC-Status"}
					}						
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "application/ld+json"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "application/ld+json"
				][
					a http-core:Header ;
					http-core:hdrName http-headers:to ;
					http-core:fieldValue "APP"
			]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?agent welcome:askTCN "I am involved in a CHC. Do you want to start a new CHC process?" .
							?agent rdf:type ajan:Agent .
						}
						WHERE {
							?agent rdf:type ajan:Agent .
						}"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					SELECT ?requestURI
					WHERE {
					  VALUES ?requestURI { "http://localhost:8092/app/ask" }
					}"""^^xsd:string
	] .


:EventProducerExecuteCHCProcessEvent
	a bt:EventProducer ;
	rdfs:label "EventProducer: Execute CHC Process" ;
	ajan:event agents:ExecuteCHCProcessEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """

						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .


#-----------------CHCProtocolBT Nodes--------------------------------------


#-----------------ExecutingCHCProcessBT Nodes--------------------------------------
:HandleExecuteCHCProcessEvent
	a bt:HandleEvent ;
	rdfs:label "EventHandler: Execute CHC Process BT" ;
	bt:event agents:ExecuteCHCProcessEvent ;
	bt:validate [
					a bt:ConstructQuery ;
					bt:targetBase ajan:ExecutionKnowledge ;
					bt:sparql """
						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .




:CHCStartFlagOn
	a bt:Update ;
	rdfs:label "Agent Running CHC Flag-On" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>


					INSERT {
						?agent	welcome:isRunningChc	"true" .

					}
					WHERE {
						?agent	rdf:type ajan:Agent .

					}
					"""^^xsd:string ;
		] .

:Message2AppStartingCHC
	a bt:Message ;
	rdfs:label "Message: Inform TCN that agent is starting CHC"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
					{
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
  					} UNION {
						VALUES ?hdrName {"X-Msg-Type"}
						VALUES ?fieldValue {"CHC-Status"}
					}						
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "application/ld+json"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "application/ld+json"
				][
					a http-core:Header ;
					http-core:hdrName http-headers:to ;
					http-core:fieldValue "APP"
			]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?agent welcome:informTCN "I am starting a CHC and will let you know its result." .
							?agent	rdf:type ajan:Agent ;
									ajan:agentId	?agentName .
						}
						WHERE {
							?agent	rdf:type ajan:Agent ;
									ajan:agentId	?agentName .
						}"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					SELECT ?requestURI
					WHERE {
					  VALUES ?requestURI { "http://localhost:8092/app/inform" }
					}"""^^xsd:string
	] .


:Message2WPMUpdateStatus2InCoordination
	a bt:Message ;
	rdfs:label "Message: Update Agent status to In_Coordination in WAR"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
						
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "application/ld+json"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "application/ld+json"
				][
					a http-core:Header ;
					http-core:hdrName http-headers:to ;
					http-core:fieldValue "WPM"
			]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX welcome-sw: <http://www.semanticweb.org/welcome#>
						CONSTRUCT {
							?agent	welcome:hasStatus welcome-sw:in_coordination ;
									ajan:agentId	?agentName .
						}
						WHERE {
							?agent	rdf:type ajan:Agent ;
									ajan:agentId	?agentName .
						}"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

					SELECT ?requestURI
					WHERE {
					# LINE TO SEND TO DUMMY ENDPOINT
						VALUES ?requestURI { "http://localhost:8092/wpm/updateAgentStatus" }
					
					# LINES TO SEND TO ACTUAL ENDPOINT
					#	welcome:dispatcher welcome:hasAddress ?partialAddress .
					#	BIND(CONCAT(STR(?partialAddress), "/welcome/integration/workflow/dispatcher/agentStatus") AS ?requestURI )
					}"""^^xsd:string
	] .

:Wait4LAR
	a bt:Wait ;
	rdfs:label "Wait: wait for LAR to be populated" ;
	rdfs:comment "" ;
	bt:milliseconds "5000"^^xsd:int .

:Wait1Sec
	a bt:Wait ;
	rdfs:label "Wait: 1 second" ;
	rdfs:comment "" ;
	bt:milliseconds "1000"^^xsd:int .

:JustFail
	a bt:Fail ;
	rdfs:label "Fail on Purpose"^^xsd:string .


:WriteChcProblemInstance2Execution
	a bt:Write ;
	rdfs:label "Write: CHC Problem Instance to Execution Knowledge" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:LocalAgentsKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX welcome-sw: <http://www.semanticweb.org/welcome#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				CONSTRUCT	{
						#?agent	rdf:type	ajan:Agent .

						?bnode	rdf:type	mac:MACProblemInstance, welcome:CHCUseCase;
									welcome:hasStatus	"running"^^xsd:string;
									mac:hasId		?uniqueChcId;
									mac:hasUseCase	"CHC"^^xsd:string;
									mac:hasSolver	"HDBSCAN"^^xsd:string;
									mac:hasNumberOfAgents	?numOfAgents;
									mac:hasParticipants		?name;
									welcome:hasAgeWeight		"10"^^xsd:int;
									welcome:hasGenderWeight		"9"^^xsd:int;
									welcome:hasFamilyWeight		"5"^^xsd:int;
									welcome:hasNationalityWeight	"8"^^xsd:int;
									welcome:hasReligionWeight		"6"^^xsd:int;
									welcome:hasEthnicityWeight		"7"^^xsd:int;
									welcome:hasLocationWeight		"2"^^xsd:int;
									welcome:hasAccessibilityWeight	"3"^^xsd:int;
									welcome:hasRentPeriodWeight		"1"^^xsd:int;
									welcome:hasShareWithWeight		"4"^^xsd:int.
						#?agent ajan:agentId ?name.

							}
				WHERE	{
					BIND(SHA1(xsd:string(NOW())) AS ?uniqueChcId)

					{
						SELECT ?agent ?name
						WHERE	{
							?agent	rdf:type	ajan:Agent ;
									welcome-sw:hasStatus	?status ;
									ajan:agentId	?name.
							FILTER(?status=welcome-sw:active || ?status=welcome-sw:in_coordination)
								}
					}
					{
						SELECT (count(?agent) as ?numOfAgents)
						WHERE	{
							?agent rdf:type ajan:Agent .
							?agent welcome-sw:hasStatus ?status.
							FILTER(?status=welcome-sw:active || ?status=welcome-sw:in_coordination)
								}
					}
					{
						BIND(BNODE() AS ?bnode)
					}
						}
 """^^xsd:string ;
	] .


:WriteChcPiAndChcRunningFlag2Lakr
	a bt:Write ;
	rdfs:label "Write: CHC Problem Instance and Running CHC Flag to Agent Knowledge" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX welcome-sw: <http://www.semanticweb.org/welcome#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				CONSTRUCT	{
						?agent	welcome:isRunningCHC ?chcId .

						?bnode	rdf:type	mac:MACProblemInstance, welcome:CHCUseCase;
									welcome:hasStartTime	?now ;
									welcome:hasStatus	"running"^^xsd:string;
									mac:hasId		?chcId;
									mac:hasUseCase	?useCaseName ;
									mac:hasSolver	?solver;
									mac:hasNumberOfAgents	?numOfAgents;
									mac:hasParticipants		?name;
									welcome:hasAgeWeight		"10"^^xsd:int;
									welcome:hasGenderWeight		"9"^^xsd:int;
									welcome:hasFamilyWeight		"5"^^xsd:int;
									welcome:hasNationalityWeight	"8"^^xsd:int;
									welcome:hasReligionWeight		"6"^^xsd:int;
									welcome:hasEthnicityWeight		"7"^^xsd:int;
									welcome:hasLocationWeight		"2"^^xsd:int;
									welcome:hasAccessibilityWeight	"3"^^xsd:int;
									welcome:hasRentPeriodWeight		"1"^^xsd:int;
									welcome:hasShareWithWeight		"4"^^xsd:int.
				}
				WHERE	{
						?agent	rdf:type ajan:Agent .

						?bnode	rdf:type	mac:MACProblemInstance, welcome:CHCUseCase;
									welcome:hasStatus	"running"^^xsd:string;
									mac:hasId		?chcId;
									mac:hasSolver	?solver;
									mac:hasUseCase	?useCaseName ;
									mac:hasNumberOfAgents	?numOfAgents;
									mac:hasParticipants		?name;
									welcome:hasAgeWeight		"10"^^xsd:int;
									welcome:hasGenderWeight		"9"^^xsd:int;
									welcome:hasFamilyWeight		"5"^^xsd:int;
									welcome:hasNationalityWeight	"8"^^xsd:int;
									welcome:hasReligionWeight		"6"^^xsd:int;
									welcome:hasEthnicityWeight		"7"^^xsd:int;
									welcome:hasLocationWeight		"2"^^xsd:int;
									welcome:hasAccessibilityWeight	"3"^^xsd:int;
									welcome:hasRentPeriodWeight		"1"^^xsd:int;
									welcome:hasShareWithWeight		"4"^^xsd:int.

						BIND(NOW() AS ?now)
						}
 """^^xsd:string ;
	] .

:WriteAgentRunningChcFlag2Lakr
	a bt:Write ;
	rdfs:label "Write: CHC Problem Instance to Agent Knowledge" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX welcome-sw: <http://www.semanticweb.org/welcome#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

				CONSTRUCT	{
						?agent	welcome:isRunningCHC ?chcId .

				}
				WHERE	{
						?agent	rdf:type ajan:Agent .

						?bnode	rdf:type welcome:CHCUseCase;
								welcome:hasStatus	"running"^^xsd:string;
								mac:hasId		?chcId.
						}
 """^^xsd:string ;
	] .


:WriteCHCProblemInstance
	a bt:Write ;
	rdfs:label "Write: CHC Problem Instance to Agent Knowledge" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:LocalAgentsKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX welcome-sw: <http://www.semanticweb.org/welcome#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				CONSTRUCT	{

						?bnode	rdf:type	mac:MACProblemInstance, welcome:CHCUseCase;
									welcome:hasStatus	"not_started"^^xsd:string;
									mac:hasId		?uniqueChcId;
									welcome:hasSolver	"HDBSCAN"^^xsd:string;
									mac:hasNumberOfAgents	?numOfAgents;
									mac:hasParticipants		?name;
									welcome:hasAgeWeight		"10"^^xsd:int;
									welcome:hasGenderWeight		"9"^^xsd:int;
									welcome:hasFamilyWeight		"5"^^xsd:int;
									welcome:hasNationalityWeight	"8"^^xsd:int;
									welcome:hasReligionWeight		"6"^^xsd:int;
									welcome:hasEthnicityWeight		"7"^^xsd:int;
									welcome:hasLocationWeight		"2"^^xsd:int;
									welcome:hasAccessibilityWeight	"3"^^xsd:int;
									welcome:hasRentPeriodWeight		"1"^^xsd:int;
									welcome:hasShareWithWeight		"4"^^xsd:int.
						#?agent ajan:agentId ?name.
							}
				WHERE	{
					BIND(SHA1(xsd:string(NOW())) AS ?uniqueChcId)

					{
						SELECT ?agent ?name
						WHERE	{
							?agent	rdf:type	ajan:Agent ;
									welcome-sw:hasStatus	?status ;
									ajan:agentId	?name.
							FILTER(?status=welcome-sw:active || ?status=welcome-sw:in_coordination)
								}
					}
					{
						SELECT (count(?agent) as ?numOfAgents)
						WHERE	{
							?agent rdf:type ajan:Agent .
							?agent welcome-sw:hasStatus ?status.
							FILTER(?status=welcome-sw:active || ?status=welcome-sw:in_coordination)
								}
					}
					{
						BIND(BNODE() AS ?bnode)
					}
						}
 """^^xsd:string ;
	] .

:UpdateExtractChcPersonalInfo
	a bt:Update ;
	rdfs:label "Update: Create CHC Personal Info in LAKR" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>


					INSERT {
						?agent welcome:hasCHCPersonalInfo ?bnode2 .

						?bnode2	rdf:type	welcome:CHCPersonalInfo;
								mac:hasId	?chcId ;
								welcome:hasAge	?age;
								welcome:hasGender	?gender;
								welcome:hasFamily	?family;
								welcome:hasNationality	?nationality;
								welcome:hasReligion		?religion;
								welcome:hasEthnicity 	?ethnicity;
								welcome:speaksLanguage	?lang ;
								welcome:hasChcLocationPreference	?locPref;
								welcome:hasChcAccessibilityPreference	?accessPref;
								welcome:hasChcRentPeriodPreference		?rentPref;
								welcome:hasChcShareWithPreference		?sharePref.

						?rentPref	?rentPred	?rentObj.
						?share		?sharePred	?shareObj.
					}
					WHERE {
						?agent	rdf:type ajan:Agent .

						?agent	welcome:isRunningCHC ?chcId .

						welcome:DialogueUser
							welcome:hasAge	?age;
							welcome:hasGender	?gender;
							welcome:hasFamily	?family;
							welcome:hasNationality	?nationality;
							welcome:hasReligion		?religion;
							welcome:hasEthnicity 	?ethnicity;
							welcome:speaksLanguage	?lang ;
							welcome:hasChcLocationPreference	?locPref;
							welcome:hasChcAccessibilityPreference	?accessPref;
							welcome:hasChcRentPeriodPreference		?rentPref;
							welcome:hasChcShareWithPreference		?sharePref.

						OPTIONAL{
							?rentPref	?rentPred	?rentObj.
						}
						OPTIONAL{
							?sharePref	?sharePred		?shareObj.
						}
						{BIND(BNODE() AS ?bnode2)}
					}
					"""^^xsd:string ;
		] .


:AddAgentRunningCHCFlag
	a bt:Update ;
	rdfs:label "Update: Insert the id of CHC problem instance to Agent Knowledge" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?bnode	welcome:hasStatus	"not_started"^^xsd:string.
					}
					INSERT {
						?bnode	welcome:hasStatus	"running"^^xsd:string.

						?agent	welcome:isRunningCHC ?chcId ;
								welcome:hasCHCPersonalInfo	?bnode2 .

						?bnode2	rdf:type	welcome:CHCPersonalInfo;
								mac:hasId	?chcId ;
								welcome:hasAge	?age;
								welcome:hasGender	?gender;
								welcome:hasFamily	?family;
								welcome:hasNationality	?nationality;
								welcome:hasReligion		?religion;
								welcome:hasEthnicity 	?ethnicity;
								welcome:hasChcLocationPreference	?locPref;
								welcome:hasChcAccessibilityPreference	?accessPref;
								welcome:hasChcRentPeriodPreference		?rentPref;
								welcome:hasChcShareWithPreference		?sharePref.

						?rentPref	?rentPred	?rentObj.
						?share		?sharePred	?shareObj.
					}
					WHERE {
						?agent	rdf:type ajan:Agent .

						?bnode	rdf:type welcome:CHCUseCase;
								welcome:hasStatus	"not_started"^^xsd:string;
								mac:hasId		?chcId.


						welcome:DialogueUser
							welcome:hasAge	?age;
							welcome:hasGender	?gender;
							welcome:hasFamily	?family;
							welcome:hasNationality	?nationality;
							welcome:hasReligion		?religion;
							welcome:hasEthnicity 	?ethnicity;
							welcome:hasChcLocationPreference	?locPref;
							welcome:hasChcAccessibilityPreference	?accessPref;
							welcome:hasChcRentPeriodPreference		?rentPref;
							welcome:hasChcShareWithPreference		?sharePref.

						OPTIONAL{
							?rentPref	?rentPred	?rentObj.
						}
						OPTIONAL{
							?sharePref	?sharePred		?shareObj.
						}
						{BIND(BNODE() AS ?bnode2)}
					}
					"""^^xsd:string ;
		] .



:WritePersonalInfoRequestContent2Execution
	a bt:Write ;
	rdfs:label "Write: Personal Info Request Content to Execution" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?agent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:isRunningCHC	?chcId ;
									welcome:hasAddress	?agentAddress .
						}
						WHERE {

							?agent	rdf:type	ajan:Agent ;
									ajan:agentId	?agentId ;
									welcome:isRunningCHC	?chcId.
							?du		welcome:hasRootAddress	?rootAddress .
							BIND(CONCAT(?rootAddress, ?agentId) AS ?agentAddress)
						}
 """^^xsd:string ;
	] .


:Broadcast4PersonalInfo
	a bt:Broadcast ;
	rdfs:label "Broadcast: Request agents to return Personal Info for CHC"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .					
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?agent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:isRunningCHC	?chcId ;
									welcome:hasAddress	?agentAddress .

#						ajan:testSubj	ajan:testPred	ajan:testObject.

						}
						WHERE {

#						?s ?p ?o .

							?agent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:isRunningCHC	?chcId ;
									welcome:hasAddress	?agentAddress .
						}"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					SELECT DISTINCT ?requestURI
					WHERE {

#					  VALUES ?requestURI {
#					  "http://localhost:8060/welcome/integration/coordination/ajan/agents/majanAgent2?capability=shareCHCPersonalInfo"
#					  "http://localhost:8060/welcome/integration/coordination/ajan/agents/majanAgent3?capability=shareCHCPersonalInfo"
#					  "http://localhost:8060/welcome/integration/coordination/ajan/agents/majanAgent4?capability=shareCHCPersonalInfo"}

					?agent	rdf:type	ajan:Agent ;
							welcome:isRunningCHC	?chcId ;
							ajan:agentId	?agentId .

					#?bnode	mac:hasId	?chcId ;
					#		mac:hasParticipants	?participant .
					#?participant 	ajan:agentId ?name.

					?bnode	mac:hasId	?chcId ;
							mac:hasParticipants	?pAgentName .

					FILTER(?pAgentName != ?agentId)
					BIND(CONCAT("http://localhost:8060/welcome/integration/coordination/ajan/agents/", ?pAgentName, "?capability=shareCHCPersonalInfo") AS ?requestURI )
}
"""^^xsd:string
	] .


:InsertCHCWasBroadcasted2Execution
	a bt:Update ;
	rdfs:label "Update: Insert CHC Process info was broadcasted succesfully" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					INSERT{
							?broadcastedBnode	rdf:type	welcome:TemporaryBnode ;
												welcome:hasCHCBroadcasted	"true"^^xsd:boolean ;
												mac:hasId	?chcId .
					}
					WHERE {
							?agent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:isRunningCHC	?chcId .

							BIND(BNODE() AS ?broadcastedBnode)
						}

					"""^^xsd:string ;
		] .



:EventProducerComputeSimilaritiesBT
	a bt:EventProducer ;
	rdfs:label "EventProducer: to Compute Similarities" ;
	ajan:event agents:ShareCHCSimilaritiesEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """

						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .


:Wait4ChcPersonalInfo
	a bt:Wait ;
	rdfs:label "Wait: wait for agents to return their Personal Info for CHC" ;
	rdfs:comment "" ;
	bt:milliseconds "20000"^^xsd:int .


:ConditionAnyoneNotReturnedPersonalInfo
	a bt:Condition ;
	rdfs:label "Has any participant agent NOT returned its CHC Personal Info?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
		PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

		ASK
		{
			?dAgent	rdf:type	ajan:Agent ;
				welcome:isRunningCHC ?chcId ;
				ajan:agentId	?dAgentId.
			?bnode	rdf:type	welcome:CHCUseCase;
				mac:hasId		?chcId;
				mac:hasNumberOfAgents	?numOfAgents;
				mac:hasParticipants		?pAgentId .

			#FILTER NOT EXISTS {
				#?pAgentUri	welcome:hasCHCPersonalInfo	?bnode2 ;
				#ajan:agentId	?pAgentId .
				#}
			OPTIONAL{
				?pAgentUri	welcome:hasCHCPersonalInfo	?bnode2 ;
					ajan:agentId	?pAgentId .

				?bnode2	rdf:type	welcome:CHCPersonalInfo;
					mac:hasId	?chcId2 .
					}
			#FILTER(?dAgentId != ?pAgentId )

			FILTER(!bound(?bnode2) || ?chcId != ?chcId2)
			}
						"""^^xsd:string ;
		] .


:RemoveNotRespondingAgentsFromCHCProblemInstance
	a bt:Update ;
	rdfs:label "Update: Remove non-responding agents from CHC Process" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
								PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				DELETE{
					?bnode	mac:hasParticipants	?pAgentId .
					?bnode	mac:hasNumberOfAgents	?numOfAgents.
				}
				INSERT{
					?bnode	mac:hasNumberOfAgents	?newNumOfAgents.
				}
				WHERE {
					?dAgent	rdf:type	ajan:Agent ;
							welcome:isRunningCHC ?chcId ;
							ajan:agentId	?dAgentId.

					?bnode	rdf:type	welcome:CHCUseCase;
							mac:hasId		?chcId;
							mac:hasNumberOfAgents	?numOfAgents;
							mac:hasParticipants		?pAgentId .

					#FILTER(?dAgentId != ?pAgentId)
					OPTIONAL {
						?pAgentUri	welcome:hasCHCPersonalInfo	?bnode2 ;
									ajan:agentId	?pAgentId .
						?bnode2		rdf:type	welcome:CHCPersonalInfo ;
									mac:hasId	?chcId2 .
							}
					#?bnode2		rdf:type	welcome:CHCPersonalInfo ;
					#			mac:hasId	?chcId .

					FILTER(!bound(?bnode2) || (?chcId!=?chcId2))

					BIND((?numOfAgents-1) AS ?newNumOfAgents)
					}
					"""^^xsd:string ;
		] .


:WriteSimilaritiesRequestContent2Execution
	a bt:Write ;
	rdfs:label "Write: Similarities Request Content to Execution" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?dAgent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:isRunningCHC	?chcId ;
									welcome:hasAddress	?agentAddress .

							?pAgentUri	welcome:hasCHCPersonalInfo	?bnode2 ;
										ajan:agentId	?pAgentId .

							?bnode2		rdf:type	welcome:CHCPersonalInfo ;
										mac:hasId	?chcId ;
										welcome:hasAge	?age;
										welcome:hasGender	?gender;
										welcome:hasFamily	?family;
										welcome:hasNationality	?nationality;
										welcome:hasReligion		?religion;
										welcome:hasEthnicity 	?ethnicity;
										welcome:hasChcLocationPreference	?locPref;
										welcome:hasChcAccessibilityPreference	?accessPref;
										welcome:hasChcRentPeriodPreference		?rentPref;
										welcome:hasChcShareWithPreference		?sharePref.

							?rentPref	?rentPred	?rentObj.
							?sharePref	?sharePred		?shareObj.
						}
						WHERE {

							?dAgent	rdf:type	ajan:Agent ;
									welcome:isRunningCHC ?chcId ;
									ajan:agentId	?dAgentId.

							?du		welcome:hasRootAddress	?rootAddress .
							BIND(CONCAT(?rootAddress, ?dAgentId) AS ?agentAddress)

							?bnode	rdf:type	welcome:CHCUseCase;
									mac:hasId		?chcId;
									mac:hasParticipants		?pAgentId .

							?pAgentUri	welcome:hasCHCPersonalInfo	?bnode2 ;
										ajan:agentId	?pAgentId .

							?bnode2		rdf:type	welcome:CHCPersonalInfo ;
										mac:hasId	?chcId ;
										welcome:hasAge	?age;
										welcome:hasGender	?gender;
										welcome:hasFamily	?family;
										welcome:hasNationality	?nationality;
										welcome:hasReligion		?religion;
										welcome:hasEthnicity 	?ethnicity;
										welcome:hasChcLocationPreference	?locPref;
										welcome:hasChcAccessibilityPreference	?accessPref;
										welcome:hasChcRentPeriodPreference		?rentPref;
										welcome:hasChcShareWithPreference		?sharePref.
							OPTIONAL{
								?rentPref	?rentPred	?rentObj.
									}
							OPTIONAL{
								?sharePref	?sharePred		?shareObj.
									}
						}
 """^^xsd:string ;
	] .

:Broadcast4SimilarityValues
	a bt:Broadcast ;
	rdfs:label "Broadcast: Request agents to return their Similarity values for CHC"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
					
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?dAgent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:isRunningCHC	?chcId ;
									welcome:hasAddress	?agentAddress .

							?pAgentUri	welcome:hasCHCPersonalInfo	?bnode2 ;
										ajan:agentId	?pAgentId .

							?bnode2		rdf:type	welcome:CHCPersonalInfo ;
										mac:hasId	?chcId ;
										welcome:hasAge	?age;
										welcome:hasGender	?gender;
										welcome:hasFamily	?family;
										welcome:hasNationality	?nationality;
										welcome:hasReligion		?religion;
										welcome:hasEthnicity 	?ethnicity;
										welcome:hasChcLocationPreference	?locPref;
										welcome:hasChcAccessibilityPreference	?accessPref;
										welcome:hasChcRentPeriodPreference		?rentPref;
										welcome:hasChcShareWithPreference		?sharePref.

							?rentPref	?rentPred	?rentObj.
							?sharePref	?sharePred		?shareObj.
						}
						WHERE {
							?dAgent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:isRunningCHC	?chcId ;
									welcome:hasAddress	?agentAddress .

							?pAgentUri	welcome:hasCHCPersonalInfo	?bnode2 ;
										ajan:agentId	?pAgentId .

							?bnode2		rdf:type	welcome:CHCPersonalInfo ;
										mac:hasId	?chcId ;
										welcome:hasAge	?age;
										welcome:hasGender	?gender;
										welcome:hasFamily	?family;
										welcome:hasNationality	?nationality;
										welcome:hasReligion		?religion;
										welcome:hasEthnicity 	?ethnicity;
										welcome:hasChcLocationPreference	?locPref;
										welcome:hasChcAccessibilityPreference	?accessPref;
										welcome:hasChcRentPeriodPreference		?rentPref;
										welcome:hasChcShareWithPreference		?sharePref.
							OPTIONAL{
								?rentPref	?rentPred	?rentObj.
									}
							OPTIONAL{
								?sharePref	?sharePred		?shareObj.
									}
										}"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					SELECT DISTINCT ?requestURI
					WHERE {

					?agent	rdf:type	ajan:Agent ;
							welcome:isRunningCHC	?chcId ;
							ajan:agentId	?agentId .

					#?bnode	mac:hasId	?chcId ;
					#		mac:hasParticipants	?participant .
					#?participant 	ajan:agentId ?name.

					?bnode	mac:hasId	?chcId ;
							mac:hasParticipants	?pAgentName .

					FILTER(?pAgentName != ?agentId)
					BIND(CONCAT("http://localhost:8060/welcome/integration/coordination/ajan/agents/", ?pAgentName, "?capability=shareCHCSimilarities") AS ?requestURI )
					}
					"""^^xsd:string
	] .


:Wait4SimilarityValues
	a bt:Wait ;
	rdfs:label "Wait: wait for agents to return their Similarity values for CHC" ;
	rdfs:comment "" ;
	bt:milliseconds "20000"^^xsd:int .



:ConditionEveryoneReturnedSimilarities
	a bt:Condition ;
	rdfs:label "Did all participating agents return their Similarity values?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
								PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

				ASK
				WHERE {
						{
							SELECT ?numOfAgents (count(?smlValue) AS ?total)
							WHERE {
								?dAgent	rdf:type	ajan:Agent ;
								welcome:isRunningCHC ?chcId ;
								ajan:agentId	?dAgentId.

								?bnode	rdf:type	welcome:CHCUseCase;
								mac:hasId		?chcId;
								mac:hasNumberOfAgents	?numOfAgents;
								mac:hasParticipants		?pAgentId .

								?agentUri	welcome:hasCHCSimilarityValue	?smlBnode .

								?smlBnode	rdf:type	welcome:CHCSimilarityValue ;
								mac:hasSubjectAgent ?pAgentId ;
								mac:hasObjectAgent ?oAgentId ;
								mac:isComputedForProblemId  ?chcId ;
								mac:hasSimilarityScore ?smlValue .
								} GROUP BY ?numOfAgents
						}

						FILTER(?total = (?numOfAgents * (?numOfAgents-1)))

					}

					"""^^xsd:string ;
		] .


:WriteZeroSimilarity4NotRespondingAgents
	a bt:Write ;
	rdfs:label "Write: Zero similarity to all non-respondents of Similarity Value request" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """

			# not assigning zero to non respondents here. But when computing Reciprocal score, if there is no similarity value, it is taken as zero.
			CONSTRUCT  {
				?agentName rdf:type ajan:Agent .
			}
			WHERE {
				?agentName rdf:type ajan:Agent .
			} """^^xsd:string ;
	] .


:EventProducerSolverCHCEvent
	a bt:EventProducer ;
	rdfs:label "EventProducer: Solve CHC Event" ;
	ajan:event agents:SolveCHCEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """

						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .


:EventProducerCHCFailureEvent
	a bt:EventProducer ;
	rdfs:label "EventProducer: CHC Failed Event" ;
	ajan:event agents:CHCFailureEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """

						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .
#-----------------ExecutingCHCProcessBT Nodes--------------------------------------


#----------------Sharing Personal Info BT nodes ----------------------
:HandleShareCHCPersonalInfoEvent
	a bt:HandleQueueEvent ;
	rdfs:label "EventHandler: Share CHC Personal Info" ;
	bt:event agents:ShareCHCPersonalInfoEvent ;
	bt:validate [
					a bt:ConstructQuery ;
					bt:targetBase ajan:ExecutionKnowledge ;
					bt:sparql """

						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .



:WriteCHCPersonalInfo2Exec
	a bt:Write ;
	rdfs:label "Write: Personal info of agent to Execution for the particular CHC process" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
			CONSTRUCT  {
				?agent	rdf:type ajan:Agent ;
						ajan:agentId	?agentName ;
						welcome:hasCHCPersonalInfo	?bnode .

				?bnode	rdf:type	welcome:CHCPersonalInfo;
						welcome:hasAge	?age;
						welcome:hasGender	?gender;
						welcome:hasFamily	?family;
						welcome:hasNationality	?nationality;
						welcome:hasReligion		?religion;
						welcome:hasEthnicity 	?ethnicity;
						welcome:speaksLanguage	?lang ;
						welcome:hasChcLocationPreference	?locPref;
						welcome:hasChcAccessibilityPreference	?accessPref;
						welcome:hasChcRentPeriodPreference		?rentPref;
						welcome:hasChcShareWithPreference		?sharePref.

				?rentPref	?rentPred	?rentObj.
				?sharePref		?sharePred	?shareObj.

				}
			WHERE {
				?agent	rdf:type ajan:Agent ;
						ajan:agentId	?agentName .

				welcome:DialogueUser
					welcome:hasAge	?age;
					welcome:hasGender	?gender;
					welcome:hasFamily	?family;
					welcome:hasNationality	?nationality;
					welcome:hasReligion		?religion;
					welcome:hasEthnicity 	?ethnicity;
					welcome:speaksLanguage	?lang ;
					welcome:hasChcLocationPreference	?locPref;
					welcome:hasChcAccessibilityPreference	?accessPref;
					welcome:hasChcRentPeriodPreference		?rentPref;
					welcome:hasChcShareWithPreference		?sharePref.

				OPTIONAL{
					?rentPref	?rentPred	?rentObj.
				}
				OPTIONAL{
					?sharePref	?sharePred		?shareObj.
				}
				{BIND(BNODE() AS ?bnode)}

			} """^^xsd:string ;
	] .

:Message2DedicatedChcPersonalInfo
	a bt:Message ;
	rdfs:label "Message: Return Personal Info to Dedicated agent for CHC"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
					
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?agent	ajan:agentId	?agentName ;
									welcome:hasCHCPersonalInfo	?bnode .

							?bnode	rdf:type	welcome:CHCPersonalInfo;
								mac:hasId	?chcId ;
								welcome:hasAge	?age;
								welcome:hasGender	?gender;
								welcome:hasFamily	?family;
								welcome:hasNationality	?nationality;
								welcome:hasReligion		?religion;
								welcome:hasEthnicity 	?ethnicity;
								welcome:speaksLanguage	?lang ;
								welcome:hasChcLocationPreference	?locPref;
								welcome:hasChcAccessibilityPreference	?accessPref;
								welcome:hasChcRentPeriodPreference		?rentPref;
								welcome:hasChcShareWithPreference		?sharePref.

							?rentPref	?rentPred	?rentObj.
							?sharePref	?sharePred		?shareObj.

#						ajan:testSubjP	ajan:testPredP	ajan:testObjectP.
						}
						WHERE {
#						?s ?p ?o .
							?agent rdf:type ajan:Agent ;
									ajan:agentId	?agentName ;
									welcome:hasCHCPersonalInfo	?bnode .

							?bnode	rdf:type	welcome:CHCPersonalInfo;
								welcome:hasAge	?age;
								welcome:hasGender	?gender;
								welcome:hasFamily	?family;
								welcome:hasNationality	?nationality;
								welcome:hasReligion		?religion;
								welcome:hasEthnicity 	?ethnicity;
								welcome:speaksLanguage	?lang ;
								welcome:hasChcLocationPreference	?locPref;
								welcome:hasChcAccessibilityPreference	?accessPref;
								welcome:hasChcRentPeriodPreference		?rentPref;
								welcome:hasChcShareWithPreference		?sharePref.

							OPTIONAL{
								?rentPref	?rentPred	?rentObj.
							}
							OPTIONAL{
								?sharePref	?sharePred		?shareObj.
							}

							?dedicated	welcome:hasMacRole	"Dedicated"^^xsd:string ;
										welcome:isRunningCHC	?chcId .

				}"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
					  VALUES ?requestURI { "http://localhost:8060/welcome/integration/coordination/ajan/agents/majanAgent1?capability=receiveCHCPersonalInfo"}

#					  ?agent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
#								welcome:isRunningCHC	?chcId ;
#								welcome:hasAddress	?address .

#					BIND(CONCAT(?address, "?capability=receiveCHCPersonalInfo") AS ?requestURI )
					}"""^^xsd:string
	] .


:AddAgentInvolvedInCHCFlag
	a bt:Write ;
	rdfs:label "Write: CHC Id in which the agent is participating to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
			CONSTRUCT  {
				?participantAgent	welcome:isInvolvedInCHC	?chcId .
				}
			WHERE {
				?participantAgent	rdf:type	ajan:Agent ;
									welcome:hasCHCPersonalInfo	?bnode .

				?dedicatedAgent		welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:isRunningCHC	?chcId .

			} """^^xsd:string ;
	] .


:UpdateAgentInvolvedInCHC
	a bt:Update ;
	rdfs:label "Update: agent involved in the particular CHC process" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					INSERT {
						?agent	welcome:isInvolvedInCHC	"chc1" .
					}
					WHERE {
						?agent rdf:type ajan:Agent .
					}
					"""^^xsd:string ;
		] .
#----------------Sharing Personal Info BT nodes ----------------------


#---------------ReceiveCHCPersonal Info BT Nodes---------------------
:HandleReceiveCHCPersonalInfoEvent
	a bt:HandleQueueEvent ;
	rdfs:label "HandleQueueEvent: Receive CHC Personal info" ;
	bt:event agents:ReceiveCHCPersonalInfoEvent ;
	bt:validate [
					a bt:ConstructQuery ;
					bt:targetBase ajan:ExecutionKnowledge ;
					bt:sparql """

						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .


:WritePersonalInfo2LAKR
	a bt:Write ;
	rdfs:label "Write: Personal Info of participant agent to Agent Knowledge" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
			CONSTRUCT	{

				?agent	ajan:agentId	?agentName ;
						welcome:hasCHCPersonalInfo	?bnode .
				?bnode	rdf:type	welcome:CHCPersonalInfo;
								mac:hasId	?chcId ;
								welcome:hasAge	?age;
								welcome:hasGender	?gender;
								welcome:hasFamily	?family;
								welcome:hasNationality	?nationality;
								welcome:hasReligion		?religion;
								welcome:hasEthnicity 	?ethnicity;
								welcome:speaksLanguage	?lang ;
								welcome:hasChcLocationPreference	?locPref;
								welcome:hasChcAccessibilityPreference	?accessPref;
								welcome:hasChcRentPeriodPreference		?rentPref;
								welcome:hasChcShareWithPreference		?sharePref.

				?rentPref	?rentPred	?rentObj.
				?sharePref	?sharePred		?shareObj.
						}
			WHERE 	{

				?agent	ajan:agentId	?agentName ;
						welcome:hasCHCPersonalInfo	?bnode .

				?bnode	rdf:type	welcome:CHCPersonalInfo;
								mac:hasId	?chcId ;
								welcome:hasAge	?age;
								welcome:hasGender	?gender;
								welcome:hasFamily	?family;
								welcome:hasNationality	?nationality;
								welcome:hasReligion		?religion;
								welcome:hasEthnicity 	?ethnicity;
								welcome:speaksLanguage	?lang ;
								welcome:hasChcLocationPreference	?locPref;
								welcome:hasChcAccessibilityPreference	?accessPref;
								welcome:hasChcRentPeriodPreference		?rentPref;
								welcome:hasChcShareWithPreference		?sharePref.

				OPTIONAL{
					?rentPref	?rentPred	?rentObj.
						}
				OPTIONAL{
					?sharePref	?sharePred		?shareObj.
						}

					} """^^xsd:string ;
	] .

#---------------ReceiveCHCPersonal Info BT Nodes---------------------

#---------------SharingCHCSimilarities BT Nodes -----------------
:HandleShareCHCSimilaritiesEvent
	a bt:HandleQueueEvent ;
	rdfs:label "HandleQueueEvent: Share CHC Similarities Event" ;
	bt:event agents:ShareCHCSimilaritiesEvent ;
	bt:validate [
					a bt:ConstructQuery ;
					bt:targetBase ajan:ExecutionKnowledge ;
					bt:sparql """

						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .



:WriteAll2Lakr
	a bt:Write ;
	rdfs:label "Write: all to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
				CONSTRUCT  {
						?s ?p ?o .
				}
				WHERE {
						?s ?p ?o .
				} """^^xsd:string ;
	] .

:WriteCHCPreferences2Execution
	a bt:Write ;
	rdfs:label "Write: CHC Individual Preferences to Execution" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				CONSTRUCT  {
						?agent	rdf:type ajan:Agent ;
								ajan:agentId	?subAgentId ;
								welcome:hasCHCPreferencesInfo	?bnode .

						?bnode	rdf:type	welcome:CHCPreferencesInfo ;
								welcome:hasChcAgePreference ?agePref ;
								welcome:hasChcGenderPreference ?genPref ;
								welcome:hasChcFamilyPreference ?famPref ;
								welcome:hasChcNationPreference ?natPref ;
								welcome:hasChcReligionPreference ?relPref ;
								welcome:hasChcEthnicPreference ?ethPref .

						?agePref	welcome:lowerBound	?lowerAge;
									welcome:higherBound ?higherAge.
				}
				WHERE {
					?agent	rdf:type ajan:Agent ;
							ajan:agentId	?subAgentId .

					?du		#rdf:type	welcome:DialogueUser ;
							welcome:hasChcAgePreference ?agePref ;
							welcome:hasChcGenderPreference ?genPref ;
							welcome:hasChcFamilyPreference ?famPref ;
							welcome:hasChcNationPreference ?natPref ;
							welcome:hasChcReligionPreference ?relPref ;
							welcome:hasChcEthnicPreference ?ethPref .

					OPTIONAL {
						?agePref	welcome:lowerBound	?lowerAge;
									welcome:higherBound ?higherAge.
							}
					{BIND(BNODE() AS ?bnode)}

				} """^^xsd:string ;
	] .


:UpdateCHCPrefInstance2LAKR
	a bt:Update ;
	rdfs:label "Update: CHC Individual Preferences to Execution" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				INSERT  {
						?agent	rdf:type ajan:Agent ;
								ajan:agentId	?subAgentId ;
								welcome:hasCHCPreferencesInfo	?bnode .

						?bnode	rdf:type	welcome:CHCPreferencesInfo ;
								welcome:hasChcAgePreference ?agePref ;
								welcome:hasChcGenderPreference ?genPref ;
								welcome:hasChcFamilyPreference ?famPref ;
								welcome:hasChcNationPreference ?natPref ;
								welcome:hasChcReligionPreference ?relPref ;
								welcome:hasChcEthnicPreference ?ethPref .

						?agePref	welcome:lowerBound	?lowerAge;
									welcome:higherBound ?higherAge.
				}
				WHERE {
					?agent	rdf:type ajan:Agent ;
							ajan:agentId	?subAgentId .

					?du		#rdf:type	welcome:DialogueUser ;
							welcome:hasChcAgePreference ?agePref ;
							welcome:hasChcGenderPreference ?genPref ;
							welcome:hasChcFamilyPreference ?famPref ;
							welcome:hasChcNationPreference ?natPref ;
							welcome:hasChcReligionPreference ?relPref ;
							welcome:hasChcEthnicPreference ?ethPref .

					OPTIONAL {
						?agePref	welcome:lowerBound	?lowerAge ;
									welcome:higherBound ?higherAge .
							}
					{BIND(BNODE() AS ?bnode)}

				} """^^xsd:string ;
	] .


:ComputeSimilarities4CHC
	a bt:Write ;
	rdfs:label "Write: Computed Similarity Values of CHC to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT  {
							?subAgent	welcome:hasCHCSimilarityValue	?smlBnode .
							?smlBnode	rdf:type	welcome:CHCSimilarityValue ;
										mac:hasSubjectAgent ?subAgentId ;
										mac:hasObjectAgent ?pAgentId ;
										mac:isComputedForProblemId  ?chcId ;
										mac:hasSimilarityScore ?maxTotalSml .
						}
                        WHERE {
						{
						SELECT ?subAgent ?subAgentId ?pAgentId ?chcId (MAX(?totalSml) AS ?maxTotalSml)
						WHERE {
						{
						SELECT ?subAgent ?subAgentId ?pAgentId ?chcId  ?totalSml
						WHERE {

						# to retrieve Preferences of the subject agent from Execution.
						?subAgent	rdf:type ajan:Agent ;
								ajan:agentId	?subAgentId ;
								welcome:hasCHCPreferencesInfo	?prefBNode .

						?prefBNode	rdf:type	welcome:CHCPreferencesInfo ;
									welcome:hasChcAgePreference ?subAgePref ;
									welcome:hasChcGenderPreference ?subGenPref ;
									welcome:hasChcFamilyPreference ?subFamPref ;
									welcome:hasChcNationPreference ?subNatPref ;
									welcome:hasChcReligionPreference ?subRelPref ;
									welcome:hasChcEthnicPreference ?subEthPref .
						OPTIONAL {
								?subAgePref	welcome:lowerBound	?subLowerAge;
											welcome:higherBound ?subHigherAge.
								}


						# to retrieve participant agent id
						?pAgentUri	welcome:hasCHCPersonalInfo	?personalInfoBNode ;
									ajan:agentId	?pAgentId .


						# to rule out agent computing similarity with itself
						FILTER(?subAgentId != ?pAgentId)


						# to retrieve Personal Info of the subject agent
						?subAgentUri	welcome:hasCHCPersonalInfo	?subPersonalInfoBNode ;
										ajan:agentId	?subAgentId .
						?subPersonalInfoBNode	rdf:type	welcome:CHCPersonalInfo ;
												mac:hasId	?chcId ;
												welcome:hasAge	?subAge;
												welcome:hasGender	?subGender;
												welcome:hasFamily	?subFamily;
												welcome:hasNationality	?subNationality;
												welcome:hasReligion		?subReligion;
												welcome:hasEthnicity 	?subEthnicity;
												welcome:hasChcLocationPreference	?subLocPref;
												welcome:hasChcAccessibilityPreference	?subAccessPref;
												welcome:hasChcRentPeriodPreference		?subRentPref;
												welcome:hasChcShareWithPreference		?subSharePref.

						OPTIONAL {
							?subRentPref	welcome:startDate ?subStartRent ;
											welcome:endDate ?subEndRent .
								}
						OPTIONAL {
							?subSharePref	welcome:min ?subMinShare ;
											welcome:max ?subMaxShare .
								}

						# to retrieve Personal Info of the participant (object) agent
						?personalInfoBNode		rdf:type	welcome:CHCPersonalInfo ;
												mac:hasId	?chcId ;
												welcome:hasAge	?objAge;
												welcome:hasGender	?objGender;
												welcome:hasFamily	?objFamily;
												welcome:hasNationality	?objNationality;
												welcome:hasReligion		?objReligion;
												welcome:hasEthnicity 	?objEthnicity;
												welcome:hasChcLocationPreference	?objLocPref;
												welcome:hasChcAccessibilityPreference	?objAccessPref;
												welcome:hasChcRentPeriodPreference		?objRentPref;
												welcome:hasChcShareWithPreference		?objSharePref.

						OPTIONAL {
							?objRentPref	welcome:startDate ?objStartRent ;
											welcome:endDate ?objEndRent .
								}
						OPTIONAL {
							?objSharePref	welcome:min ?objMinShare ;
											welcome:max ?objMaxShare .
								}


						# to assign/retrieve preference weight values
						VALUES ?ageWeight {"10"^^xsd:int}
						VALUES ?genWeight {"9"^^xsd:int}
						VALUES ?famWeight {"5"^^xsd:int}
						VALUES ?natWeight {"8"^^xsd:int}
						VALUES ?relWeight {"6"^^xsd:int}
						VALUES ?ethWeight {"7"^^xsd:int}
						VALUES ?locWeight {"2"^^xsd:int}
						VALUES ?accWeight {"3"^^xsd:int}
						VALUES ?rentWeight {"1"^^xsd:int}
						VALUES ?shareWeight {"4"^^xsd:int}

						# to assign/retrieve configuration values
						BIND(1 AS ?matchScore)
						BIND(-1 AS ?unmatchScore)
						#BIND(10 AS ?numOfPreferences)

						# to compute similarity value of subject agent for object agent
						# age similarity
						BIND(IF(?subAgePref = "Dont mind" || (xsd:integer(?objAge) >= xsd:integer(?subLowerAge) && xsd:integer(?objAge) <= xsd:integer(?subHigherAge)), ?matchScore, ?unmatchScore) AS ?ageSml).
						# gender similarity
						BIND(IF(?subGenPref = "Dont mind" || LCASE(STR(?objGender)) = LCASE(STR(?subGenPref)), ?matchScore, ?unmatchScore) AS ?genSml).
						# family similarity
						BIND(IF(?subFamPref = "Dont mind" || LCASE(STR(?objFamily)) = LCASE(STR(?subFamPref)), ?matchScore, ?unmatchScore) AS ?famSml).
						# nationality similarity
						BIND(IF(?subNatPref = "Dont mind" || (?subNatPref = "Same" && ?subNationality = ?objNationality) || (?subNatPref = "Mixed" && ?subNationality != ?objNationality), ?matchScore, ?unmatchScore) AS ?natSml)
						#religion similarity
						BIND(IF(?subRelPref = "Dont mind" || (?subRelPref = "Same" && ?subReligion = ?objReligion) || (?subRelPref = "Mixed" && ?subReligion != ?objReligion), ?matchScore, ?unmatchScore) AS ?relSml)
						# ethnicity similarity
						BIND(IF(?subEthPref = "Dont mind" || (?subEthPref = "Same" && ?subEthnicity = ?objEthnicity) || (?subEthPref = "Mixed" && ?subEthnicity != ?objEthnicity), ?matchScore, ?unmatchScore) AS ?ethSml)
						# location similarity
						BIND(IF(?subLocPref = "Dont mind" || ?objLocPref = "Dont mind" || ?subLocPref = ?objLocPref, ?matchScore, ?unmatchScore) AS ?locSml)
						# accessibility similarity
						BIND(IF(?subAccessPref = "Dont mind" || ?objAccessPref = "Dont mind" || LCASE(STR(?subAccessPref)) = LCASE(STR(?objAccessPref)), ?matchScore, ?unmatchScore) AS ?accSml)
						# rental period similarity
						BIND(((year(xsd:dateTime(?subEndRent)) - year(now()))*365 + 30*(month(xsd:dateTime(?subEndRent))) + day(xsd:dateTime(?subEndRent))) AS ?subEndRentIntValue)
						BIND(((year(xsd:dateTime(?objEndRent)) - year(now()))*365 + 30*(month(xsd:dateTime(?objEndRent))) + day(xsd:dateTime(?objEndRent))) AS ?objEndRentIntValue)
						BIND(((year(xsd:dateTime(?subStartRent)) - year(now()))*365 + 30*(month(xsd:dateTime(?subStartRent))) + day(xsd:dateTime(?subStartRent))) AS ?subStartRentIntValue)
						BIND(((year(xsd:dateTime(?objStartRent)) - year(now()))*365 + 30*(month(xsd:dateTime(?objStartRent))) + day(xsd:dateTime(?objStartRent))) AS ?objStartRentIntValue)
						BIND(IF(?subEndRentIntValue > ?objEndRentIntValue, ?objEndRentIntValue, ?subEndRentIntValue) AS ?smallerEndRent)
						BIND(IF(?subStartRentIntValue > ?objStartRentIntValue, ?subStartRentIntValue, ?objStartRentIntValue) AS ?biggerStartRent)
						BIND(IF(?subStartRentIntValue > ?objStartRentIntValue, ?objStartRentIntValue, ?subStartRentIntValue) AS ?smallerStartRent)
						BIND(IF(?subEndRentIntValue > ?objEndRentIntValue, ?subEndRentIntValue, ?objEndRentIntValue) AS ?biggerEndRent)
						BIND(?smallerEndRent - ?biggerStartRent + 1 AS ?rentOverlap)
						BIND(?biggerEndRent - ?smallerStartRent + 1 AS ?rentTotal)
						BIND(IF(?subRentPref = "Dont mind" || ?objRentPref = "Dont mind", ?matchScore, IF(?subStartRent > ?objEndRent || ?objStartRent > ?subEndRent, ?unmatchScore,
						xsd:double(?rentOverlap/?rentTotal))) AS ?rentSml)
						# share with similarity
						BIND(IF(?subMaxShare > ?objMaxShare, ?objMaxShare, ?subMaxShare) AS ?smallerMaxShare)
						BIND(IF(?subMinShare > ?objMinShare, ?subMinShare, ?objMinShare) AS ?biggerMinShare)
						BIND(IF(?subMinShare > ?objMinShare, ?objMinShare, ?subMinShare) AS ?smallerMinShare)
						BIND(IF(?subMaxShare > ?objMaxShare, ?subMaxShare, ?objMaxShare) AS ?biggerMaxShare)
						BIND(?smallerMaxShare - ?biggerMinShare + 1 AS ?shareOverlap)
						BIND(?biggerMaxShare - ?smallerMinShare + 1 AS ?shareTotal)
						BIND(IF(?subSharePref = "Dont mind" || ?objSharePref = "Dont mind", ?matchScore, IF(?subMinShare > ?objMaxShare || ?objMinShare > ?subMaxShare, ?unmatchScore,
						xsd:double(?shareOverlap/?shareTotal))) AS ?shareSml)
						# total similarity
						BIND(xsd:float(((?ageSml * ?ageWeight) + (?genSml * ?genWeight) + (?famSml * ?famWeight) + (?natSml * ?natWeight) + (?relSml * ?relWeight) +
						(?ethSml * ?ethWeight) + (?locSml * ?locWeight) + (?accSml * ?accWeight) + (?rentSml * ?rentWeight) + (?shareSml * ?shareWeight))/10.0) AS ?totalSml).

						} GROUP BY ?subAgentId ?pAgentId ?chcId ?subAgent ?totalSml
						}
						} GROUP BY  ?subAgent ?subAgentId ?pAgentId ?chcId
						}
						BIND(BNODE() AS ?smlBnode)
						}
			"""^^xsd:string ;
	] .


:MessageSimilarities2Dedicated
	a bt:Message ;
	rdfs:label "Message: Return Similarity values to Dedicated agent"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
					
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "application/ld+json"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "application/ld+json"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?agent	welcome:hasCHCSimilarityValue	?smlBnode .

							?smlBnode	rdf:type	welcome:CHCSimilarityValue ;
										mac:hasSubjectAgent ?agentId ;
										mac:hasObjectAgent ?pAgentId ;
										mac:isComputedForProblemId  ?chcId ;
										mac:hasSimilarityScore ?smlValue .
								}
						WHERE {
							?agent	rdf:type	ajan:Agent ;
									ajan:agentId	?agentId .

							?dAgent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:isRunningCHC	?chcId .

							?agent	welcome:hasCHCSimilarityValue	?smlBnode .

							?smlBnode	rdf:type	welcome:CHCSimilarityValue ;
										mac:hasSubjectAgent ?agentId ;
										mac:hasObjectAgent ?pAgentId ;
										mac:isComputedForProblemId  ?chcId ;
										mac:hasSimilarityScore ?smlValue .

						}"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					SELECT ?requestURI
					WHERE {
						?dAgent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
								welcome:isRunningCHC	?chcId ;
								welcome:hasAddress	?agentAddress .

					BIND(CONCAT(?agentAddress, "?capability=receiveCHCSimilarities") AS ?requestURI )

					#VALUES ?requestURI { "http://localhost:8060/welcome/integration/coordination/ajan/agents/majanAgent1?capability=receiveCHCSimilarities" }
					}"""^^xsd:string
	] .



:WriteSimilarities2LAKR
	a bt:Write ;
	rdfs:label "Write: CHC Similarity values to Agent Knowledge" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
			CONSTRUCT	{

					?agentUri	welcome:hasCHCSimilarityValue	?smlBnode .
					?smlBnode	rdf:type	welcome:CHCSimilarityValue ;
									mac:hasSubjectAgent ?agentId ;
									mac:hasObjectAgent ?pAgentId ;
									mac:isComputedForProblemId  ?chcId ;
									mac:hasSimilarityScore ?smlValue .

					}
			WHERE 	{

						# to retrieve ?chcId if this is a participant agent
						#OPTIONAL {
							?dAgent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:isRunningCHC	?chcId .
						#		}

						# to retrieve ?chcId if this is a dedicated agent
						#OPTIONAL {
						#	?agent	rdf:type	ajan:Agent ;
						#			welcome:isRunningCHC ?chcId .
						#		}

						?agentUri	welcome:hasCHCSimilarityValue	?smlBnode .

						?smlBnode	rdf:type	welcome:CHCSimilarityValue ;
									mac:hasSubjectAgent ?agentId ;
									mac:hasObjectAgent ?pAgentId ;
									mac:isComputedForProblemId  ?chcId ;
									mac:hasSimilarityScore ?smlValue .
					} """^^xsd:string ;
	] .
#---------------SharingCHCSimilarities BT Nodes -----------------

#---------------ReceiveCHCSimilarities BT Nodes---------------------
:HandleReceiveCHCSimilaritiesEvent
	a bt:HandleQueueEvent ;
	rdfs:label "QueueEventHandler: Receive CHC Similarities" ;
	bt:event agents:ReceiveCHCSimilaritiesEvent ;
	bt:validate [
					a bt:ConstructQuery ;
					bt:targetBase ajan:ExecutionKnowledge ;
					bt:sparql """
						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .


:WriteReceivedSimilarities2LAKR
	a bt:Write ;
	rdfs:label "Write: CHC Similarities of participant to Agent Knowledge" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """

			CONSTRUCT  {
				?s ?p ?o .
				}
			WHERE {
				?s ?p ?o .
			} """^^xsd:string ;
	] .

#---------------ReceiveCHCSimilarities BT Nodes---------------------
#---------------SolvingCHCBT Nodes----------------------------

:HandleSolveCHCEvent
	a bt:HandleEvent ;
	rdfs:label "EventHandler: Solve CHC" ;
	bt:event agents:SolveCHCEvent;
	bt:validate [
					a bt:ConstructQuery ;
					bt:targetBase ajan:ExecutionKnowledge ;
					bt:sparql """

						CONSTRUCT {
							?s ?p ?o .
#						ajan:Nothing	ajan:has	"Nothing" .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .


:UpdateRemoveDuplicateSimilarities
	a bt:Update ;
	rdfs:label "Update: remove duplicate similarity values" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					INSERT {
						?agent welcome:pust "pust" .
					}
					WHERE {
						?agent rdf:type ajan:Agent .
					}
					"""^^xsd:string ;
		] .



:lccconstraintcomputation
	a bt:Write ;
	rdfs:label "Write: Compute LCC Cannot Link Connections" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					CONSTRUCT {
						?bnode	mac:hasCannotLinkConnections	?cannotLinkBnode .

						?cannotLinkBnode	mac:hasCannotConnect	?pAgentId, ?pAgentId2 .

					}
					WHERE {
						?bnode	rdf:type	welcome:LCCUseCase ;
								mac:hasId	?lccId ;
								welcome:hasLessonId	?lessonId ;
								mac:hasParticipants	?pAgentId, ?pAgentId2 .
						FILTER(?pAgentId != ?pAgentId2)

						FILTER(xsd:integer(?lessonId) != 1)
						?agentUri	ajan:agentId	?pAgentId ;
									welcome:hasLCCPersonalInfo	?bnode2 .
						?bnode2	rdf:type	welcome:LCCPersonalInfo ;
								mac:hasId	?lccId .

						?agentUri2	ajan:agentId	?pAgentId2 ;
									welcome:hasLCCPersonalInfo	?bnode3 .
						?bnode3	rdf:type	welcome:LCCPersonalInfo ;
								mac:hasId	?lccId .

						BIND((xsd:integer(?lessonId) - 1) AS ?previousLessonId)

						FILTER NOT EXISTS {
							?bnode2	welcome:hasAttendedLessonIDs	?previousLessonId .
						}
						FILTER NOT EXISTS {
							?bnode3	welcome:hasAttendedLessonIDs	?previousLessonId .
						}

						FILTER(?pAgentId < ?pAgentId2)
						BIND(BNODE() AS ?cannotLinkBnode)


					}
		"""^^xsd:string ;
	] .


:ComputeCHCConstraints
	a bt:Write ;
	rdfs:label "Write: Compute CHC Must and Cannot link connections" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
								?bnode	mac:hasCannotLinkConnections	?cannotLinkBnode .

								?cannotLinkBnode	mac:hasCannotConnect	?pAgentId, ?pAgentId2 .
						}
						WHERE {

							{
								SELECT ?bnode ?pAgentId ?pAgentId2 (SUM(?canSpeakSameLang) AS ?finalCanSpeakSameLang)
								WHERE{
									{
										SELECT ?bnode ?pAgentId ?pAgentId2 ?canSpeakSameLang
										WHERE{
											?agentUri	rdf:type	ajan:Agent ;
														welcome:isRunningCHC	?chcId .

											?bnode	rdf:type	welcome:CHCUseCase;
													mac:hasId		?chcId;
													mac:hasParticipants		?pAgentId, ?pAgentId2 .
											FILTER(?pAgentId != ?pAgentId2)
											FILTER(?pAgentId < ?pAgentId2)

											?agentUri2	ajan:agentId	?pAgentId ;
														welcome:hasCHCPersonalInfo	?bnode2 .

											?bnode2	rdf:type	welcome:CHCPersonalInfo;
													mac:hasId	?chcId ;
													welcome:speaksLanguage	?lang .

											?agentUri3	ajan:agentId	?pAgentId2 ;
														welcome:hasCHCPersonalInfo	?bnode3 .

											?bnode3	rdf:type	welcome:CHCPersonalInfo;
													mac:hasId	?chcId ;
													welcome:speaksLanguage	?lang2 .
											BIND(IF(?lang = ?lang2, 1, 0) AS ?canSpeakSameLang)
										} GROUP BY ?bnode ?pAgentId ?pAgentId2 ?canSpeakSameLang
									}
								}GROUP BY ?bnode ?pAgentId ?pAgentId2
							}
							FILTER(?finalCanSpeakSameLang=0)
							BIND(BNODE() AS ?cannotLinkBnode)
				} """^^xsd:string ;
	] .



:ComputeCHCReciprocalSimilarities
	a bt:Write ;
	rdfs:label "Write: Compute CHC Reciprocal Similarities" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
			CONSTRUCT  {
					?agent	rdf:type	ajan:Agent ;
							welcome:isRunningCHC ?chcId ;
							ajan:agentId	?dAgentId.

					?bnode	rdf:type	welcome:CHCUseCase;
							mac:hasId		?chcId;
							mac:hasNumberOfAgents	?numOfAgents;
							mac:hasParticipants		?pAgentId ;
							welcome:hasAgeWeight ?ageWeight;
							welcome:hasGenderWeight ?genWeight;
							welcome:hasFamilyWeight	?famWeight;
							welcome:hasNationalityWeight	?natWeight;
							welcome:hasReligionWeight	?relWeight;
							welcome:hasEthnicityWeight	?ethWeight;
							welcome:hasLocationWeight	?locWeight;
							welcome:hasAccessibilityWeight	?accWeight;
							welcome:hasRentPeriodWeight	?rentWeight;
							welcome:hasShareWithWeight	?shareWeight.

					?rrsBnode	rdf:type	welcome:CHCReciprocalScore ;
								mac:hasSubjectAgent ?pAgentId ;
								mac:hasObjectAgent ?pAgentId2 ;
								mac:isComputedForProblemId  ?chcId ;
								ajan:hasReciprocalScore	?bReciprocalScore .
					}
			WHERE {
					?agent	rdf:type	ajan:Agent ;
							welcome:isRunningCHC ?chcId ;
							ajan:agentId	?dAgentId.

					?bnode	rdf:type	welcome:CHCUseCase;
							mac:hasId		?chcId;
							mac:hasNumberOfAgents	?numOfAgents;
							mac:hasParticipants		?pAgentId, ?pAgentId2 ;
							welcome:hasAgeWeight ?ageWeight;
							welcome:hasGenderWeight ?genWeight;
							welcome:hasFamilyWeight	?famWeight;
							welcome:hasNationalityWeight	?natWeight;
							welcome:hasReligionWeight	?relWeight;
							welcome:hasEthnicityWeight	?ethWeight;
							welcome:hasLocationWeight	?locWeight;
							welcome:hasAccessibilityWeight	?accWeight;
							welcome:hasRentPeriodWeight	?rentWeight;
							welcome:hasShareWithWeight	?shareWeight.

					FILTER(?pAgentId!=?pAgentId2)

					?smlBnode	rdf:type	welcome:CHCSimilarityValue ;
								mac:hasSubjectAgent ?pAgentId ;
								mac:hasObjectAgent ?pAgentId2 ;
								mac:isComputedForProblemId  ?chcId ;
								mac:hasSimilarityScore ?smlValue .

					?smlBnode2	rdf:type	welcome:CHCSimilarityValue ;
								mac:hasSubjectAgent ?pAgentId2 ;
								mac:hasObjectAgent ?pAgentId ;
								mac:isComputedForProblemId  ?chcId ;
								mac:hasSimilarityScore ?smlValue2 .
					FILTER(?smlBnode != ?smlBnode2)

					BIND(0 AS ?reciprocalScore) .
                    BIND(IF(?smlValue != 0 && ?smlValue2 != 0, 2/((1/?smlValue)+(1/?smlValue2)), ?reciprocalScore) AS ?bReciprocalScore) .
					BIND(BNODE() AS ?rrsBnode) .

				} """^^xsd:string ;
	] .

:WriteComputedReciprocalSimilarities
	a bt:Write ;
	rdfs:label "Write: Reciprocal Similarity values to Execution" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
			CONSTRUCT  {
					?agent	rdf:type	ajan:Agent ;
							welcome:isRunningCHC ?chcId ;
							ajan:agentId	?dAgentId.

					?bnode	rdf:type	welcome:CHCUseCase;
							mac:hasId		?chcId;
							mac:hasNumberOfAgents	?numOfAgents;
							mac:hasParticipants		?pAgentId ;
							welcome:hasAgeWeight ?ageWeight;
							welcome:hasGenderWeight ?genWeight;
							welcome:hasFamilyWeight	?famWeight;
							welcome:hasNationalityWeight	?natWeight;
							welcome:hasReligionWeight	?relWeight;
							welcome:hasEthnicityWeight	?ethWeight;
							welcome:hasLocationWeight	?locWeight;
							welcome:hasAccessibilityWeight	?accWeight;
							welcome:hasRentPeriodWeight	?rentWeight;
							welcome:hasShareWithWeight	?shareWeight.

					?rrsBnode	rdf:type	welcome:CHCReciprocalScore ;
								mac:hasSubjectAgent ?pAgentId ;
								mac:hasObjectAgent ?objectAgentId ;
								mac:isComputedForProblemId  ?chcId ;
								ajan:hasReciprocalScore	?bReciprocalScore .
					}
			WHERE {
					?agent	rdf:type	ajan:Agent ;
							welcome:isRunningCHC ?chcId ;
							ajan:agentId	?dAgentId.

					?bnode	rdf:type	welcome:CHCUseCase;
							mac:hasId		?chcId;
							mac:hasNumberOfAgents	?numOfAgents;
							mac:hasParticipants		?pAgentId, ?pAgentId2 ;
							welcome:hasAgeWeight ?ageWeight;
							welcome:hasGenderWeight ?genWeight;
							welcome:hasFamilyWeight	?famWeight;
							welcome:hasNationalityWeight	?natWeight;
							welcome:hasReligionWeight	?relWeight;
							welcome:hasEthnicityWeight	?ethWeight;
							welcome:hasLocationWeight	?locWeight;
							welcome:hasAccessibilityWeight	?accWeight;
							welcome:hasRentPeriodWeight	?rentWeight;
							welcome:hasShareWithWeight	?shareWeight.

					FILTER(?pAgentId!=?pAgentId2)

					OPTIONAL {
						?agentUri	welcome:hasCHCSimilarityValue	?smlBnode .
						?smlBnode	rdf:type	welcome:CHCSimilarityValue ;
									mac:hasSubjectAgent ?pAgentId ;
									mac:hasObjectAgent ?oAgentId ;
									mac:isComputedForProblemId  ?chcId ;
									mac:hasSimilarityScore ?smlValue .
					}

					OPTIONAL {
						?agentUri2 welcome:hasCHCSimilarityValue	?smlBnode2 .
						?smlBnode2	rdf:type	welcome:CHCSimilarityValue ;
									mac:hasSubjectAgent ?oAgentId ;
									mac:hasObjectAgent ?pAgentId ;
									mac:isComputedForProblemId  ?chcId ;
									mac:hasSimilarityScore ?smlValue2 .
					}

					BIND(0 AS ?reciprocalScore) .
					BIND(IF(!BOUND(?smlValue), 0, ?smlValue) AS ?bSmlValue) .
					BIND(IF(!BOUND(?smlValue2), 0, ?smlValue2) AS ?bSmlValue2) .

					BIND(IF(?bSmlValue > 0 && ?bSmlValue2 > 0, 2/((1/?bSmlValue)+(1/?bSmlValue2)), ?reciprocalScore) AS ?bReciprocalScore) .

					BIND(BNODE() AS ?rrsBnode) .
					BIND(IF(!BOUND(?oAgentId), ?pAgentId2, ?oAgentId) AS ?objectAgentId)
								} """^^xsd:string ;
	] .


:WriteReciprocalScores2Lakr
	a bt:Write ;
	rdfs:label "Write: Reciprocal Scores to lakr" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
			CONSTRUCT  {
					?agent	rdf:type	ajan:Agent ;
							welcome:isRunningCHC ?chcId ;
							ajan:agentId	?dAgentId.

					?bnode	rdf:type	welcome:CHCUseCase;
							mac:hasId		?chcId;
							mac:hasNumberOfAgents	?numOfAgents;
							mac:hasParticipants		?pAgentId ;
							welcome:hasAgeWeight ?ageWeight;
							welcome:hasGenderWeight ?genWeight;
							welcome:hasFamilyWeight	?famWeight;
							welcome:hasNationalityWeight	?natWeight;
							welcome:hasReligionWeight	?relWeight;
							welcome:hasEthnicityWeight	?ethWeight;
							welcome:hasLocationWeight	?locWeight;
							welcome:hasAccessibilityWeight	?accWeight;
							welcome:hasRentPeriodWeight	?rentWeight;
							welcome:hasShareWithWeight	?shareWeight.

					?rrsBnode	rdf:type	welcome:CHCReciprocalScore ;
								mac:hasSubjectAgent ?pAgentId ;
								mac:hasObjectAgent ?objectAgentId ;
								mac:isComputedForProblemId  ?chcId ;
								ajan:hasReciprocalScore	?bReciprocalScore .
					}
			WHERE {
					?agent	rdf:type	ajan:Agent ;
							welcome:isRunningCHC ?chcId ;
							ajan:agentId	?dAgentId.

					?bnode	rdf:type	welcome:CHCUseCase;
							mac:hasId		?chcId;
							mac:hasNumberOfAgents	?numOfAgents;
							mac:hasParticipants		?pAgentId ;
							welcome:hasAgeWeight ?ageWeight;
							welcome:hasGenderWeight ?genWeight;
							welcome:hasFamilyWeight	?famWeight;
							welcome:hasNationalityWeight	?natWeight;
							welcome:hasReligionWeight	?relWeight;
							welcome:hasEthnicityWeight	?ethWeight;
							welcome:hasLocationWeight	?locWeight;
							welcome:hasAccessibilityWeight	?accWeight;
							welcome:hasRentPeriodWeight	?rentWeight;
							welcome:hasShareWithWeight	?shareWeight.


					?rrsBnode	rdf:type	welcome:CHCReciprocalScore ;
								mac:hasSubjectAgent ?pAgentId ;
								mac:hasObjectAgent ?objectAgentId ;
								mac:isComputedForProblemId  ?chcId ;
								ajan:hasReciprocalScore	?bReciprocalScore .
								} """^^xsd:string ;
	] .


:ClusteringSolver_HDBSCAN
	a bt:HDBSCAN ;
	rdfs:label "Run HDBSCAN Algorithm to Solve CHC" ;
	bt:query [
				a bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:targetBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
                        CONSTRUCT {
								?bnode	rdf:type	mac:MACProblemInstance;
										mac:hasId		?chcId;
										mac:hasNumberOfAgents	?numOfAgents;
										mac:hasParticipants		?pAgentId ;
										mac:hasPerfectMatchScore ?perfectMatchScore ;
										mac:hasCannotLinkConnections	?cannotLinkBnode .

								?cannotLinkBnode	mac:hasCannotConnect	?cntAgent1, ?cntAgent2 .


								# HDBSCAN Parameters: min Points and min Cluster Size
								?bnode	mac:hasMinPoints	"1"^^xsd:integer ;
										mac:hasMinClusterSize	"2"^^xsd:integer .


								?dsnBnode	rdf:type	mac:DistanceScore ;
											mac:isComputedBy ?pAgentId ;
											mac:isComputedAgainst ?oAgentId ;
											mac:isComputedFor  ?chcId ;
											mac:hasValue	?distanceScore .
						}
						#SELECT ?bnode ?chcId ?numOfAgents ?perfectMatchScore ?dsnBnode ?pAgentId ?oAgentId ?distanceScore
						WHERE {
                           {
                            SELECT DISTINCT ?bnode ?chcId ?numOfAgents ?perfectMatchScore ?pAgentId ?oAgentId ?distanceScore ?cannotLinkBnode ?cntAgent1 ?cntAgent2
                            {
								?agent	rdf:type	ajan:Agent ;
										welcome:isRunningCHC ?chcId ;
										ajan:agentId	?dAgentId.

								?bnode	rdf:type	welcome:CHCUseCase;
										mac:hasId		?chcId;
										mac:hasNumberOfAgents	?numOfAgents;
										mac:hasParticipants		?pAgentId ;
										welcome:hasAgeWeight ?ageWeight;
										welcome:hasGenderWeight ?genWeight;
										welcome:hasFamilyWeight	?famWeight;
										welcome:hasNationalityWeight	?natWeight;
										welcome:hasReligionWeight	?relWeight;
										welcome:hasEthnicityWeight	?ethWeight;
										welcome:hasLocationWeight	?locWeight;
										welcome:hasAccessibilityWeight	?accWeight;
										welcome:hasRentPeriodWeight	?rentWeight;
										welcome:hasShareWithWeight	?shareWeight.
								OPTIONAL{
									?bnode	mac:hasCannotLinkConnections	?cannotLinkBnode .
									?cannotLinkBnode	mac:hasCannotConnect	?cntAgent1, ?cntAgent2 .
								}

										BIND(1 AS ?matchScore)
										BIND(0 AS ?unmatchScore)
										BIND(10 AS ?numberOfPreferences)
										BIND((?matchScore * (?ageWeight + ?genWeight + ?famWeight + ?natWeight + ?relWeight + ?ethWeight + ?locWeight + ?accWeight + ?rentWeight + ?shareWeight))/?numberOfPreferences AS ?perfectMatchScore)

								?rrsBnode	rdf:type	welcome:CHCReciprocalScore ;
											mac:hasSubjectAgent ?pAgentId ;
											mac:hasObjectAgent ?oAgentId ;
											mac:isComputedForProblemId  ?chcId ;
											ajan:hasReciprocalScore	?bReciprocalScore .

								BIND((?perfectMatchScore - ?bReciprocalScore) AS ?distanceScore)
                            }
                                }
								BIND(BNODE() AS ?dsnBnode)
				}
					"""^^xsd:string ;
			] .



:ComputeLccDistancesInLakr
	a bt:Update ;
	rdfs:label "Update: Compute LCC Distances in LAKR" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
								?dsnBnode	rdf:type	mac:DistanceScore ;
											mac:hasSubjectAgent ?pAgentId ;
											mac:hasObjectAgent ?oAgentId ;
											mac:isComputedForProblemId  ?chcId ;
											mac:hasDistanceScore	?distanceScore .
						}
						WHERE {
								?agent	rdf:type	ajan:Agent ;
										welcome:isRunningCHC ?chcId ;
										ajan:agentId	?dAgentId.

								?bnode	rdf:type	welcome:CHCUseCase;
										mac:hasId		?chcId;
										mac:hasNumberOfAgents	?numOfAgents;
										mac:hasParticipants		?pAgentId ;
										welcome:hasAgeWeight ?ageWeight;
										welcome:hasGenderWeight ?genWeight;
										welcome:hasFamilyWeight	?famWeight;
										welcome:hasNationalityWeight	?natWeight;
										welcome:hasReligionWeight	?relWeight;
										welcome:hasEthnicityWeight	?ethWeight;
										welcome:hasLocationWeight	?locWeight;
										welcome:hasAccessibilityWeight	?accWeight;
										welcome:hasRentPeriodWeight	?rentWeight;
										welcome:hasShareWithWeight	?shareWeight.

										BIND(1 AS ?matchScore)
										BIND(0 AS ?unmatchScore)
										BIND(10 AS ?numberOfPreferences)
										BIND((?matchScore * (?ageWeight + ?genWeight + ?famWeight + ?natWeight + ?relWeight + ?ethWeight + ?locWeight + ?accWeight + ?rentWeight + ?shareWeight))/?numberOfPreferences AS ?perfectMatchScore)

								?rrsBnode	rdf:type	welcome:CHCReciprocalScore ;
											mac:hasSubjectAgent ?pAgentId ;
											mac:hasObjectAgent ?oAgentId ;
											mac:isComputedForProblemId  ?chcId ;
											ajan:hasReciprocalScore	?bReciprocalScore .

								BIND((?perfectMatchScore - ?bReciprocalScore) AS ?distanceScore)
								BIND(BNODE() AS ?dsnBnode)
				} """^^xsd:string ;
	] .

:HdbscanAlgorithm
	a bt:HDBSCAN ;
	rdfs:label "Run HDBSCAN Algorithm to Solve CHC" ;
	bt:query [
				a bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:targetBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
										PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

						CONSTRUCT {
								?bnode	rdf:type	welcome:CHCUseCase;
										mac:hasId		?chcId;
										mac:hasNumberOfAgents	?numOfAgents;
										mac:hasParticipants		?pAgentId ;
										mac:hasPerfectMatchScore ?perfectMatchScore ;
										welcome:hasAgeWeight ?ageWeight;
										welcome:hasGenderWeight ?genWeight;
										welcome:hasFamilyWeight	?famWeight;
										welcome:hasNationalityWeight	?natWeight;
										welcome:hasReligionWeight	?relWeight;
										welcome:hasEthnicityWeight	?ethWeight;
										welcome:hasLocationWeight	?locWeight;
										welcome:hasAccessibilityWeight	?accWeight;
										welcome:hasRentPeriodWeight	?rentWeight;
										welcome:hasShareWithWeight	?shareWeight.

								?dsnBnode	rdf:type	mac:DistanceScore ;
											mac:hasSubjectAgent ?pAgentId ;
											mac:hasObjectAgent ?oAgentId ;
											mac:isComputedForProblemId  ?chcId ;
											mac:hasDistanceScore	?distanceScore .
						}
						WHERE {
								?agent	rdf:type	ajan:Agent ;
										welcome:isRunningCHC ?chcId ;
										ajan:agentId	?dAgentId.

								?bnode	rdf:type	welcome:CHCUseCase;
										mac:hasId		?chcId;
										mac:hasNumberOfAgents	?numOfAgents;
										mac:hasParticipants		?pAgentId ;
										welcome:hasAgeWeight ?ageWeight;
										welcome:hasGenderWeight ?genWeight;
										welcome:hasFamilyWeight	?famWeight;
										welcome:hasNationalityWeight	?natWeight;
										welcome:hasReligionWeight	?relWeight;
										welcome:hasEthnicityWeight	?ethWeight;
										welcome:hasLocationWeight	?locWeight;
										welcome:hasAccessibilityWeight	?accWeight;
										welcome:hasRentPeriodWeight	?rentWeight;
										welcome:hasShareWithWeight	?shareWeight.

										BIND(1 AS ?matchScore)
										BIND(0 AS ?unmatchScore)
										BIND(10 AS ?numberOfPreferences)
										BIND((?matchScore * (?ageWeight + ?genWeight + ?famWeight + ?natWeight + ?relWeight + ?ethWeight + ?locWeight + ?accWeight + ?rentWeight + ?shareWeight))/?numberOfPreferences AS ?perfectMatchScore)

								?rrsBnode	rdf:type	welcome:CHCReciprocalScore ;
											mac:hasSubjectAgent ?pAgentId ;
											mac:hasObjectAgent ?oAgentId ;
											mac:isComputedForProblemId  ?chcId ;
											ajan:hasReciprocalScore	?bReciprocalScore .

								BIND((?perfectMatchScore - ?bReciprocalScore) AS ?distanceScore)
								BIND(BNODE() AS ?dsnBnode)
				}
					"""^^xsd:string ;
			] .


:WriteCHCResultRequestContent2Execution
	a bt:Write ;
	rdfs:label "Write: CHC Result Request Content to Execution" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?dAgent	rdf:type	ajan:Agent ;
									ajan:agentId	?dAgentId ;
									welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:isRunningCHC	?chcId ;
									welcome:hasAddress	?agentAddress .

							?bnode	rdf:type	welcome:CHCUseCase;
									mac:hasId		?chcId;
									mac:hasParticipants		?pAgentId .
						}
						WHERE {

							?dAgent	rdf:type	ajan:Agent ;
									welcome:isRunningCHC ?chcId ;
									ajan:agentId	?dAgentId.

							?du		#rdf:type	welcome:DialogueUser ;
									welcome:hasRootAddress	?rootAddress .
							BIND(CONCAT(?rootAddress, ?dAgentId) AS ?agentAddress)

							?bnode	rdf:type	welcome:CHCUseCase;
									mac:hasId		?chcId;
									mac:hasParticipants		?pAgentId .

						}
 """^^xsd:string ;
	] .

:BroadcastHDBSCANResult
	a bt:Broadcast ;
	rdfs:label "Broadcast: the result of CHC Process"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
					
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?dAgent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:hasFinishedCHC	?chcId ;
									welcome:hasAddress	?agentAddress .

							?chcBnode	rdf:type	welcome:CHCUseCase;
										mac:hasId		?chcId;
										mac:hasParticipants		?pAgentId ;
										mac:hasSolution	?clusteringBnode .

							?clusteringBnode	rdf:type	mac:Clustering ;
									mac:hasSolutionOf	?chcId ;
									mac:hasMembers		?clusterBnode .

							?clusterBnode	rdf:type	mac:Cluster ;
									mac:hasMembers	?clusterMember ;
									mac:isClusterOf	?clusteringBnode .
						}
						WHERE {
							?dAgent	rdf:type	ajan:Agent ;
									welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:isRunningCHC	?chcId ;
									welcome:hasAddress	?agentAddress .

							?clusteringBnode	rdf:type	mac:Clustering ;
									mac:hasSolutionOf	?chcId ;
									mac:hasMembers		?clusterBnode .

							?clusterBnode	rdf:type	mac:Cluster ;
									mac:hasMembers	?clusterMember ;
									mac:isClusterOf	?clusteringBnode .

							?chcBnode	rdf:type	welcome:CHCUseCase;
									mac:hasId		?chcId;
									mac:hasParticipants		?pAgentId .




									}"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					SELECT DISTINCT ?requestURI
					WHERE {

#					  VALUES ?requestURI {
#					  "http://localhost:8060/welcome/integration/coordination/ajan/agents/majanAgent2?capability=finalizeCHCProcess"
#					  "http://localhost:8060/welcome/integration/coordination/ajan/agents/majanAgent3?capability=finalizeCHCProcess"
#					  "http://localhost:8060/welcome/integration/coordination/ajan/agents/majanAgent4?capability=finalizeCHCProcess"}

					?agent	rdf:type	ajan:Agent ;
							welcome:isRunningCHC	?chcId ;
							ajan:agentId	?agentId .

					#?bnode	mac:hasId	?chcId ;
					#		mac:hasParticipants	?participant .
					#?participant 	ajan:agentId ?name.

					?bnode	mac:hasId	?chcId ;
							mac:hasParticipants	?pAgentName .

					FILTER(?pAgentName != ?agentId)
					BIND(CONCAT("http://localhost:8060/welcome/integration/coordination/ajan/agents/", ?pAgentName, "?capability=finalizeCHCProcess") AS ?requestURI )
					}
"""^^xsd:string
	] .


:WriteCHCResult2Lakr
	a bt:Write ;
	rdfs:label "Write: CHC Result to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

						CONSTRUCT {
							?chcBnode	rdf:type	welcome:CHCUseCase;
										mac:hasId		?chcId;
										mac:hasParticipants		?pAgentId ;
										welcome:hasStatus	"succeeded" ;
										mac:hasSolution	?clusteringBnode .
							?clusteringBnode	rdf:type	mac:Clustering ;
									mac:hasSolutionOf	?chcId ;
									mac:hasMembers		?clusterBnode .

							?clusterBnode	rdf:type	mac:Cluster ;
									mac:hasMembers	?clusterMember ;
									mac:isClusterOf	?clusteringBnode .
						}
						WHERE {
							?dAgent	#welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:hasFinishedCHC	?chcId .
									#welcome:hasAddress	?agentAddress .

							?chcBnode	rdf:type	welcome:CHCUseCase;
										mac:hasId		?chcId;
										mac:hasParticipants		?pAgentId ;
										mac:hasSolution	?clusteringBnode .

							?clusteringBnode	rdf:type	mac:Clustering ;
									mac:hasSolutionOf	?chcId ;
									mac:hasMembers		?clusterBnode .

							?clusterBnode	rdf:type	mac:Cluster ;
									mac:hasMembers	?clusterMember ;
									mac:isClusterOf	?clusteringBnode .

						}
 """^^xsd:string ;
	] .


:UpdateChcStatus2Failure
	a bt:Update ;
	rdfs:label "Update: CHC status to Failed in LAKR" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					DELETE {
						?chcBnode welcome:hasStatus ?chcStatus .
					}
					INSERT {
						?chcBnode welcome:hasStatus "Failed"^^xsd:string .
					}
					WHERE {
						?agent	rdf:type ajan:Agent .


						OPTIONAL {
							?agent	welcome:isRunningCHC ?chcId .

							?chcBnode	rdf:type	welcome:CHCUseCase;
										welcome:hasStatus	?chcStatus ;
										mac:hasId		?chcId;
										mac:hasParticipants		?pAgentId .
						}
					}
					"""^^xsd:string ;
		] .

:WriteChcFailed2Lakr
	a bt:Write ;
	rdfs:label "Write: CHC Failed to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

						CONSTRUCT {
							?dAgent	ajan:agentId ?dAgentId .

							?chcBnode	rdf:type	welcome:CHCUseCase;
										mac:hasId		?chcId;
										mac:hasParticipants		?pAgentId ;
										welcome:hasStatus	"failed" .

						}
						WHERE {
							?dAgent	ajan:agentId ?dAgentId .

							OPTIONAL {
							?dAgent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:hasFinishedCHC	?chcId .

							?chcBnode	rdf:type	welcome:CHCUseCase;
										mac:hasId		?chcId;
										mac:hasParticipants		?pAgentId .
							}

						}
 """^^xsd:string ;
	] .

:EventProducerFinalizeCHCProcessEvent
	a bt:EventProducer ;
	rdfs:label "EventProducer: Finalize CHC Process Event" ;
	ajan:event agents:FinalizeCHCProcessEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?dAgent	ajan:agentId ?dAgentId .

							?dAgent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:hasFinishedCHC	?chcId ;
									welcome:hasAddress	?agentAddress .

							?chcBnode	rdf:type	welcome:CHCUseCase;
										mac:hasId		?chcId;
										mac:hasParticipants		?pAgentId ;
										#welcome:hasStatus	?defaultChcStatus ;
										mac:hasSolution	?clusteringBnode .

							?clusteringBnode	rdf:type	mac:Clustering ;
									mac:hasSolutionOf	?chcId ;
									mac:hasMembers		?clusterBnode .

							?clusterBnode	rdf:type	mac:Cluster ;
									mac:hasMembers	?clusterMember ;
									mac:isClusterOf	?clusteringBnode .
						}
						WHERE {
							?dAgent	rdf:type	ajan:Agent ;
									ajan:agentId ?dAgentId .

							OPTIONAL {
							?dAgent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:isRunningCHC	?chcId ;
									welcome:hasAddress	?agentAddress .
							}
							#BIND("failed"^^xsd:string AS ?defaultChcStatus)

							OPTIONAL {
								?chcBnode	rdf:type	welcome:CHCUseCase;
											#welcome:hasStatus	?chcStatus ;
											mac:hasId		?chcId ;
											mac:hasParticipants		?pAgentId .
							}

							OPTIONAL {
								?clusteringBnode	rdf:type	mac:Clustering ;
										mac:hasSolutionOf	?chcId ;
										mac:hasMembers		?clusterBnode .
								?clusterBnode	rdf:type	mac:Cluster ;
										mac:hasMembers	?clusterMember ;
										mac:isClusterOf	?clusteringBnode .
								#BIND("succeeded"^^xsd:string AS ?defaultChcStatus)
							}





							}
"""^^xsd:string ;
				] .


#---------------SolvingCHCBT Nodes----------------------------

#---------------FinalizingCHCProcessBT Nodes----------------------------

:HandleFinalizeCHCProcessEvent
	a bt:HandleQueueEvent ;
	rdfs:label "QueueEventHandler: Finalize CHC Process" ;
	bt:event agents:FinalizeCHCProcessEvent;
	bt:validate [
					a bt:ConstructQuery ;
					bt:targetBase ajan:ExecutionKnowledge ;
					bt:sparql """
						PREFIX welcome:<https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .




:Message2AppResultOfCHC
	a bt:Message ;
	rdfs:label "Message: Inform TCN about the result of CHC use case"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
					{
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
  					} UNION {
						VALUES ?hdrName {"X-Msg-Type"}
						VALUES ?fieldValue {"CHC-Result"}
					}						
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "application/ld+json"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "application/ld+json"
				][
					a http-core:Header ;
					http-core:hdrName http-headers:to ;
					http-core:fieldValue "APP"
			]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						#PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						#PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						#PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
#						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
#						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

#						CONSTRUCT {
#							?groupBnode	rdf:type	welcome:Group ;
##									welcome:hasMembers	?agentId ;
#									welcome:isGroupOf	?groupingBNode .
#
#							?groupBnode	welcome:hasMembers	?groupMateAgentId .


#							?clusterBnode	rdf:type	mac:Cluster ;
#									mac:hasMembers	?thisAgentId ;
#									mac:isClusterOf	?clusteringBnode .

#							?clusterBnode	mac:hasMembers	?otherAgentId .
#						}
#						WHERE {
#
#							#?dAgent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
#							#		welcome:hasFinishedCHC	?chcId ;
#							#		welcome:hasAddress	?agentAddress .
#
#							?thisAgent	rdf:type	ajan:Agent ;
#										ajan:agentId	?thisAgentId .
#
#							?chcBnode	rdf:type	welcome:CHCUseCase;
#										mac:hasId		?chcId;
#										mac:hasParticipants		?pAgentId ;
#										#welcome:hasStatus	?defaultChcStatus ;
#										mac:hasSolution	?clusteringBnode .
#
#
#							?clusteringBnode	rdf:type	mac:Clustering ;
#									mac:hasSolutionOf	?chcId ;
#									mac:hasMembers		?clusterBnode .
#
#							?clusterBnode	rdf:type	mac:Cluster ;
#									mac:hasMembers	?thisAgentId ;
#									mac:isClusterOf	?clusteringBnode .
#
#							OPTIONAL {
#								?clusterBnode	mac:hasMembers	?otherAgentId .
#								FILTER(?otherAgentId != ?thisAgentId)
#							}
#
#						}


		PREFIX ajan: <http://www.ajan.de/ajan-ns#>
		PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
		PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
		PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
		PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
		CONSTRUCT {
			?clusterBnode	rdf:type	welcome:Group ;
							welcome:hasMembers	?thisAgentId ;
							welcome:isGroupOf	?clusteringBnode .
			?clusterBnode	welcome:hasMembers	?otherAgentId .

}
						WHERE {
{
SELECT DISTINCT ?clusterBnode ?clusteringBnode ?thisAgentId ?otherAgentId
WHERE{
							?thisAgent	rdf:type	ajan:Agent ;
										ajan:agentId	?thisAgentId .

							?chcBnode	rdf:type	welcome:CHCUseCase;
										mac:hasId		?chcId;
										mac:hasParticipants		?pAgentId ;
										#welcome:hasStatus	?defaultChcStatus ;
										mac:hasSolution	?clusteringBnode .
?clusteringBnode	rdf:type	mac:Clustering ;
mac:hasSolutionOf	?chcId ;
mac:hasMembers		?clusterBnode .
?clusterBnode	rdf:type	mac:Cluster ;
mac:hasMembers	?thisAgentId ;
mac:isClusterOf	?clusteringBnode .
OPTIONAL {

?clusterBnode	mac:hasMembers	?otherAgentId .
FILTER(?otherAgentId != ?thisAgentId)
}
}
}


}

						"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					SELECT ?requestURI
					WHERE {
					  VALUES ?requestURI { "http://localhost:8092/app/inform" }
					}"""^^xsd:string
	] .



:Message2AppChcFailure
	a bt:Message ;
	rdfs:label "Message: Inform TCN that CHC failed"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
					{
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
  					} UNION {
						VALUES ?hdrName {"X-Msg-Type"}
						VALUES ?fieldValue {"CHC-Result"}
					}						
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "application/ld+json"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "application/ld+json"
				][
					a http-core:Header ;
					http-core:hdrName http-headers:to ;
					http-core:fieldValue "APP"
			]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							welcome:CHCUseCase	welcome:hasStatus	"Failed" .
						}
						WHERE {

							?s ?p ?o .
						}
						"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					SELECT ?requestURI
					WHERE {
					  VALUES ?requestURI { "http://localhost:8092/app/inform" }
					}"""^^xsd:string
	] .


:RemoveAgentInCHCAndComputeRuntime
	a bt:Update ;
	rdfs:label "Update: remove chc id if agent either running or involved in it" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					DELETE {
							?agentUri	welcome:isInvolvedInCHC	?chcId ;
										welcome:isRunningCHC	?chcId .
					}
					INSERT{
							?chcBnode	mac:hasRuntime	?chcRuntimeInSeconds.
					}
					WHERE {


						?chcBnode	rdf:type	welcome:CHCUseCase .

						OPTIONAL {
							?chcBnode	mac:hasSolution	?clusteringBnode .
						}

						OPTIONAL {
							?chcBnode	welcome:hasStatus	?chcStatus .
						}

						FILTER(BOUND(?clusteringBnode) || (LCASE(STR(?chcStatus)) = "failed"))

						?chcBnode	mac:hasId		?chcId .

						?agentUri	rdf:type	ajan:Agent ;
									ajan:agentId	?agentName .

						OPTIONAL {
							?agentUri	welcome:isRunningCHC	?chcId .
							#FILTER(?runningChcId = ?chcId)
						}

						OPTIONAL {
							?agentUri	welcome:isInvolvedInCHC	?chcId .
							#FILTER(?involvedChcId = ?chcId)
						}


						BIND(NOW() AS ?endTime)
						?chcBnode	welcome:hasStartTime	?startTime .

						BIND( (DAY(?startTime)*86400 + HOURS(?startTime)*3600 + MINUTES(?startTime)*60 + SECONDS(?startTime)) AS ?startTimeInSeconds)
						BIND( (DAY(?endTime)*86400 + HOURS(?endTime)*3600 + MINUTES(?endTime)*60 + SECONDS(?endTime)) AS ?endTimeInSeconds)
						BIND( ?endTimeInSeconds - ?startTimeInSeconds AS ?chcRuntimeInSeconds)
						}
					"""^^xsd:string ;
		] .

:UpdateAgentRunningChcFlagOff
	a bt:Update ;
	rdfs:label "Agent Running CHC Flag-Off" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					DELETE {
						?agent	welcome:isRunningChc	"true" .
					}
					INSERT{
						?agent	welcome:isRunningChc	"false" .
					}
					WHERE {
						?agent	rdf:type ajan:Agent ;
								welcome:isRunningChc	"true" .
					}
					"""^^xsd:string ;
		] .
:ConditionCHCSucceeded
	a bt:Condition ;
	rdfs:label "has CHC process finished with success?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?dAgent	welcome:hasMacRole	"Dedicated"^^xsd:string .

						OPTIONAL {
							?dAgent	welcome:hasFinishedCHC	?chcId .

							?chcBnode	rdf:type	welcome:CHCUseCase;
										mac:hasId		?chcId;
										mac:hasSolution	?clusteringBnode .
						}

						FILTER(BOUND(?chcId) && BOUND(?clusteringBnode))

						}"""^^xsd:string ;
		].

:ConditionAgentInAnyMAC
	a bt:Condition ;
	rdfs:label "is agent involved in or running any coordination use case?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?agentUri	rdf:type	ajan:Agent ;
									ajan:agentId	?agentName .

						OPTIONAL {
							?agentUri	welcome:isRunningCHC	?involvedInChcId .
							#FILTER(?runningChcId = ?chcId)
						}

						OPTIONAL {
							?agentUri	welcome:isInvolvedInCHC	?runningChcId .
							#FILTER(?involvedChcId = ?chcId)
						}

						FILTER(BOUND(?involvedInChcId) || BOUND(?runningChcId))

						}"""^^xsd:string ;
		] .

:ConditionAgentInAnyCoordination
	a bt:Condition ;
	rdfs:label "is agent involved in or running any coordination use case?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						#?agentUri	rdf:type	ajan:Agent ;
						#			ajan:agentId	?agentName .

						#OPTIONAL {
						#	?agentUri	welcome:isRunningCHC	?runningChcId .
						#}

						#OPTIONAL {
						#	?agentUri	welcome:isInvolvedInCHC	?involvedInChcId .
						#}

						#OPTIONAL {
						#	?agentUri	welcome:hasRunningMac	?macId .
						#}

						#OPTIONAL {
						#	?agentUri	welcome:hasInvolvedInMac	?macId2 .
						#}

						# Each agent must add the Id of the MAC use case with the "welcome:hasInvolvedInMac" predicate,
						# every time it starts to participate in any coordination use case. This also helps to see in which use cases
						# the agent has participated so far.

						# So first we take the MacIds in which this.agent has involved in so far. Then we select the use cases
						# with these MacIds. Then we check if any of those Mac use cases are "Running". If not, then agent is not
						# involved in any mac use case. (?macStatus can take "Running", "Completed" and "Failed" values)

						?agentUri	rdf:type	ajan:Agent ;
									welcome:hasInvolvedInMac	?macId .

						?macUseCase	rdf:type	mac:MACProblemInstance ;
									mac:hasId	?macId ;
									welcome:hasStatus	?macStatus .

						FILTER( LCASE(?macStatus) = "running" )

						#FILTER( LCASE(?macStatus) != "completed" && LCASE(?macStatus) != "failed")

						}"""^^xsd:string ;
		] .




:Message2WPMUpdateStatus2Active
	a bt:Message ;
	rdfs:label "Message: Update Agent status to Active in WAR"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
					
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "application/ld+json"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "application/ld+json"
				][
					a http-core:Header ;
					http-core:hdrName http-headers:to ;
					http-core:fieldValue "WPM"
			]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX welcome-sw: <http://www.semanticweb.org/welcome#>
						CONSTRUCT {
							?agent	welcome:hasStatus	welcome-sw:active ;
									ajan:agentId	?agentName .
						}
						WHERE {
							?agent	rdf:type	ajan:Agent ;
									ajan:agentId	?agentName .
						}
						"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

					SELECT ?requestURI
					WHERE {
					# LINE TO SEND TO DUMMY ENDPOINT
						VALUES ?requestURI { "http://localhost:8092/wpm/updateAgentStatus" }
					
					# LINES TO SEND TO ACTUAL ENDPOINT
					#	welcome:dispatcher welcome:hasAddress ?partialAddress .
					#	BIND(CONCAT(STR(?partialAddress), "/welcome/integration/workflow/dispatcher/agentStatus") AS ?requestURI )
					}

					"""^^xsd:string
	] .
#---------------FinalizingCHCProcessBT Nodes----------------------------

#---------------CHCFailureBT Nodes----------------------------

:HandleCHCFailureEvent
	a bt:HandleEvent ;
	rdfs:label "EventHandler: CHC Failed Event" ;
	bt:event agents:CHCFailureEvent;
	bt:validate [
					a bt:ConstructQuery ;
					bt:targetBase ajan:ExecutionKnowledge ;
					bt:sparql """

						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .




:ConditionWasCHCBuiltAndBroadcasted
	a bt:Condition ;
	rdfs:label "was CHC Use case Broadcasted?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
							?broadcastedBnode	rdf:type	welcome:TemporaryBnode ;
												welcome:hasCHCBroadcasted	"true"^^xsd:boolean ;
												mac:hasId	?chcId .

					}"""^^xsd:string ;
		] .


:BroadcastCHCFailed
	a bt:Broadcast ;
	rdfs:label "Broadcast: CHC process failed"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
					
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?dAgent	welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:hasFinishedCHC	?chcId ;
									welcome:hasAddress	?agentAddress .

							?chcBnode	rdf:type	welcome:CHCUseCase;
										mac:hasId		?chcId;
										mac:hasParticipants		?pAgentId ;
										#welcome:hasStatus	?defaultChcStatus ;
										mac:hasSolution	?clusteringBnode .

							?clusteringBnode	rdf:type	mac:Clustering ;
									mac:hasSolutionOf	?chcId ;
									mac:hasMembers		?clusterBnode .

							?clusterBnode	rdf:type	mac:Cluster ;
									mac:hasMembers	?clusterMember ;
									mac:isClusterOf	?clusteringBnode .
						}
						WHERE {
							?dAgent	rdf:type	ajan:Agent ;
									welcome:hasMacRole	"Dedicated"^^xsd:string ;
									welcome:isRunningCHC	?chcId ;
									welcome:hasAddress	?agentAddress .

							#BIND("failed"^^xsd:string AS ?defaultChcStatus)

							OPTIONAL {
								?chcBnode	rdf:type	welcome:CHCUseCase;
											#welcome:hasStatus	?chcStatus ;
											mac:hasId		?chcId ;
											mac:hasParticipants		?pAgentId .
							}

							OPTIONAL {
								?clusteringBnode	rdf:type	mac:Clustering ;
										mac:hasSolutionOf	?chcId ;
										mac:hasMembers		?clusterBnode .
								?clusterBnode	rdf:type	mac:Cluster ;
										mac:hasMembers	?clusterMember ;
										mac:isClusterOf	?clusteringBnode .
								#BIND("succeeded"^^xsd:string AS ?defaultChcStatus)
							} }
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					SELECT DISTINCT ?requestURI
					WHERE {
					?agent	rdf:type	ajan:Agent ;
							welcome:isRunningCHC	?chcId ;
							ajan:agentId	?agentId .

					?bnode	mac:hasId	?chcId ;
							mac:hasParticipants	?pAgentName .

					FILTER(?pAgentName != ?agentId)
					BIND(CONCAT("http://localhost:8060/welcome/integration/coordination/ajan/agents/", ?pAgentName, "?capability=finalizeCHCProcess") AS ?requestURI )
					}"""^^xsd:string
	] .

#---------------CHCFailureBT Nodes----------------------------

#------------MAJAN Stuff----------------------

:PopulateLARRepos
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Populate Local LAR Repository" ;
	bt:hasChild [
					a bt:Priority ;
					bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
																:EventHandlerRequestLARTriples
																:UpdateBehaviorRunning
																:UpdateCreateHeaderDispatcherMessage
																:MessageSendLARMessageWPM
																:DefaultFailed
															)
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
																:EventHandlerReceiveLocalAgents
																:UpdateBehaviorRunning
																[
																	a bt:Priority ;
																	bt:hasChildren (
																						[
																							a bt:Invert ;
																							bt:hasChild
																										:ConditionLARPopulated
																						]
																						:RemoveLARContent
																						:UpdateLARAgentKnowledge
																					)
																]
																:WriteTriplesLAR
																:UpdateAgentKnowsLAR
																:UpdateLARExecutionKnowledge
																:UpdateDeleteBehaviorRunning
															)
										]
								   )
				] .
:UpdateDeleteBehaviorRunning
	a bt:Update ;
	rdfs:label "Update: Delete agentRunning Flag in the LAKR" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

					DELETE {
						?agent welcome:hasBTRunning ?val .
					}
					 WHERE {
						?agent rdf:type ajan:Agent .
						?agent welcome:hasBTRunning ?val .
					}"""^^xsd:string ;
		] .
:UpdateLARExecutionKnowledge
	a bt:Update ;
	rdfs:label "Update: LAR in Execution Knowledge" ;
	bt:query  [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					DELETE {
						?s ?p ?o .
						?s rdf:type ajan:Agent.
					} WHERE {
						?s ?p ?o .
						?s rdf:type ajan:Agent .

					}"""^^xsd:string ;
		] .
:RemoveLARContent
	a bt:Update ;
	rdfs:label "Update: Remove LAR Content" ;
	bt:query  [
		a bt:UpdateQuery ;
		bt:originBase ajan:LocalAgentsKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					DELETE {
						?s ?o ?p .
					}
					WHERE {
						?s ?o ?p .
					}
					"""^^xsd:string ;
		] .
:UpdateLARAgentKnowledge
	a bt:Update ;
	rdfs:label "Delete LAR Agent Knowledge" ;
	bt:query  [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				DELETE {
					?agent welcome:knowsLocalAgents ?repoName .
				}
				INSERT {
					?agent welcome:needsPopulateLAR "localRepo" .
				}
				WHERE {
					?agent rdf:type ajan:Agent .
				}"""^^xsd:string ;
		] .
:WriteTriplesLAR
	a bt:Write ;
	rdfs:label "Write Triples in LAR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:LocalAgentsKnowledge ;
		bt:sparql """
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			CONSTRUCT {
				?s ?p ?o .
				?s rdf:type ajan:Agent .
			} WHERE  {
				?s ?p ?o .
				?s rdf:type ajan:Agent .
			}"""^^xsd:string ;
	] .
:UpdateAgentKnowsLAR
	a bt:Update ;
	rdfs:label "Update: Agent Knows LAR" ;
	bt:query  [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					DELETE {
						welcome:myWelcomeAgent welcome:needsPopulateLAR "localRepo" .
					}
					INSERT {
						?agent welcome:knowsLocalAgents ajan:LocalAgentsKnowledge .
					}
					 WHERE {
						?agent rdf:type ajan:Agent .
					}
					"""^^xsd:string ;
		] .
:DefaultFailed
	a bt:Fail ;
	rdfs:label "Default Fail - Successful Request to KBS"^^xsd:string .
:UpdateBehaviorRunning
	a bt:Update ;
	rdfs:label "Update: Write agentRunning Flag in the LAKR" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

					INSERT {
						?agent welcome:hasBTRunning "true"^^xsd:boolean .
					}
					 WHERE {
						?agent rdf:type ajan:Agent .
					}"""^^xsd:string ;
		] .
:ConditionLARPopulated
	a bt:Condition ;
	rdfs:label "Condition: LAR initialized?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:LocalAgentsKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					ASK
					WHERE {
						?agent rdf:type ajan:Agent .
						?agent ?p ?o .
					}"""^^xsd:string ;
		] .


:EventHandlerReceiveLocalAgents
	a bt:HandleEvent ;
	rdfs:label "EventHandler: Receive Local Agents" ;
	bt:event <http://localhost:8090/rdf4j/repositories/agents#ReceiveLocalAgentsEvent> ;
	bt:validate [
					a bt:ConstructQuery ;
					bt:targetBase ajan:ExecutionKnowledge ;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .
:MessageSendLARMessageWPM
	a bt:Message ;
	rdfs:label "Message: Request KBS populate LAR" ;
	rdfs:comment "Message: Request KBS populate LAR" ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				SELECT ?hdrName ?fieldValue
				WHERE {
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:AgentKnowledge ;
				bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						CONSTRUCT {
							?agent rdf:type ajan:Agent .
						}
						WHERE {
							?agent rdf:type ajan:Agent .
						}"""^^xsd:string
		  ]
		] ;
	] ;
	bt:queryUri [
	a bt:SelectQuery ;
	a bt:QueryUri ;
	bt:originBase ajan:AgentKnowledge ;
	bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
				SELECT ?requestURI
				WHERE
				{
				  welcome:dispatcher welcome:hasAddress ?partialAddress .
				  BIND(CONCAT(STR(?partialAddress), "/welcome/integration/workflow/dispatcher/globalRepository?repository=war") AS ?requestURI )
				}"""^^xsd:string
	] .
:UpdateCreateHeaderDispatcherMessage
	a bt:Update ;
	rdfs:label "Update: Header Dispatcher Message" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					DELETE{
						welcome:headerCorrelation welcome:hasHeaderName "X-Correlation-ID" .
						welcome:headerCorrelation welcome:hasHeaderValue ?correlationID .
						welcome:headerUserID welcome:hasHeaderName "X-User-ID" .
						welcome:headerUserID welcome:hasHeaderValue ?id .
					}
					INSERT {
						welcome:headerCorrelation welcome:hasHeaderName "X-Correlation-ID" .
						welcome:headerCorrelation welcome:hasHeaderValue ?correlationID .
						welcome:headerUserID welcome:hasHeaderName "X-User-ID" .
						welcome:headerUserID welcome:hasHeaderValue ?id .
					}
					WHERE {
						?msg welcome:hasCorrelationID ?correlationID .
						?du rdf:type welcome:DialogueUser .
						?du welcome:hasUserId ?id .
					}
					"""^^xsd:string ;
		] .
:EventHandlerRequestLARTriples
	a bt:HandleEvent ;
	rdfs:label "EventHandler: Request Populate LAR" ;
	bt:event <http://localhost:8090/rdf4j/repositories/agents#PopulateLAREvent> ;
	bt:validate [
					a bt:ConstructQuery ;
					bt:targetBase ajan:AgentKnowledge ;
					bt:sparql """
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						CONSTRUCT {
							welcome:myWelcomeAgent welcome:needsPopulateLAR "localRepo" .
						}
						WHERE {
							welcome:myWelcomeAgent welcome:needsPopulateLAR "localRepo" .
						}"""^^xsd:string ;
				] .